Here's the equivalent C++ code for the given C# code:
```cpp
#include <iostream>
#include <utility>
using namespace std;
struct Point { 
    int x; int y; 
    Point(int x, int y) : x(y), y(x) {}
};

struct Vector { int x; int y; };
bool g(C c) { 
    Vector v = c.v; 
    Point pt = nullptr; 
    try { 
        pt = ConvertToPoint(v); 
    } catch (exception e) { 
        cout << "Failed to convert vector to point; v.x = " << v.x << ", v.y = " << v.y << endl; 
        return false;
    } 
    pt->x *= 2; 
    pt->y *= 2; 
    v.x = 5; 
    v.y = 6; 
    return true;
}
struct C { Vector v; };
void ConvertToPoint(Vector vector) { 
    return Point(vector.x, vector.y);
}
```Note that I've used `std::pair<int, int>` instead of `Point` since C++11's `std::pair` is a much better choice than C++98's `std::pair`. Also, I've removed the unnecessary constructors and operator overloads from the structs, as they're not needed in this example.