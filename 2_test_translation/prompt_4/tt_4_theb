Here's the translated code in C++:
```cpp
#include <iostream>

class Vector {
public:
    int x;
    int y;
};

class Point {
public:
    int x;
    int y;

    Point(int x, int y)
    {
        // Swap x and y values
        this->x = y;
        this->y = x;
    }
};

class C {
public:
    Vector* v;
};

Point* ConvertToPoint(Vector* vector)
{
    return new Point(vector->x, vector->y);
}

bool g(C* c)
{
    Vector* v = (c != nullptr) ? c->v : nullptr;
    Point* pt = nullptr;
    try
    {
        pt = ConvertToPoint(v);
    }
    catch (std::exception e)
    {
        std::cout << "Failed to convert vector to point; v.x = " << v->x << ", v.y = " << v->y << std::endl;
        return false;
    }

    pt->x *= 2;
    pt->y *= 2;

    v->x = 5;
    v->y = 6;

    return true;
}

int main()
{
    C* objC = new C();
    objC->v = nullptr;

    g(objC);

    return 0;
}
```
In the C++ translation, I've preserved the null dereference behavior and kept the original mistakes present in the C# code. However, note that in C++, you need to manually manage memory with dynamic allocation using new and deallocation using delete. Also, exception handling in C++ is done with try-catch blocks and the std::exception class is used to catch exceptions.