Translate the given C# code that demonstrates mistake of unvalidated loop boundary to C++. Preserve semantics and mistakes present in the code.
```C#
using System;
using System.IO;
using System.Net;
using System.Web;

class C
{
    public int Read()
    {
        string stringNumber = Environment.GetEnvironmentVariable(""ADD""); // ⚠️〔UNCONTROLLED_RESOURCE_CONSUMPTION Input Environment.GetEnvironmentVariable(""ADD"") is not validated and used in loop condition expression i < numberOfLoops〕 // ℹ️〔Environment.GetEnvironmentVariable(""ADD"") is the origin of the taint〕 // ℹ️〔stringNumber is tainted〕
        int count = 0;
        if (stringNumber != null) 
        {
            count = int.Parse(stringNumber.Trim()); // ℹ️〔stringNumber.Trim() is tainted〕// ℹ️〔int.Parse(stringNumber.Trim()) is tainted〕// ℹ️〔count is tainted〕
        }
        return count; // ℹ️〔return is tainted〕
    }
        
    public void Write(int numberOfLoops) 
    {     
        int i = 0;
        while (i < numberOfLoops) // ℹ️〔numberOfLoops is passed into sink in expression i < numberOfLoops〕
        {
            Console.WriteLine(""hello world {0}"",  i);
            i += 2;
        }
    }

    public void Main()
    {
        int data = Read() + 1; // ℹ️〔Read() is tainted〕// ℹ️〔Read() + 1 is tainted〕// ℹ️〔data is tainted〕
        Write(data); // ℹ️〔numberOfLoops is tainted〕
    }
}
```