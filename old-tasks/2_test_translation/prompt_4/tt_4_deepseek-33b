Here is the equivalent C++ code:

```cpp
#include <iostream>

class Vector {
public:
    int x;
    int y;
};

class Point {
public:
    int x;
    int y;

    Point(int x, int y) {
        this->x = y;
        this->y = x;
    }
};

class C {
public:
    Vector* v;
};

Point* ConvertToPoint(Vector* vector) {
    return new Point(vector->x, vector->y);
}

bool g(C* c) {
    Vector* v = c ? c->v : nullptr;
    Point* pt = nullptr;
    try {
        pt = ConvertToPoint(v);
    } catch (std::exception& e) {
        std::cout << "Failed to convert vector to point; v.x = " << v->x << ", v.y = " << v->y << std::endl;
        return false;
    }

    pt->x *= 2;
    pt->y *= 2;

    v->x = 5;
    v->y = 6;

    return true;
}```
Please note that in C++, null dereference is not possible. So, we need to check if the pointer is null before using it. Also, C++ does not have nullable types like C#, so we need to use pointers to represent nullable types.