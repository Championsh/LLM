Imagine you are a programmer creating static code analysis tool.
Generate function with prototype void rewinddir(DIR *), relying on the following static analysis rules which tell us what functions to use to mark the code as needed:

5. For any opening directories or dynamic libraries functions, e.g. dlopen, opendir etc., use sf_tocttou_access(<file>), sf_set_trusted_sink_ptr(<file>), <type> *res, sf_overwrite(&res), sf_overwrite(res), sf_uncontrolled_value(res), sf_set_possible_null(res), sf_handle_acquire(res, <keyword>_CATEGORY) and if function has <mode> parameter, then also use sf_not_acquire_if_eq(res, <mode>, RTLD_NOLOAD) and finally return res, where <file> is function's pointer parameter, <mode> is function's int parameter and <type> is function's returning value
6. For any closing directory or dynamic library functions, e.g. dlclose, closedir etc., use sf_overwrite(<parameter>), sf_handle_release(<parameter>, <keyword>_CATEGORY), where <parameter> is function's pointer parameter and <keyword> is a part of function's name, e.g. for dlclose function the <keyword> is DL, for closedir function the <keyword> is DIR
7. For any reading directory functions, e.g. readdir etc., use sf_tocttou_access(<file>), struct dirent *res, sf_overwrite(&res), sf_set_possible_null(res), return res, where <file> is function's pointer parameter
8. For any returning position in dynamic library functions, e.g. dlsym etc., use void *res, sf_overwrite(&res), sf_set_possible_null(res), return res

Consider that static code analysis functions perform all the necessary actions, you don't need to return or assign anything.
Also consider that we need these functions only to mark the program and we the real functions behavior is not needed.
Don't add implementation for any static code analysis functions, as they are defined in "specfunc.h" header.
