For any cryptographic function that takes a password, key, or secret as an input parameter, or initializes a context:
    Use sf_password_use to mark any input parameters that specify a password, key, or secret.
    If the function returns a pointer to a newly allocated memory block, create a pointer variable to hold the allocated memory.
    Use sf_overwrite to mark both the pointer variable and the memory it points to as overwritten (if applicable).
    Use sf_new to mark the memory as newly allocated with a specific memory category (if applicable).
    Use sf_set_possible_null to mark the pointer variable or context as possibly null.
    Use sf_not_acquire_if_eq to mark the pointer variable or context as not acquired if it is equal to null.
    Use sf_buf_size_limit to set the buffer size limit based on the input parameter that specifies the size of the password, key, secret, or context and any other relevant parameters (if applicable).
    If the function copies a buffer to the allocated memory or context, use sf_bitcopy to mark the memory or context as copied from the input buffer.
    Return the pointer variable or context as the allocated memory or initialized context (if applicable).

For any cryptographic function that generates a key or secret:
    Use sf_bitinit to mark the output buffer as initialized.
    Use sf_password_set to mark the output buffer as containing a password or secret.
    Use sf_buf_size_limit to set the buffer size limit based on the input parameters that specify the size of the output buffer and any other relevant parameters.
    If the function copies a buffer to the output buffer, use sf_bitcopy to mark the output buffer as copied from the input buffer.

For any cryptographic function that frees a context or memory block:
    Use sf_delete to mark the input buffer as freed with a specific memory category.
