1. For any cryptography functions, e.g. crypt, setkey, password etc., use sf_password_use(<parameter>), where <parameter> is any function's char pointer except data parameter;

2. For any value check functions, e.g. isalpha, islower etc., use sf_set_trusted_sink_char(<parameter>), return_PURE(<parameter>), where <parameter> is function's int parameter;

3. For any page or pool allocation functions, e.g. AllocatePages, AllocateReservedPool, AllocateAlignedPages etc., use sf_set_trusted_sink_int(<parameter>), void *Res, sf_overwrite(&Res), sf_overwrite(Res), sf_new(Res, <keyword>_MEMORY_CATEGORY), sf_set_possible_null(Res), sf_not_acquire_if_eq(Res, Res, 0), <set_buffer>, return Res, where <parameter> is the first function's uintptr_t parameter and <keyword> is a part of function's name,  e.g. for AllocateAlignedPages function the <keyword> is ALIGNED_PAGES, for AllocateReservedPool function the <keyword> is POOL, <set_buffer> is sf_buf_size_limit(Res, <size>), where <size> is an allocation size, e.g. for functions where <keyword> contains PAGES <size>=(Pages * EFI_PAGE_SIZE), and for functions where <keyword> contains POOL <size>=<parameter> from its first definition in this rule;

and after that we need to mark the result with its buffer size limit, e.g. for aligned pages or pools we must round up <size> for sf_buf_size_limit(Res, <size>)

4. For any page or pool free functions, e.g. FreeAlignedPages, FreePool etc., use sf_delete(<buffer>, <keyword>_MEMORY_CATEGORY);, where <buffer> is function's pointer parameter and <keyword> is a part of function's name, e.g. for FreeAlignedPages function the <keyword> is ALIGNED_PAGES, for FreePool function the <keyword> is POOL;
