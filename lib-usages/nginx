#NP;
OSSL_PARAM* OSSL_PARAM_merge(const OSSL_PARAM*, const OSSL_PARAM*);
int SSL_CTX_use_serverinfo_file(SSL_CTX*, const char*);
int ERR_pop_to_mark();
IPAddressFamily* IPAddressFamily_new();
int X509_STORE_set_default_paths(X509_STORE*);
BIGNUM* BN_mod_sqrt(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509_get_ext_by_OBJ(const X509*, const ASN1_OBJECT*, int);
void EC_POINT_clear_free(EC_POINT*);
void endpwent();
unsigned long long int strtoull(const  char*,  char**, int);
PKCS7_ENCRYPT* d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT**, const unsigned char**, long);
long BIO_int_ctrl(BIO*, int, long, int);
const ASN1_ITEM* POLICYINFO_it();
int SSL_get_verify_mode(const SSL*);
void X509_EXTENSION_free(X509_EXTENSION*);
unsigned long X509_NAME_hash_old(const X509_NAME*);
const ASN1_ITEM* OCSP_REVOKEDINFO_it();
int pthread_attr_setguardsize(pthread_attr_t*, size_t);
int (BIO*,  char*, int)* BIO_meth_get_gets(const BIO_METHOD*);
BIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*);
int BIO_socket(int, int, int, int);
const EVP_MD* EVP_sha3_256();
int pcre32_utf32_to_host_byte_order(unsigned int*, const unsigned int*, int, int*, int);
int rand_r(unsigned int*);
BIO* BIO_new_ssl_connect(SSL_CTX*);
int ASN1_item_sign_ctx(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, EVP_MD_CTX*);
unsigned long ERR_peek_error();
OSSL_LIB_CTX* OSSL_LIB_CTX_new_from_dispatch(const OSSL_CORE_HANDLE*, const OSSL_DISPATCH*);
RSA_PSS_PARAMS* RSA_PSS_PARAMS_new();
NETSCAPE_SPKAC* d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC**, const unsigned char**, long);
int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX*, const char*);
hostent* gethostbyname(const char*);
ldiv_t ldiv(long int, long int);
OSSL_HTTP_REQ_CTX* OSSL_HTTP_open(const char*, const char*, const char*, const char*, int, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, int);
int i2d_PKCS8PrivateKeyInfo_bio(BIO*, const EVP_PKEY*);
size_t BIO_ctrl_get_write_guarantee(BIO*);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI*, EVP_PKEY*);
X509_REQ* X509_REQ_dup(const X509_REQ*);
int SSL_set_trust(SSL*, int);
void X509_VERIFY_PARAM_table_cleanup();
PKCS7_ENVELOPE* d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE**, const unsigned char**, long);
void SSL_set_client_CA_list(SSL*, stack_st_X509_NAME*);
void RSA_get0_crt_params(const RSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
char* BIO_ADDR_path_string(const BIO_ADDR*);
int BN_is_prime_fasttest(const BIGNUM*, int, void (int, int, void*)*, BN_CTX*, void*, int);
const EVP_CIPHER* ENGINE_get_cipher(ENGINE*, int);
int i2d_ASN1_INTEGER(const ASN1_INTEGER*, unsigned char**);
int i2d_DIST_POINT(const DIST_POINT*, unsigned char**);
int EVP_MD_meth_set_flags(EVP_MD*, unsigned long);
int SSL_renegotiate(SSL*);
void ENGINE_set_table_flags(unsigned int);
X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(const X509_STORE*);
void OCSP_REQUEST_free(OCSP_REQUEST*);
int SSL_is_init_finished(const SSL*);
int gzflush(gzFile, int);
int X509_EXTENSION_get_critical(const X509_EXTENSION*);
PROFESSION_INFO* PROFESSION_INFO_new();
int DH_check_params_ex(const DH*);
int ASN1_STRING_print(BIO*, const ASN1_STRING*);
int SSL_CTX_use_PrivateKey_file(SSL_CTX*, const char*, int);
unsigned long ASN1_SCTX_get_flags(ASN1_SCTX*);
EVP_MAC* EVP_MAC_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_SealInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, unsigned char**, int*, unsigned char*, EVP_PKEY**, int);
int PKCS5_PBKDF2_HMAC(const char*, int, const unsigned char*, int, int, const EVP_MD*, int, unsigned char*);
tm* gmtime_r(restrict const time_t*, restrict tm*);
EVP_PKEY* EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO*);
X509_ALGOR* X509_ALGOR_dup(const X509_ALGOR*);
void pcre_free_study(pcre_extra*);
int EVP_RAND_instantiate(EVP_RAND_CTX*, unsigned int, int, const unsigned char*, size_t, const OSSL_PARAM[]);
X509_POLICY_TREE* X509_STORE_CTX_get0_policy_tree(const X509_STORE_CTX*);
int SSL_client_version(const SSL*);
RSA_METHOD* RSA_meth_dup(const RSA_METHOD*);
const BIGNUM* RSA_get0_n(const RSA*);
int sigandset(sigset_t*, const sigset_t*, const sigset_t*);
const ASN1_ITEM* X509_CERT_AUX_it();
int OPENSSL_hexchar2int(unsigned char);
int pthread_mutexattr_init(pthread_mutexattr_t*);
int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM*, const char*, size_t);
int BN_GF2m_mod_div(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
PKCS8_PRIV_KEY_INFO* EVP_PKEY2PKCS8(const EVP_PKEY*);
int SSL_get_quiet_shutdown(const SSL*);
int i2b_PVK_bio_ex(BIO*, const EVP_PKEY*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(const X509_STORE*);
int deflateCopy(z_streamp, z_streamp);
int X509_PURPOSE_set(int*, int);
int EVP_PKEY_encrypt(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
char* strncat( char*, const  char*, unsigned long int);
int X509_NAME_add_entry(X509_NAME*, const X509_NAME_ENTRY*, int, int);
int PKCS5_pbe_set0_algor_ex(X509_ALGOR*, int, int, const unsigned char*, int, OSSL_LIB_CTX*);
int SSL_CTX_add_server_custom_ext(SSL_CTX*, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void*, custom_ext_parse_cb, void*);
const SSL_METHOD* TLS_method();
int pthread_key_create(pthread_key_t*, void (void*)*);
int deflateResetKeep(z_streamp);
int ispunct(int);
int fchmodat(int, const char*, __mode_t, int);
const BIO_METHOD* BIO_s_mem();
const char* SSL_state_string(const SSL*);
int gzeof(gzFile);
int pcre16_copy_substring(const unsigned short*, int*, int, int, unsigned short*, int);
BIO* BIO_pop(BIO*);
int EVP_PKEY_decrypt_old(unsigned char*, const unsigned char*, int, EVP_PKEY*);
int getnetgrent(restrict  char**, restrict  char**, restrict  char**);
int pthread_attr_getinheritsched(restrict const pthread_attr_t*, restrict int*);
ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE*);
int PEM_write_DHxparams(FILE*, const DH*);
int BIO_closesocket(int);
int sched_getaffinity(__pid_t, size_t, cpu_set_t*);
ssize_t pwritev2(int, const iovec*, int, __off64_t, int);
void OSSL_HTTP_REQ_CTX_free(OSSL_HTTP_REQ_CTX*);
long SSL_SESSION_get_time(const SSL_SESSION*);
int PEM_write_bio_RSAPrivateKey(BIO*, const RSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int (int, X509*, int)* X509_TRUST_set_default(int (int, X509*, int)*);
int PEM_write_X509_REQ(FILE*, const X509_REQ*);
void* ASN1_TYPE_unpack_sequence(const ASN1_ITEM*, const ASN1_TYPE*);
int UI_add_error_string(UI*, const char*);
int getc(FILE*);
const EVP_CIPHER* EVP_aria_192_ccm();
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO**, const unsigned char**, long);
int eventfd_write(int, eventfd_t);
int i2d_PKCS7_bio(BIO*, const PKCS7*);
int X509_get_ext_by_NID(const X509*, int, int);
const EVP_CIPHER* EVP_des_cbc();
int pthread_cond_clockwait(restrict pthread_cond_t*, restrict pthread_mutex_t*, __clockid_t, restrict const timespec*);
const EVP_CIPHER* EVP_aria_128_gcm();
SRTP_PROTECTION_PROFILE* SSL_get_selected_srtp_profile(SSL*);
char* X509_VERIFY_PARAM_get0_host(X509_VERIFY_PARAM*, int);
const ASN1_OBJECT* NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY*);
stack_st_CONF_VALUE* i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD*, ASN1_BIT_STRING*, stack_st_CONF_VALUE*);
char* X509V3_get_string(X509V3_CTX*, const char*, const char*);
OSSL_PARAM OSSL_PARAM_construct_utf8_string(const char*,  char*, size_t);
int mkostemp64( char*, int);
int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM*, uint32_t);
int euidaccess(const char*, int);
const EVP_CIPHER* EVP_bf_ecb();
int (DSA*)* DSA_meth_get_finish(const DSA_METHOD*);
int ASN1_INTEGER_set_uint64(ASN1_INTEGER*, uint64_t);
int i2d_PKCS7_ENVELOPE(const PKCS7_ENVELOPE*, unsigned char**);
int ERR_load_OBJ_strings();
int innetgr(const char*, const char*, const char*, const char*);
void ASN1_STRING_set_default_mask(unsigned long);
void EVP_RAND_free(EVP_RAND*);
int EVP_PKEY_CTX_set0_dh_kdf_oid(EVP_PKEY_CTX*, ASN1_OBJECT*);
int ENGINE_register_all_complete();
const OSSL_PARAM* EVP_CIPHER_settable_ctx_params(const EVP_CIPHER*);
int BN_BLINDING_convert_ex(BIGNUM*, BIGNUM*, BN_BLINDING*, BN_CTX*);
int DIST_POINT_set_dpname(DIST_POINT_NAME*, const X509_NAME*);
CTLOG* CTLOG_new(EVP_PKEY*, const char*);
DSA* DSAparams_dup(const DSA*);
const char* OPENSSL_version_build_metadata();
servent* getservent();
int putc(int, FILE*);
int SSL_write(SSL*, const void*, int);
int sigprocmask(int, restrict const sigset_t*, restrict sigset_t*);
void X509_SIG_free(X509_SIG*);
EVP_PKEY* d2i_PKCS8PrivateKey_fp(FILE*, EVP_PKEY**, pem_password_cb*, void*);
void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH*, BIO*);
stack_st_X509_INFO* PEM_X509_INFO_read_bio_ex(BIO*, stack_st_X509_INFO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
const ASN1_ITEM* PKCS7_DIGEST_it();
const EVP_CIPHER* EVP_aes_256_cbc();
const EVP_CIPHER* EVP_aes_256_cfb1();
void setpwent();
BIO* PKCS7_dataDecode(PKCS7*, EVP_PKEY*, BIO*, X509*);
int BN_BLINDING_lock(BN_BLINDING*);
int creat(const char*, mode_t);
BUF_MEM* BUF_MEM_new_ex(unsigned long);
const ASN1_ITEM* PKCS7_ENVELOPE_it();
int ENGINE_finish(ENGINE*);
int ASN1_TIME_normalize(ASN1_TIME*);
int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM*, const char*, size_t);
EVP_ENCODE_CTX* EVP_ENCODE_CTX_new();
stack_st_OPENSSL_STRING* X509_get1_ocsp(X509*);
int ioctl(int, unsigned long int);
int EVP_MD_CTX_ctrl(EVP_MD_CTX*, int, int, void*);
int RSA_padding_add_X931(unsigned char*, int, const unsigned char*, int);
float strtof_l(restrict const char*, restrict  char**, locale_t);
int i2d_SSL_SESSION(const SSL_SESSION*, unsigned char**);
EVP_RAND_CTX* RAND_get0_public(OSSL_LIB_CTX*);
const EVP_CIPHER* EVP_sm4_ctr();
int EVP_DigestFinal(EVP_MD_CTX*, unsigned char*, unsigned int*);
int X509V3_add_standard_extensions();
char* i2s_ASN1_UTF8STRING(X509V3_EXT_METHOD*, ASN1_UTF8STRING*);
int X509_self_signed(X509*, int);
void malloc_stats();
int SHA384_Init(SHA512_CTX*);
rpcent* getrpcbynumber(int);
int BN_priv_rand(BIGNUM*, int, int, int);
void* SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX*);
int SSL_set_ciphersuites(SSL*, const char*);
void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, EVP_PKEY*)**);
int DHparams_print_fp(FILE*, const DH*);
DSA* d2i_DSA_PUBKEY(DSA**, const unsigned char**, long);
void* OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ*, int, int*, int*);
const EVP_CIPHER* EVP_cast5_cfb64();
void* EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX*, void*);
char* strptime(restrict const char*, restrict const char*, tm*);
int X509_TRUST_get_trust(const X509_TRUST*);
const OSSL_PARAM* EVP_RAND_CTX_settable_params(EVP_RAND_CTX*);
CONF* NCONF_new(CONF_METHOD*);
int PEM_write_RSA_PUBKEY(FILE*, const RSA*);
int DH_check_pub_key(const DH*, const BIGNUM*, int*);
void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD*, int (int, const unsigned char*, int, unsigned char*, unsigned int*, const BIGNUM*, const BIGNUM*, EC_KEY*)**, int (EC_KEY*, BN_CTX*, BIGNUM**, BIGNUM**)**, ECDSA_SIG* (const unsigned char*, int, const BIGNUM*, const BIGNUM*, EC_KEY*)**);
CRL_DIST_POINTS* CRL_DIST_POINTS_new();
int EC_POINT_copy(EC_POINT*, const EC_POINT*);
int fputc(int, FILE*);
int X509at_get_attr_by_OBJ(const stack_st_X509_ATTRIBUTE*, const ASN1_OBJECT*, int);
int strfromf128( char*, size_t, const char*, _Float128);
int SSL_pending(const SSL*);
void swab(restrict const void*, restrict void*, ssize_t);
void* X509_LOOKUP_get_method_data(const X509_LOOKUP*);
EC_KEY* EC_KEY_dup(const EC_KEY*);
int chown(const char*, __uid_t, __gid_t);
void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS*);
int SSL_CTX_set_alpn_protos(SSL_CTX*, const unsigned char*, unsigned int);
void ENGINE_unregister_digests(ENGINE*);
int X509_print_fp(FILE*, X509*);
int ERR_load_CONF_strings();
int uncompress2(Bytef*, uLongf*, const Bytef*, uLong*);
int setuid(__uid_t);
const EVP_CIPHER* EVP_aes_192_cbc();
const __int32_t** __ctype_toupper_loc();
int BN_GF2m_mod_arr(BIGNUM*, const BIGNUM*, const int[]);
size_t EVP_PKEY_meth_get_count();
unsigned char* EVP_Q_mac(OSSL_LIB_CTX*, const char*, const char*, const char*, const OSSL_PARAM*, const void*, size_t, const unsigned char*, size_t, unsigned char*, size_t, size_t*);
char* BN_options();
const EC_KEY_METHOD* EC_KEY_OpenSSL();
ASN1_UTF8STRING* ASN1_UTF8STRING_new();
char* strchr(const  char*, int);
int deflatePrime(z_streamp, int, int);
ENGINE* DH_get0_engine(DH*);
void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, int, int, void*)*, int (EVP_PKEY_CTX*, const char*, const char*)*);
int X509_check_issued(X509*, X509*);
int fstat(int, stat*);
int i2d_ASN1_UTF8STRING(const ASN1_UTF8STRING*, unsigned char**);
const char* RAND_file_name( char*, size_t);
int DH_set_length(DH*, long);
int OPENSSL_atexit(void ()*);
void X509_STORE_CTX_set_current_cert(X509_STORE_CTX*, X509*);
int i2d_RSAPublicKey_bio(BIO*, const RSA*);
int EVP_PKEY_get_raw_public_key(const EVP_PKEY*, unsigned char*, size_t*);
int ASN1_buf_print(BIO*, const unsigned char*, size_t, int);
void* dlvsym(restrict void*, restrict const char*, restrict const char*);
int ENGINE_get_flags(const ENGINE*);
ASN1_OCTET_STRING* SXNET_get_id_ulong(SXNET*, unsigned long);
int gai_cancel(gaicb*);
int sigtimedwait(restrict const sigset_t*, restrict siginfo_t*, restrict const timespec*);
int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
int rresvport(int*);
void SSL_set_shutdown(SSL*, int);
void SSL_CTX_sess_set_remove_cb(SSL_CTX*, void (ssl_ctx_st*, SSL_SESSION*)*);
int BN_X931_derive_prime_ex(BIGNUM*, BIGNUM*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_GENCB*);
int PKCS7_dataFinal(PKCS7*, BIO*);
void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
void setgrent();
X509_SIG* X509_SIG_new();
int UI_method_set_prompt_constructor(UI_METHOD*,  char* (UI*, const char*, const char*)*);
int i2d_OCSP_RESPBYTES(const OCSP_RESPBYTES*, unsigned char**);
EVP_PKEY* b2i_PVK_bio(BIO*, pem_password_cb*, void*);
ASN1_GENERALSTRING* d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING**, const unsigned char**, long);
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO*, ASN1_OBJECT*);
int getgroups(int, __gid_t[]);
int PEM_write_bio_X509_AUX(BIO*, const X509*);
int DSA_print(BIO*, const DSA*, int);
int BN_rshift(BIGNUM*, const BIGNUM*, int);
int DSA_meth_set_init(DSA_METHOD*, int (DSA*)*);
int pthread_condattr_destroy(pthread_condattr_t*);
pcre16_extra* pcre16_study(const pcre16*, int, const char**);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI*, EVP_PKEY*);
const ASN1_ITEM* ECPKPARAMETERS_it();
void RAND_keep_random_devices_open(int);
int DH_meth_set_flags(DH_METHOD*, int);
int EVP_RAND_is_a(const EVP_RAND*, const char*);
X509_PKEY* X509_PKEY_new();
int EC_GROUP_precompute_mult(EC_GROUP*, BN_CTX*);
int SSL_set_tlsext_max_fragment_length(SSL*, uint8_t);
void ENGINE_unregister_EC(ENGINE*);
hostent* gethostbyname2(const char*, int);
const openssl_ssl_test_functions* SSL_test_functions();
const EVP_CIPHER* EVP_aria_128_cbc();
ASN1_OBJECT* X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE*);
int SSL_CTX_check_private_key(const SSL_CTX*);
void OPENSSL_cleanse(void*, size_t);
int RSA_print(BIO*, const RSA*, int);
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP*, X509_EXTENSION*, int);
DSA* d2i_DSAPublicKey(DSA**, const unsigned char**, long);
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST*, const ASN1_OBJECT*, int);
int X509_CRL_sign(X509_CRL*, EVP_PKEY*, const EVP_MD*);
int strncasecmp(const  char*, const  char*, unsigned long int);
void* EVP_MD_CTX_get0_md_data(const EVP_MD_CTX*);
CERTIFICATEPOLICIES* d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES**, const unsigned char**, long);
void* malloc(unsigned long int);
void* memalign(unsigned long int, unsigned long int);
int CONF_module_add(const char*, conf_init_func*, conf_finish_func*);
int EVP_CIPHER_CTX_get_num(const EVP_CIPHER_CTX*);
int RSA_meth_set1_name(RSA_METHOD*, const char*);
void* __mempcpy(restrict void*, restrict const void*, size_t);
int EVP_BytesToKey(const EVP_CIPHER*, const EVP_MD*, const unsigned char*, const unsigned char*, int, int, unsigned char*, unsigned char*);
int BIO_nwrite(BIO*,  char**, int);
void SSL_set_default_passwd_cb_userdata(SSL*, void*);
X509* X509_REQ_to_X509(X509_REQ*, int, EVP_PKEY*);
int ptsname_r(int,  char*, size_t);
EXTENDED_KEY_USAGE* EXTENDED_KEY_USAGE_new();
int vsnprintf( char*, unsigned long int, const  char*, __va_list_tag*);
int X509_STORE_CTX_get_explicit_policy(const X509_STORE_CTX*);
int BN_rshift1(BIGNUM*, const BIGNUM*);
void DSA_SIG_free(DSA_SIG*);
char* X509_TRUST_get0_name(const X509_TRUST*);
int pthread_barrier_init(restrict pthread_barrier_t*, restrict const pthread_barrierattr_t*, unsigned int);
const EVP_MD* ENGINE_get_digest(ENGINE*, int);
X509_CRL* X509_OBJECT_get0_X509_CRL(const X509_OBJECT*);
int EVP_CIPHER_CTX_set_params(EVP_CIPHER_CTX*, const OSSL_PARAM[]);
stack_st_ASN1_OBJECT* X509_get0_trust_objects(X509*);
int OCSP_basic_sign_ctx(OCSP_BASICRESP*, X509*, EVP_MD_CTX*, stack_st_X509*, unsigned long);
int i2d_X509_CRL_fp(FILE*, const X509_CRL*);
const OSSL_PARAM* EVP_MAC_settable_ctx_params(const EVP_MAC*);
int SHA224_Update(SHA256_CTX*, const void*, size_t);
int pthread_mutexattr_destroy(pthread_mutexattr_t*);
int PEM_def_callback( char*, int, int, void*);
ASN1_TIME* ASN1_TIME_new();
void* dlopen(const char*, int);
int EVP_SIGNATURE_up_ref(EVP_SIGNATURE*);
int SSL_CTX_get_verify_depth(const SSL_CTX*);
int SSL_set1_host(SSL*, const char*);
void ADMISSION_SYNTAX_free(ADMISSION_SYNTAX*);
int pthread_attr_setstacksize(pthread_attr_t*, size_t);
int ASN1_put_eoc(unsigned char**);
int DH_compute_key(unsigned char*, const BIGNUM*, DH*);
EVP_CIPHER_CTX* EVP_CIPHER_CTX_new();
ASN1_SEQUENCE_ANY* d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY**, const unsigned char**, long);
void* EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX*);
int i2d_PKCS7_ISSUER_AND_SERIAL(const PKCS7_ISSUER_AND_SERIAL*, unsigned char**);
OCSP_CRLID* OCSP_CRLID_new();
EC_GROUP* EC_GROUP_dup(const EC_GROUP*);
ASN1_VALUE* ASN1_item_new_ex(const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int BN_pseudo_rand(BIGNUM*, int, int, int);
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE*);
int RSA_meth_set_priv_enc(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
void OPENSSL_sk_pop_free(OPENSSL_STACK*, void (void*)*);
int ASN1_TYPE_set_octetstring(ASN1_TYPE*, unsigned char*, int);
void X509_email_free(stack_st_OPENSSL_STRING*);
BN_CTX* BN_CTX_secure_new_ex(OSSL_LIB_CTX*);
ssize_t sendto(int, const void*, size_t, int, __CONST_SOCKADDR_ARG, socklen_t);
const BIGNUM* DSA_get0_priv_key(const DSA*);
int BN_mod_exp_mont_consttime_x2(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int EVP_PKEY_CTX_set_signature_md(EVP_PKEY_CTX*, const EVP_MD*);
const EVP_CIPHER* EVP_aria_256_cbc();
const z_crc_t* get_crc_table();
const EVP_CIPHER* EVP_aes_128_ccm();
void BN_clear_free(BIGNUM*);
int ENGINE_set_destroy_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
int BN_BLINDING_unlock(BN_BLINDING*);
int RSA_test_flags(const RSA*, int);
int i2d_X509_CINF(const X509_CINF*, unsigned char**);
int EVP_ASYM_CIPHER_names_do_all(const EVP_ASYM_CIPHER*, void (const char*, void*)*, void*);
int EC_GROUP_have_precompute_mult(const EC_GROUP*);
int X509_OBJECT_set1_X509_CRL(X509_OBJECT*, X509_CRL*);
char* rindex(const  char*, int);
int pthread_mutexattr_getprioceiling(restrict const pthread_mutexattr_t*, restrict int*);
char* strcasestr(const char*, const char*);
int BIO_hex_string(BIO*, int, int, const void*, int);
X509* PEM_read_bio_X509(BIO*, X509**, pem_password_cb*, void*);
int pthread_getschedparam(pthread_t, restrict int*, restrict sched_param*);
int inflateInit_(z_streamp, const char*, int);
void* SSL_CTX_get0_security_ex_data(const SSL_CTX*);
int pcre16_exec(const pcre16*, const pcre16_extra*, const unsigned short*, int, int, int, int*, int);
X509_REQ* X509_REQ_new();
int EVP_PKEY_sign(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
int X509_REQ_add1_attr_by_NID(X509_REQ*, int, int, const unsigned char*, int);
int i2d_CERTIFICATEPOLICIES(const CERTIFICATEPOLICIES*, unsigned char**);
int __memcmpeq(const void*, const void*, size_t);
const ASN1_ITEM* NAMING_AUTHORITY_it();
unsigned char* SHA384(const unsigned char*, size_t, unsigned char*);
int NCONF_load_fp(CONF*, FILE*, long*);
int UTF8_getc(const unsigned char*, int, unsigned long*);
void EC_KEY_set_default_method(const EC_KEY_METHOD*);
int EVP_MD_get_size(const EVP_MD*);
X509_EXTENSION* OCSP_BASICRESP_get_ext(OCSP_BASICRESP*, int);
rpcent* getrpcbyname(const char*);
size_t __ctype_get_mb_cur_max();
int OSSL_PARAM_set_uint64(OSSL_PARAM*, uint64_t);
int EC_POINT_make_affine(const EC_GROUP*, EC_POINT*, BN_CTX*);
int mkstemp64( char*);
int RSA_get_version(RSA*);
const EVP_CIPHER* EVP_cast5_cbc();
int pcre32_get_substring_list(const unsigned int*, int*, int, const unsigned int***);
const EVP_CIPHER* EVP_sm4_ofb();
int getsourcefilter(int, uint32_t, const sockaddr*, socklen_t, uint32_t*, uint32_t*, sockaddr_storage*);
int SSL_CTX_set_default_ctlog_list_file(SSL_CTX*);
OCSP_SINGLERESP* OCSP_SINGLERESP_new();
X509_ATTRIBUTE* d2i_X509_ATTRIBUTE(X509_ATTRIBUTE**, const unsigned char**, long);
__useconds_t ualarm(__useconds_t, __useconds_t);
int SSL_CTX_remove_session(SSL_CTX*, SSL_SESSION*);
void SSL_set_verify_result(SSL*, long);
int RSA_public_decrypt(int, const unsigned char*, unsigned char*, RSA*, int);
void COMP_CTX_free(COMP_CTX*);
int OTHERNAME_cmp(OTHERNAME*, OTHERNAME*);
stack_st_X509* X509_STORE_CTX_get1_certs(X509_STORE_CTX*, const X509_NAME*);
int DH_get_nid(const DH*);
FILE* fopencookie(restrict void*, restrict const char*, cookie_io_functions_t);
BIGNUM* ASN1_INTEGER_to_BN(const ASN1_INTEGER*, BIGNUM*);
int ASYNC_WAIT_CTX_get_status(ASYNC_WAIT_CTX*);
BIO* SSL_get_rbio(const SSL*);
int PEM_SignInit(EVP_MD_CTX*, EVP_MD*);
int X509_cmp_time(const ASN1_TIME*, time_t*);
EVP_PKEY* EVP_PKEY_new_raw_public_key_ex(OSSL_LIB_CTX*, const char*, const char*, const unsigned char*, size_t);
__uid_t getuid();
X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(const X509_LOOKUP_METHOD*);
int EVP_MD_meth_set_app_datasize(EVP_MD*, int);
int RSA_private_encrypt(int, const unsigned char*, unsigned char*, RSA*, int);
int X509_EXTENSION_set_critical(X509_EXTENSION*, int);
int sem_post(sem_t*);
void ASYNC_block_pause();
int pthread_cond_init(restrict pthread_cond_t*, restrict const pthread_condattr_t*);
int SSL_alloc_buffers(SSL*);
int SSL_CIPHER_is_aead(const SSL_CIPHER*);
int tgkill(__pid_t, __pid_t, int);
const SSL_METHOD* DTLS_server_method();
int unlinkat(int, const char*, int);
void DIST_POINT_NAME_free(DIST_POINT_NAME*);
int DSA_meth_set_keygen(DSA_METHOD*, int (DSA*)*);
int EVP_PKEY_verify(EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t);
const EC_METHOD* EC_GFp_simple_method();
int BIO_get_host_ip(const char*, unsigned char*);
int pthread_getname_np(pthread_t,  char*, size_t);
const EVP_PKEY_METHOD* ENGINE_get_pkey_meth(ENGINE*, int);
int ERR_load_DH_strings();
int EVP_PKEY_CTX_set_rsa_pss_saltlen(EVP_PKEY_CTX*, int);
int X509_NAME_print_ex_fp(FILE*, const X509_NAME*, int, unsigned long);
void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING*);
int gsignal(int);
int EVP_Cipher(EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, unsigned int);
const EVP_CIPHER* EVP_des_cfb1();
int sendmmsg(int, mmsghdr*, unsigned int, int);
int gzrewind(gzFile);
stack_st_X509* X509_chain_up_ref(stack_st_X509*);
int posix_fallocate64(int, off64_t, off64_t);
int X509_REQ_get_attr_count(const X509_REQ*);
int EVP_default_properties_is_fips_enabled(OSSL_LIB_CTX*);
const BIGNUM* BN_get0_nist_prime_384();
int X509at_get_attr_by_NID(const stack_st_X509_ATTRIBUTE*, int, int);
int BIO_lookup(const char*, const char*, BIO_lookup_type, int, int, BIO_ADDRINFO**);
PROXY_POLICY* d2i_PROXY_POLICY(PROXY_POLICY**, const unsigned char**, long);
int pthread_rwlockattr_getpshared(restrict const pthread_rwlockattr_t*, restrict int*);
int ERR_load_CT_strings();
size_t strftime(restrict  char*, size_t, restrict const char*, restrict const tm*);
int RSA_padding_check_PKCS1_OAEP(unsigned char*, int, const unsigned char*, int, int, const unsigned char*, int);
int X509_set_subject_name(X509*, const X509_NAME*);
int OPENSSL_sk_insert(OPENSSL_STACK*, const void*, int);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX*, SSL_CTX_npn_advertised_cb_func, void*);
int EVP_SignFinal_ex(EVP_MD_CTX*, unsigned char*, unsigned int*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
int i2d_PKCS7_ENC_CONTENT(const PKCS7_ENC_CONTENT*, unsigned char**);
void SSL_CTX_free(SSL_CTX*);
int i2d_RSA_OAEP_PARAMS(const RSA_OAEP_PARAMS*, unsigned char**);
const BIGNUM* RSA_get0_dmp1(const RSA*);
int X509_STORE_CTX_get_error(const X509_STORE_CTX*);
X509_CRL_INFO* X509_CRL_INFO_new();
int i2d_BASIC_CONSTRAINTS(const BASIC_CONSTRAINTS*, unsigned char**);
X509_SIG* d2i_PKCS8_fp(FILE*, X509_SIG**);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX*, int);
X509_POLICY_NODE* X509_policy_level_get0_node(const X509_POLICY_LEVEL*, int);
X509_EXTENSION* X509V3_EXT_nconf(CONF*, X509V3_CTX*, const char*, const char*);
X509_CRL_METHOD* X509_CRL_METHOD_new(int (X509_CRL*)*, int (X509_CRL*)*, int (X509_CRL*, X509_REVOKED**, const ASN1_INTEGER*, const X509_NAME*)*, int (X509_CRL*, EVP_PKEY*)*);
const EC_METHOD* EC_GFp_nistp224_method();
int fscanf(restrict FILE*, restrict const  char*);
void endrpcent();
unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH*);
BIGNUM* BN_get_rfc3526_prime_6144(BIGNUM*);
int EVP_PKEY_CTX_set_ecdh_kdf_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_PKEY_digestsign_supports_digest(EVP_PKEY*, OSSL_LIB_CTX*, const char*, const char*);
int DH_compute_key_padded(unsigned char*, const BIGNUM*, DH*);
int i2d_re_X509_REQ_tbs(X509_REQ*, unsigned char**);
OCSP_RESPONSE* OCSP_RESPONSE_new();
void SSL_CTX_set_record_padding_callback_arg(SSL_CTX*, void*);
int strverscmp(const char*, const char*);
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX*, void*);
int OCSP_request_add1_cert(OCSP_REQUEST*, X509*);
void ADMISSIONS_free(ADMISSIONS*);
int sigsetmask(int);
int SCT_set1_log_id(SCT*, const unsigned char*, size_t);
const char* sigdescr_np(int);
void X509_SIG_INFO_set(X509_SIG_INFO*, int, int, int, uint32_t);
int OCSP_resp_get0_signer(OCSP_BASICRESP*, X509**, stack_st_X509*);
_Float64x strtof64x_l(restrict const char*, restrict  char**, locale_t);
const OSSL_PARAM* EVP_MAC_CTX_settable_params(EVP_MAC_CTX*);
int SSL_SESSION_print_keylog(BIO*, const SSL_SESSION*);
int EVP_PKEY_decrypt_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int ruserok(const char*, int, const char*, const char*);
int stat(restrict const char*, restrict stat*);
int isprint(int);
size_t EC_POINT_point2buf(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, unsigned char**, BN_CTX*);
X509_VERIFY_PARAM* X509_STORE_get0_param(const X509_STORE*);
void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY*, ASN1_OBJECT*);
int mprotect(void*, size_t, int);
int timer_create(clockid_t, restrict sigevent*, restrict timer_t*);
int CRYPTO_secure_malloc_done();
char* X509_PURPOSE_get0_sname(const X509_PURPOSE*);
int i2d_X509_REVOKED(const X509_REVOKED*, unsigned char**);
void* memchr(const void*, int, unsigned long int);
void ECPARAMETERS_free(ECPARAMETERS*);
int RSA_padding_add_PKCS1_type_1(unsigned char*, int, const unsigned char*, int);
stack_st_PKCS7_SIGNER_INFO* PKCS7_get_signer_info(PKCS7*);
void* CRYPTO_zalloc(size_t, const char*, int);
int i2d_EC_PUBKEY_fp(FILE*, const EC_KEY*);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO*, X509*, EVP_PKEY*, const EVP_MD*);
const char* X509_get_default_cert_area();
int EVP_CIPHER_meth_set_init(EVP_CIPHER*, int (EVP_CIPHER_CTX*, const unsigned char*, const unsigned char*, int)*);
int EVP_PKEY_CTX_set0_ecdh_kdf_ukm(EVP_PKEY_CTX*, unsigned char*, int);
int pcre_refcount(pcre*, int);
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX*, unsigned char*);
SSL_SESSION* (ssl_st*, const unsigned char*, int, int*)* SSL_CTX_sess_get_get_cb(SSL_CTX*);
int DSA_security_bits(const DSA*);
unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION*);
int BN_div(BIGNUM*, BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
__pid_t gettid();
int X509_supported_extension(X509_EXTENSION*);
ASN1_INTEGER* X509_get_serialNumber(X509*);
void ASN1_STRING_length_set(ASN1_STRING*, int);
X509_PUBKEY* d2i_X509_PUBKEY_bio(BIO*, X509_PUBKEY**);
const ASN1_ITEM* PKCS7_SIGN_ENVELOPE_it();
int ENGINE_set_id(ENGINE*, const char*);
int EVP_PKEY_CTX_set_dh_paramgen_type(EVP_PKEY_CTX*, int);
int X509_LOOKUP_shutdown(X509_LOOKUP*);
__ssize_t __getdelim(restrict  char**, restrict size_t*, int, restrict FILE*);
void EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
FILE* freopen(restrict const char*, restrict const char*, restrict FILE*);
int pthread_attr_setschedpolicy(pthread_attr_t*, int);
int ENGINE_init(ENGINE*);
int BN_mod_exp_mont(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*);
int OSSL_parse_url(const char*,  char**,  char**,  char**,  char**, int*,  char**,  char**,  char**);
int BIO_accept_ex(int, BIO_ADDR*, int);
int OSSL_PARAM_get_BN(const OSSL_PARAM*, BIGNUM**);
void* ASN1_d2i_bio(void* ()*, d2i_of_void*, BIO*, void**);
float strtof(const  char*,  char**);
int sighold(int);
int dlclose(void*);
div_t div(int, int);
void pcre_assign_jit_stack(pcre_extra*, pcre_jit_callback, void*);
BASIC_CONSTRAINTS* BASIC_CONSTRAINTS_new();
EC_GROUP* EC_GROUP_new_curve_GF2m(const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int i2d_PUBKEY_fp(FILE*, const EVP_PKEY*);
ASN1_TIME* X509_gmtime_adj(ASN1_TIME*, long);
const char* EVP_PKEY_get0_description(const EVP_PKEY*);
int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING*, const ASN1_OCTET_STRING*);
int X509_add_cert(stack_st_X509*, X509*, int);
const ASN1_ITEM* X509_PUBKEY_it();
const ASN1_ITEM* EXTENDED_KEY_USAGE_it();
const EVP_CIPHER* EVP_rc2_64_cbc();
int isspace_l(int, locale_t);
void __pthread_register_cancel_defer(__pthread_unwind_buf_t*);
int pthread_rwlock_wrlock(pthread_rwlock_t*);
char* crypt_gensalt_ra(const char*, unsigned long, const char*, int);
char* (UI*, const char*, const char*)* UI_method_get_prompt_constructor(const UI_METHOD*);
OCSP_ONEREQ* OCSP_ONEREQ_new();
char* ecvt(double, int, restrict int*, restrict int*);
X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(const X509_STORE_CTX*);
__ssize_t getdelim(restrict  char**, restrict size_t*, int, restrict FILE*);
int eventfd(unsigned int, int);
BN_CTX* BN_CTX_new_ex(OSSL_LIB_CTX*);
SXNET* d2i_SXNET(SXNET**, const unsigned char**, long);
X509_POLICY_LEVEL* X509_policy_tree_get0_level(const X509_POLICY_TREE*, int);
int X509_signature_dump(BIO*, const ASN1_STRING*, int);
char* SSL_get_srp_userinfo(SSL*);
int EC_KEY_print_fp(FILE*, const EC_KEY*, int);
int posix_memalign(void**, size_t, size_t);
int EVP_PKEY_set_type_str(EVP_PKEY*, const char*, int);
OTHERNAME* OTHERNAME_new();
int truncate(const char*, __off64_t);
char* strdup(const  char*);
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO*, int, int, void*);
ssize_t SSL_sendfile(SSL*, int, off_t, size_t, int);
int SSL_peek_ex(SSL*, void*, size_t, size_t*);
unsigned int ENGINE_get_table_flags();
ASN1_TYPE* ASN1_generate_v3(const char*, X509V3_CTX*);
int X509_NAME_print_ex(BIO*, const X509_NAME*, int, unsigned long);
const SSL_CIPHER* SSL_get_current_cipher(const SSL*);
int OSSL_HTTP_REQ_CTX_add1_header(OSSL_HTTP_REQ_CTX*, const char*, const char*);
int PEM_write_bio_ASN1_stream(BIO*, ASN1_VALUE*, BIO*, int, const char*, const ASN1_ITEM*);
int OPENSSL_strncasecmp(const char*, const char*, size_t);
long int __sysconf(int);
const stack_st_ASN1_STRING* PROFESSION_INFO_get0_professionItems(const PROFESSION_INFO*);
int DH_set0_key(DH*, BIGNUM*, BIGNUM*);
int i2d_PKCS8_bio(BIO*, const X509_SIG*);
int pcre16_utf16_to_host_byte_order(unsigned short*, const unsigned short*, int, int*, int);
void X509_CRL_set_default_method(const X509_CRL_METHOD*);
int pthread_attr_getdetachstate(const pthread_attr_t*, int*);
int i2d_ASN1_bio_stream(BIO*, ASN1_VALUE*, BIO*, int, const ASN1_ITEM*);
uint64_t BIO_number_written(BIO*);
void EVP_PKEY_meth_copy(EVP_PKEY_METHOD*, const EVP_PKEY_METHOD*);
int sched_get_priority_max(int);
X509_EXTENSIONS* d2i_X509_EXTENSIONS(X509_EXTENSIONS**, const unsigned char**, long);
int iruserok_af(const void*, int, const char*, const char*, sa_family_t);
void X509_REQ_INFO_free(X509_REQ_INFO*);
int OCSP_RESPID_set_by_key(OCSP_RESPID*, X509*);
int sem_unlink(const char*);
EVP_RAND_CTX* RAND_get0_private(OSSL_LIB_CTX*);
int OBJ_add_object(const ASN1_OBJECT*);
int BIO_write_ex(BIO*, const void*, size_t, size_t*);
int SSL_clear(SSL*);
int CRYPTO_memcmp(const void*, const void*, size_t);
int SSL_CTX_SRP_CTX_free(SSL_CTX*);
int SSL_get_rfd(const SSL*);
void BIO_ssl_shutdown(BIO*);
int SSL_add_dir_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
int (BIO*)* BIO_meth_get_destroy(const BIO_METHOD*);
long int syscall(long int);
int SSL_use_certificate_file(SSL*, const char*, int);
int OCSP_request_set1_name(OCSP_REQUEST*, const X509_NAME*);
void SSL_set_debug(SSL*, int);
void ASN1_PCTX_set_flags(ASN1_PCTX*, unsigned long);
int i2d_DSAPublicKey(const DSA*, unsigned char**);
int sched_get_priority_min(int);
SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX*);
int mkostemp( char*, int);
int X509_policy_level_node_count(X509_POLICY_LEVEL*);
const EVP_CIPHER* EVP_aes_128_cbc();
POLICYINFO* POLICYINFO_new();
CTLOG* CTLOG_new_ex(EVP_PKEY*, const char*, OSSL_LIB_CTX*, const char*);
const EC_METHOD* EC_GROUP_method_of(const EC_GROUP*);
RSA* d2i_RSA_PUBKEY(RSA**, const unsigned char**, long);
int ERR_load_BIO_strings();
int pthread_spin_destroy(pthread_spinlock_t*);
const EVP_CIPHER* EVP_rc2_40_cbc();
int SSL_CIPHER_get_auth_nid(const SSL_CIPHER*);
DH* DH_get_2048_224();
const ASN1_ITEM* OCSP_SIGNATURE_it();
OSSL_PARAM OSSL_PARAM_construct_time_t(const char*, time_t*);
const ASN1_ITEM* IPAddressChoice_it();
int ENGINE_register_pkey_meths(ENGINE*);
group* getgrgid(__gid_t);
int unsetenv(const char*);
void* CRYPTO_secure_malloc(size_t, const char*, int);
void SCT_free(SCT*);
int X509_check_email(X509*, const char*, size_t, unsigned int);
BIO* BIO_new_PKCS7(BIO*, PKCS7*);
void ASN1_UTF8STRING_free(ASN1_UTF8STRING*);
__off64_t lseek(int, __off64_t, int);
size_t wcstombs(restrict  char*, restrict const wchar_t*, size_t);
int EVP_PKEY_cmp_parameters(const EVP_PKEY*, const EVP_PKEY*);
int OPENSSL_gmtime_adj(tm*, int, long);
UI* UI_new();
int BIO_sock_non_fatal_error(int);
size_t mbstowcs(restrict wchar_t*, restrict const char*, size_t);
void srand(unsigned int);
const ASN1_ITEM* ASN1_ANY_it();
int X509_policy_check(X509_POLICY_TREE**, int*, stack_st_X509*, stack_st_ASN1_OBJECT*, unsigned int);
ASN1_OBJECT* OBJ_txt2obj(const char*, int);
BN_MONT_CTX* BN_MONT_CTX_copy(BN_MONT_CTX*, BN_MONT_CTX*);
size_t EC_KEY_priv2oct(const EC_KEY*, unsigned char*, size_t);
int SSL_get_key_update_type(const SSL*);
EVP_PKEY* SSL_CTX_get0_privatekey(const SSL_CTX*);
ASN1_OCTET_STRING* ASN1_OCTET_STRING_new();
int ASN1_item_sign(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, EVP_PKEY*, const EVP_MD*);
__sighandler_t ssignal(int, __sighandler_t);
size_t SSL_SESSION_get_master_key(const SSL_SESSION*, unsigned char*, size_t);
int fchownat(int, const char*, __uid_t, __gid_t, int);
uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER*);
PKCS7* PKCS7_sign_ex(X509*, EVP_PKEY*, stack_st_X509*, BIO*, int, OSSL_LIB_CTX*, const char*);
ADMISSION_SYNTAX* ADMISSION_SYNTAX_new();
ASIdentifierChoice* d2i_ASIdentifierChoice(ASIdentifierChoice**, const unsigned char**, long);
int OPENSSL_sk_push(OPENSSL_STACK*, const void*);
int getrusage(__rusage_who_t, rusage*);
int ASN1_TYPE_get(const ASN1_TYPE*);
int EVP_PKEY_CTX_get0_dh_kdf_ukm(EVP_PKEY_CTX*, unsigned char**);
int X509_PURPOSE_get_by_id(int);
int i2d_PKCS8PrivateKeyInfo_fp(FILE*, const EVP_PKEY*);
__pid_t getsid(__pid_t);
int SSL_is_dtls(const SSL*);
int BN_GF2m_mod_solve_quad_arr(BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
BIGNUM* BN_lebin2bn(const unsigned char*, int, BIGNUM*);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_pub_enc(const RSA_METHOD*);
int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX*, int, const char*);
int i2d_EDIPARTYNAME(const EDIPARTYNAME*, unsigned char**);
void X509_STORE_CTX_set_verify(X509_STORE_CTX*, X509_STORE_CTX_verify_fn);
int malloc_info(int, FILE*);
int OSSL_HTTP_REQ_CTX_set1_req(OSSL_HTTP_REQ_CTX*, const char*, const ASN1_ITEM*, const ASN1_VALUE*);
int ENGINE_remove(ENGINE*);
X509_REQ* PEM_read_bio_X509_REQ(BIO*, X509_REQ**, pem_password_cb*, void*);
int putenv( char*);
const OSSL_PROVIDER* EVP_PKEY_CTX_get0_provider(const EVP_PKEY_CTX*);
EVP_PKEY* d2i_KeyParams(int, EVP_PKEY**, const unsigned char**, long);
X509_ATTRIBUTE* X509at_delete_attr(stack_st_X509_ATTRIBUTE*, int);
int (DH*)* DH_meth_get_generate_key(const DH_METHOD*);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE*);
NETSCAPE_CERT_SEQUENCE* NETSCAPE_CERT_SEQUENCE_new();
int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER*, int (EVP_CIPHER_CTX*, int, int, void*)*);
void BIO_set_flags(BIO*, int);
ASN1_TIME* X509_CRL_get_lastUpdate(X509_CRL*);
void OSSL_HTTP_REQ_CTX_set_max_response_length(OSSL_HTTP_REQ_CTX*, unsigned long);
int PEM_write_bio_Parameters(BIO*, const EVP_PKEY*);
int X509_chain_check_suiteb(int*, X509*, stack_st_X509*, unsigned long);
const OSSL_PARAM* EVP_MD_settable_ctx_params(const EVP_MD*);
int PEM_write_bio_X509(BIO*, const X509*);
const char* X509_verify_cert_error_string(long);
int EVP_PKEY_CTX_get_rsa_pss_saltlen(EVP_PKEY_CTX*, int*);
void ENGINE_unregister_DH(ENGINE*);
lldiv_t lldiv(long long int, long long int);
const BIO_METHOD* BIO_s_core();
EVP_RAND_CTX* RAND_get0_primary(OSSL_LIB_CTX*);
const EVP_CIPHER* EVP_aes_256_gcm();
const SSL_METHOD* TLS_client_method();
stack_st_SSL_COMP* SSL_COMP_get_compression_methods();
const ASN1_ITEM* PROFESSION_INFO_it();
int X509_sign_ctx(X509*, EVP_MD_CTX*);
int EVP_CIPHER_get_params(EVP_CIPHER*, OSSL_PARAM[]);
unsigned long int strspn(const  char*, const  char*);
EC_KEY* PEM_read_ECPrivateKey(FILE*, EC_KEY**, pem_password_cb*, void*);
ASN1_STRING* ASN1_STRING_new();
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY**, const ASN1_OBJECT*, int, const unsigned char*, int);
const EVP_MD* EVP_md_null();
int EC_KEY_oct2key(EC_KEY*, const unsigned char*, size_t, BN_CTX*);
X509_PUBKEY* X509_PUBKEY_new_ex(OSSL_LIB_CTX*, const char*);
int ERR_load_X509V3_strings();
int setpgrp();
int DH_check_params(const DH*, int*);
int i2d_OCSP_CERTID(const OCSP_CERTID*, unsigned char**);
long SSL_CTX_get_timeout(const SSL_CTX*);
unsigned int inet_nsap_addr(const char*, unsigned char*, int);
const EVP_CIPHER* EVP_aes_256_wrap_pad();
int RSA_set_method(RSA*, const RSA_METHOD*);
SXNETID* SXNETID_new();
int BIO_indent(BIO*, int, int);
void setbuffer(restrict FILE*, restrict  char*, size_t);
int pthread_mutexattr_setpshared(pthread_mutexattr_t*, int);
const OSSL_PARAM* EVP_MD_CTX_gettable_params(EVP_MD_CTX*);
int getgrouplist(const char*, __gid_t, __gid_t*, int*);
int OSSL_PARAM_set_long(OSSL_PARAM*, long int);
int __tolower_l(int, locale_t);
uint64_t SSL_get_options(const SSL*);
char* strchrnul(const char*, int);
X509_ALGOR* d2i_X509_ALGOR(X509_ALGOR**, const unsigned char**, long);
int PEM_write_bio_X509_REQ(BIO*, const X509_REQ*);
int SXNET_add_id_INTEGER(SXNET**, ASN1_INTEGER*, const char*, int);
SSL_verify_cb SSL_get_verify_callback(const SSL*);
char* i2s_ASN1_IA5STRING(X509V3_EXT_METHOD*, ASN1_IA5STRING*);
int X509_EXTENSION_set_data(X509_EXTENSION*, ASN1_OCTET_STRING*);
int BN_kronecker(const BIGNUM*, const BIGNUM*, BN_CTX*);
int sscanf(restrict const  char*, restrict const  char*);
int mkstemps64( char*, int);
long X509_CRL_get_version(const X509_CRL*);
int EC_POINT_is_on_curve(const EC_GROUP*, const EC_POINT*, BN_CTX*);
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY*);
ASN1_GENERALIZEDTIME* d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME**, const unsigned char**, long);
int OSSL_PARAM_set_size_t(OSSL_PARAM*, size_t);
void endservent();
int pthread_key_delete(pthread_key_t);
void EC_GROUP_free(EC_GROUP*);
int SSL_CTX_set_num_tickets(SSL_CTX*, size_t);
int EVP_PKEY_encrypt_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int X509v3_addr_add_range(IPAddrBlocks*, const unsigned, const unsigned*, unsigned char*, unsigned char*);
const char* gzerror(gzFile, int*);
int RSA_verify_PKCS1_PSS_mgf1(RSA*, const unsigned char*, const EVP_MD*, const EVP_MD*, const unsigned char*, int);
int X509_CRL_print_ex(BIO*, X509_CRL*, unsigned long);
int EVP_PKEY_fromdata(EVP_PKEY_CTX*, EVP_PKEY**, int, OSSL_PARAM[]);
int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID, CRYPTO_THREAD_ID);
void EC_KEY_METHOD_set_sign(EC_KEY_METHOD*, int (int, const unsigned char*, int, unsigned char*, unsigned int*, const BIGNUM*, const BIGNUM*, EC_KEY*)*, int (EC_KEY*, BN_CTX*, BIGNUM**, BIGNUM**)*, ECDSA_SIG* (const unsigned char*, int, const BIGNUM*, const BIGNUM*, EC_KEY*)*);
ASN1_GENERALSTRING* ASN1_GENERALSTRING_new();
void ECDSA_SIG_get0(const ECDSA_SIG*, const BIGNUM**, const BIGNUM**);
EC_KEY* d2i_ECParameters(EC_KEY**, const unsigned char**, long);
int rand();
OSSL_PARAM OSSL_PARAM_construct_uint(const char*, unsigned int*);
void EVP_PBE_cleanup();
X509_PUBKEY* X509_PUBKEY_dup(const X509_PUBKEY*);
const ASN1_ITEM* GENERAL_SUBTREE_it();
int pcre_jit_exec(const pcre*, const pcre_extra*, const char*, int, int, int, int*, int, pcre_jit_stack*);
void ASN1_INTEGER_free(ASN1_INTEGER*);
void (UI*, void*)* UI_method_get_data_destructor(const UI_METHOD*);
int pthread_cancel(pthread_t);
const GENERAL_NAME* ADMISSIONS_get0_admissionAuthority(const ADMISSIONS*);
int EVP_PKEY_CTX_get1_id_len(EVP_PKEY_CTX*, size_t*);
void* SSL_CTX_get_record_padding_callback_arg(const SSL_CTX*);
int X509_policy_tree_level_count(const X509_POLICY_TREE*);
int DSA_set0_key(DSA*, BIGNUM*, BIGNUM*);
int X509_STORE_CTX_get_error_depth(const X509_STORE_CTX*);
int EVP_PKEY_get_default_digest_nid(EVP_PKEY*, int*);
int i2d_ASN1_TYPE(const ASN1_TYPE*, unsigned char**);
int DSA_meth_set_sign(DSA_METHOD*, DSA_SIG* (const unsigned char*, int, DSA*)*);
int EVP_PKEY_CTX_set_dh_paramgen_generator(EVP_PKEY_CTX*, int);
DSA* DSA_new_method(ENGINE*);
ASN1_PRINTABLESTRING* d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING**, const unsigned char**, long);
int EVP_PBE_find_ex(int, int, int*, int*, EVP_PBE_KEYGEN**, EVP_PBE_KEYGEN_EX**);
void SSL_CTX_set_keylog_callback(SSL_CTX*, SSL_CTX_keylog_cb_func);
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX*, EVP_PKEY_gen_cb*);
X509_ALGOR* PKCS5_pbe_set(int, int, const unsigned char*, int);
OSSL_PARAM OSSL_PARAM_construct_long(const char*, long int*);
int dup(int);
void BN_CTX_start(BN_CTX*);
ASN1_T61STRING* ASN1_T61STRING_new();
int (BIO*,  char*, size_t, size_t*)* BIO_meth_get_read_ex(const BIO_METHOD*);
int isfdtype(int, int);
const ASN1_ITEM* ASN1_SCTX_get_item(ASN1_SCTX*);
int RSA_meth_set_pub_dec(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
passwd* getpwent();
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT*);
int X509_CRL_print(BIO*, X509_CRL*);
PKCS8_PRIV_KEY_INFO* PEM_read_PKCS8_PRIV_KEY_INFO(FILE*, PKCS8_PRIV_KEY_INFO**, pem_password_cb*, void*);
int a2i_ASN1_STRING(BIO*, ASN1_STRING*,  char*, int);
int BIO_new_bio_pair(BIO**, size_t, BIO**, size_t);
EVP_RAND* EVP_RAND_CTX_get0_rand(EVP_RAND_CTX*);
ADMISSION_SYNTAX* d2i_ADMISSION_SYNTAX(ADMISSION_SYNTAX**, const unsigned char**, long);
int BIO_write(BIO*, const void*, int);
void SXNET_free(SXNET*);
int BN_GF2m_poly2arr(const BIGNUM*, int[], int);
int pcre_exec(const pcre*, const pcre_extra*, const char*, int, int, int, int*, int);
FILE* fmemopen(void*, size_t, const char*);
int RSA_meth_set0_app_data(RSA_METHOD*, void*);
void pcre32_jit_free_unused_memory();
X509_VERIFY_PARAM* SSL_CTX_get0_param(SSL_CTX*);
void SSL_set_verify_depth(SSL*, int);
const EVP_CIPHER* EVP_aes_192_ecb();
int SSL_use_RSAPrivateKey_file(SSL*, const char*, int);
void BN_with_flags(BIGNUM*, const BIGNUM*, int);
ASN1_STRING* X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY*);
void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX*, CTLOG_STORE*);
int UI_get_result_string_length(UI_STRING*);
SCRYPT_PARAMS* d2i_SCRYPT_PARAMS(SCRYPT_PARAMS**, const unsigned char**, long);
int CONF_set_default_method(CONF_METHOD*);
const char* EVP_KEYEXCH_get0_description(const EVP_KEYEXCH*);
int X509_verify_cert(X509_STORE_CTX*);
__gid_t getgid();
int pthread_spin_unlock(pthread_spinlock_t*);
void X509_REVOKED_free(X509_REVOKED*);
int i2d_PROXY_POLICY(const PROXY_POLICY*, unsigned char**);
int getdate_r(restrict const char*, restrict tm*);
EVP_PKEY* d2i_PUBKEY_ex(EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
int sigemptyset(sigset_t*);
FILE* fopen64(restrict const char*, restrict const char*);
X509_EXTENSION* X509_EXTENSION_create_by_OBJ(X509_EXTENSION**, const ASN1_OBJECT*, int, ASN1_OCTET_STRING*);
int SSL_CTX_set_cipher_list(SSL_CTX*, const char*);
int EVP_PKEY_CTX_set_dh_nid(EVP_PKEY_CTX*, int);
int SSL_CTX_set_async_callback(SSL_CTX*, SSL_async_callback_fn);
void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM*, int);
DIR* opendir(const char*);
ssize_t readlink(restrict const char*, restrict  char*, size_t);
int sched_getparam(__pid_t, sched_param*);
int sigreturn(sigcontext*);
int __libc_current_sigrtmax();
int isprint_l(int, locale_t);
__pid_t getpgrp();
int X509v3_asid_canonize(ASIdentifiers*);
int SSL_accept(SSL*);
EVP_PKEY* d2i_PrivateKey_ex_fp(FILE*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
OSSL_PARAM OSSL_PARAM_construct_uint64(const char*, uint64_t*);
int i2d_OCSP_RESPDATA(const OCSP_RESPDATA*, unsigned char**);
X509_REVOKED* X509_REVOKED_new();
int BIO_nwrite0(BIO*,  char**);
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX*, void*);
ASN1_BIT_STRING* X509_get0_pubkey_bitstr(const X509*);
const ASN1_ITEM* OCSP_BASICRESP_it();
stack_st_X509* X509_STORE_CTX_get1_chain(const X509_STORE_CTX*);
int SSL_CTX_set_srp_cb_arg(SSL_CTX*, void*);
void* pvalloc(size_t);
char* i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD*, const ASN1_ENUMERATED*);
int rcmd_af(restrict  char**, unsigned short int, restrict const char*, restrict const char*, restrict const char*, restrict int*, sa_family_t);
SSL_CTX* SSL_set_SSL_CTX(SSL*, SSL_CTX*);
ASN1_OCTET_STRING* PKCS7_get_octet_string(PKCS7*);
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX*, ASN1_TYPE*);
int tcsetpgrp(int, __pid_t);
ec_key_st* EVP_PKEY_get1_EC_KEY(EVP_PKEY*);
in_addr_t inet_netof(in_addr);
CONF_MODULE* CONF_imodule_get_module(const CONF_IMODULE*);
void ISSUING_DIST_POINT_free(ISSUING_DIST_POINT*);
int EVP_CipherInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int);
X509_REQ* X509_to_X509_REQ(X509*, EVP_PKEY*, const EVP_MD*);
void ASN1_STRING_set0(ASN1_STRING*, void*, int);
const SSL_METHOD* TLS_server_method();
uLong compressBound(uLong);
int vfprintf(FILE*, const  char*, __va_list_tag*);
X509_EXTENSION* OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP*, int);
void setservent(int);
X509_REQ_INFO* X509_REQ_INFO_new();
void* X509_STORE_CTX_get_ex_data(const X509_STORE_CTX*, int);
__ssize_t tee(int, int, size_t, unsigned int);
const char* X509_get_default_cert_file_env();
X509_NAME* X509_get_subject_name(const X509*);
int BIO_socket_ioctl(int, long, void*);
void CONF_imodule_set_usr_data(CONF_IMODULE*, void*);
int pcre_get_named_substring(const pcre*, const char*, int*, int, const char*, const char**);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME*, time_t);
int EC_POINT_mul(const EC_GROUP*, EC_POINT*, const BIGNUM*, const EC_POINT*, const BIGNUM*, BN_CTX*);
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM*, stack_st_ASN1_OBJECT*);
unsigned int OPENSSL_version_major();
int mkstemp( char*);
unsigned char* SHA256(const unsigned char*, size_t, unsigned char*);
int ASN1_i2d_fp(i2d_of_void*, FILE*, const void*);
char* initstate(unsigned int,  char*, size_t);
int EVP_DigestSign(EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
const EVP_CIPHER* EVP_aes_128_ctr();
int RAND_set_seed_source_type(OSSL_LIB_CTX*, const char*, const char*);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_priv_dec(const RSA_METHOD*);
int OCSP_check_validity(ASN1_GENERALIZEDTIME*, ASN1_GENERALIZEDTIME*, long, long);
char* gcvt(double, int,  char*);
int pthread_getcpuclockid(pthread_t, __clockid_t*);
void EVP_PKEY_meth_free(EVP_PKEY_METHOD*);
int EVP_PKEY_CTX_get_rsa_mgf1_md_name(EVP_PKEY_CTX*,  char*, size_t);
int BN_is_negative(const BIGNUM*);
void herror(const char*);
int pcre32_fullinfo(const pcre32*, const pcre32_extra*, int, void*);
int X509_check_purpose(X509*, int, int);
void* OPENSSL_sk_delete(OPENSSL_STACK*, int);
void* sbrk(intptr_t);
BIO* BIO_new_connect(const char*);
int OSSL_PARAM_get_int64(const OSSL_PARAM*, int64_t*);
int DSA_meth_set_verify(DSA_METHOD*, int (const unsigned char*, int, DSA_SIG*, DSA*)*);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER*);
int X509_set_issuer_name(X509*, const X509_NAME*);
int X509_cmp(const X509*, const X509*);
int X509_sign(X509*, EVP_PKEY*, const EVP_MD*);
int pthread_once(pthread_once_t*, void ()*);
int qfcvt_r(long double, int, restrict int*, restrict int*, restrict  char*, size_t);
int BIO_meth_set_puts(BIO_METHOD*, int (BIO*, const char*)*);
X509_EXTENSION* X509_CRL_delete_ext(X509_CRL*, int);
const EVP_CIPHER* EVP_aes_192_cfb1();
OCSP_REQINFO* OCSP_REQINFO_new();
const SSL_METHOD* TLSv1_method();
int EC_GROUP_get_curve(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
int X509_certificate_type(const X509*, const EVP_PKEY*);
int BN_is_bit_set(const BIGNUM*, int);
int getpwuid_r(__uid_t, restrict passwd*, restrict  char*, size_t, restrict passwd**);
stack_st_X509_OBJECT* X509_STORE_get0_objects(const X509_STORE*);
int ENGINE_set_default_pkey_meths(ENGINE*);
void endprotoent();
void SSL_set_quiet_shutdown(SSL*, int);
int HMAC_CTX_copy(HMAC_CTX*, HMAC_CTX*);
int HMAC_Update(HMAC_CTX*, const unsigned char*, size_t);
int symlink(const char*, const char*);
int X509_NAME_get0_der(const X509_NAME*, const unsigned char**, size_t*);
int PEM_write_bio_X509_REQ_NEW(BIO*, const X509_REQ*);
int CRYPTO_secure_malloc_init(size_t, size_t);
void ENGINE_register_all_DH();
int SHA1_Final(unsigned char*, SHA_CTX*);
int fallocate64(int, int, __off64_t, __off64_t);
char* cuserid( char*);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING*, int, int);
stack_st_CONF_VALUE* i2v_GENERAL_NAMES(X509V3_EXT_METHOD*, GENERAL_NAMES*, stack_st_CONF_VALUE*);
int OSSL_HTTP_parse_url(const char*, int*,  char**,  char**,  char**, int*,  char**,  char**,  char**);
uint64_t SSL_CTX_clear_options(SSL_CTX*, uint64_t);
unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION*);
int i2d_POLICYINFO(const POLICYINFO*, unsigned char**);
const char* UI_get0_test_string(UI_STRING*);
int RSA_meth_set_finish(RSA_METHOD*, int (RSA*)*);
const ASN1_ITEM* ASN1_VISIBLESTRING_it();
int ASN1_STRING_print_ex_fp(FILE*, const ASN1_STRING*, unsigned long);
int EVP_PKEY_get_int_param(const EVP_PKEY*, const char*, int*);
int RSA_up_ref(RSA*);
void setusershell();
int pthread_mutexattr_getrobust(const pthread_mutexattr_t*, int*);
int ttyslot();
int pthread_barrier_destroy(pthread_barrier_t*);
void SSL_CTX_set_client_hello_cb(SSL_CTX*, SSL_client_hello_cb_fn, void*);
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO*);
void* X509_CRL_get_meth_data(X509_CRL*);
int pcre32_copy_named_substring(const pcre32*, const unsigned int*, int*, int, const unsigned int*, unsigned int*, int);
int X509at_get_attr_count(const stack_st_X509_ATTRIBUTE*);
int BN_mod_lshift_quick(BIGNUM*, const BIGNUM*, int, const BIGNUM*);
int X509_REVOKED_get_ext_by_NID(const X509_REVOKED*, int, int);
int SSL_CTX_use_RSAPrivateKey(SSL_CTX*, RSA*);
X509* X509_STORE_CTX_get0_current_issuer(const X509_STORE_CTX*);
int DH_set0_pqg(DH*, BIGNUM*, BIGNUM*, BIGNUM*);
const OSSL_PARAM* EVP_CIPHER_gettable_ctx_params(const EVP_CIPHER*);
const char* SSL_alert_type_string_long(int);
void ASN1_PCTX_set_cert_flags(ASN1_PCTX*, unsigned long);
void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*)**);
ssize_t pwrite64(int, const void*, size_t, __off64_t);
int EVP_MD_meth_set_update(EVP_MD*, int (EVP_MD_CTX*, const void*, size_t)*);
int ECDSA_sign(int, const unsigned char*, int, unsigned char*, unsigned int*, EC_KEY*);
__pid_t wait(int*);
int pthread_rwlock_clockwrlock(restrict pthread_rwlock_t*, clockid_t, restrict const timespec*);
long SSL_SESSION_set_timeout(SSL_SESSION*, long);
void BIO_set_init(BIO*, int);
void BIO_set_retry_reason(BIO*, int);
int X509_NAME_print(BIO*, const X509_NAME*, int);
int ffs(int);
int pthread_create(restrict pthread_t*, restrict const pthread_attr_t*, void* (void*)*, restrict void*);
EVP_PKEY* d2i_PKCS8PrivateKey_bio(BIO*, EVP_PKEY**, pem_password_cb*, void*);
int X509_STORE_unlock(X509_STORE*);
int pcre16_jit_exec(const pcre16*, const pcre16_extra*, const unsigned short*, int, int, int, int*, int, pcre16_jit_stack*);
const EVP_CIPHER* EVP_aria_192_ofb();
int abs(int);
ASN1_STRING* d2i_ASN1_PRINTABLE(ASN1_STRING**, const unsigned char**, long);
void EVP_CIPHER_free(EVP_CIPHER*);
const EVP_CIPHER* EVP_des_cfb8();
X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX*);
FILE* fdopen(int, const char*);
int pthread_rwlock_destroy(pthread_rwlock_t*);
int jrand48_r(unsigned short int[3], restrict drand48_data*, restrict long int*);
int mkfifo(const char*, __mode_t);
EVP_PKEY* X509_get0_pubkey(const X509*);
int BN_uadd(BIGNUM*, const BIGNUM*, const BIGNUM*);
int BN_GF2m_mod_sqr(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int BIO_meth_set_callback_ctrl(BIO_METHOD*, long (BIO*, int, BIO_info_cb*)*);
int pthread_mutexattr_setrobust_np(pthread_mutexattr_t*, int);
int DSAparams_print(BIO*, const DSA*);
void ASN1_NULL_free(ASN1_NULL*);
void DH_set_default_method(const DH_METHOD*);
passwd* getpwuid(__uid_t);
int ASN1_item_ndef_i2d(const ASN1_VALUE*, unsigned char**, const ASN1_ITEM*);
int X509_add1_ext_i2d(X509*, int, void*, int, unsigned long);
void* X509at_get0_data_by_OBJ(const stack_st_X509_ATTRIBUTE*, const ASN1_OBJECT*, int, int);
int ENGINE_set_ex_data(ENGINE*, int, void*);
ASN1_UNIVERSALSTRING* d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING**, const unsigned char**, long);
char* strptime_l(restrict const char*, restrict const char*, tm*, locale_t);
int EVP_PKEY_add1_attr(EVP_PKEY*, X509_ATTRIBUTE*);
void EC_KEY_set_asn1_flag(EC_KEY*, int);
X509_LOOKUP* X509_LOOKUP_new(X509_LOOKUP_METHOD*);
int setlogin(const char*);
void X509_ALGOR_free(X509_ALGOR*);
int ftruncate(int, __off64_t);
int UI_dup_verify_string(UI*, const char*, int,  char*, int, int, const char*);
void (ssl_ctx_st*, SSL_SESSION*)* SSL_CTX_sess_get_remove_cb(SSL_CTX*);
void _exit(int);
int X509_STORE_set_trust(X509_STORE*, int);
int BN_exp(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int ASN1_STRING_print_ex(BIO*, const ASN1_STRING*, unsigned long);
int ASN1_INTEGER_set(ASN1_INTEGER*, long);
int OCSP_resp_count(OCSP_BASICRESP*);
int BIO_printf(BIO*, const char*);
void* CRYPTO_memdup(const void*, size_t, const char*, int);
void ISSUER_SIGN_TOOL_free(ISSUER_SIGN_TOOL*);
int SSL_use_PrivateKey_ASN1(int, SSL*, const unsigned char*, long);
const char* EVP_RAND_get0_description(const EVP_RAND*);
unsigned long ERR_get_error();
int ERR_load_CMS_strings();
const ASN1_ITEM* X509_ALGOR_it();
void SSL_set_tmp_dh_callback(SSL*, DH* (SSL*, int, int)*);
int UI_method_set_closer(UI_METHOD*, int (UI*)*);
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM*, const X509_VERIFY_PARAM*);
int EC_GROUP_get_asn1_flag(const EC_GROUP*);
int OCSP_check_nonce(OCSP_REQUEST*, OCSP_BASICRESP*);
const ASN1_ITEM* ASN1_INTEGER_it();
void EVP_PKEY_CTX_free(EVP_PKEY_CTX*);
ASIdentifiers* ASIdentifiers_new();
SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX*);
double erand48(unsigned short int[3]);
char* strcpy( char*, const  char*);
X509_NAME* X509_NAME_new();
int pthread_join(pthread_t, void**);
int (RSA*, int, BIGNUM*, BN_GENCB*)* RSA_meth_get_keygen(const RSA_METHOD*);
int gzgetc(gzFile);
int EVP_EncodeUpdate(EVP_ENCODE_CTX*, unsigned char*, int*, const unsigned char*, int);
const EVP_CIPHER* EVP_camellia_128_ctr();
EVP_PKEY* ENGINE_load_private_key(ENGINE*, const char*, UI_METHOD*, void*);
void EVP_set_pw_prompt(const char*);
char* BIO_ADDR_hostname_string(const BIO_ADDR*, int);
int EVP_CIPHER_names_do_all(const EVP_CIPHER*, void (const char*, void*)*, void*);
X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX*);
int X509V3_EXT_CRL_add_nconf(CONF*, X509V3_CTX*, const char*, X509_CRL*);
unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM*);
int SHA384_Final(unsigned char*, SHA512_CTX*);
int EVP_PKEY_CTX_get_ecdh_kdf_md(EVP_PKEY_CTX*, const EVP_MD**);
const char* UI_get0_result_string(UI_STRING*);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE*);
void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, EVP_PKEY*)*);
int ENGINE_register_RSA(ENGINE*);
PKCS7_RECIP_INFO* d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO**, const unsigned char**, long);
FILE* tmpfile64();
int EVP_PKEY_get_base_id(const EVP_PKEY*);
void EC_KEY_set_conv_form(EC_KEY*, point_conversion_form_t);
void EC_GROUP_clear_free(EC_GROUP*);
void ASIdentifierChoice_free(ASIdentifierChoice*);
int SSL_CTX_set_ct_validation_callback(SSL_CTX*, ssl_ct_validation_cb, void*);
int i2d_IPAddressOrRange(const IPAddressOrRange*, unsigned char**);
const ASN1_ITEM* ASIdentifiers_it();
X509* X509_new();
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int i2d_RSAPrivateKey_bio(BIO*, const RSA*);
int RSA_bits(const RSA*);
int link(const char*, const char*);
int X509_VERIFY_PARAM_get_count();
int EVP_PKEY_CTX_set_rsa_pss_keygen_md(EVP_PKEY_CTX*, const EVP_MD*);
char* gzgets(gzFile,  char*, int);
X509_EXTENSION* OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP*, int);
int EVP_CIPHER_impl_ctx_size(const EVP_CIPHER*);
int X509_REQ_set_version(X509_REQ*, long);
BIGNUM* SSL_get_srp_g(SSL*);
const OSSL_PARAM* EVP_PKEY_gettable_params(const EVP_PKEY*);
DSA* PEM_read_DSAparams(FILE*, DSA**, pem_password_cb*, void*);
void* reallocarray(void*, size_t, size_t);
X509_REQ* d2i_X509_REQ(X509_REQ**, const unsigned char**, long);
void pcre32_free_substring_list(const unsigned int**);
const OSSL_PARAM* EVP_ASYM_CIPHER_settable_ctx_params(const EVP_ASYM_CIPHER*);
const char* X509_get_default_cert_dir();
X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(const X509_STORE*);
const EC_GROUP* EC_KEY_get0_group(const EC_KEY*);
char* strcat( char*, const  char*);
int inet_pton(int, restrict const char*, restrict void*);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX*, int);
const ASN1_OCTET_STRING* X509_get0_subject_key_id(X509*);
int i2d_X509_CRL_INFO(const X509_CRL_INFO*, unsigned char**);
EVP_PKEY* d2i_PUBKEY_bio(BIO*, EVP_PKEY**);
int isupper_l(int, locale_t);
int pcre_config(int, void*);
X509_ALGORS* d2i_X509_ALGORS(X509_ALGORS**, const unsigned char**, long);
ASN1_UTCTIME* ASN1_UTCTIME_dup(const ASN1_UTCTIME*);
void pcre_jit_stack_free(pcre_jit_stack*);
const ASN1_ITEM* OCSP_RESPBYTES_it();
X509_NAME_ENTRY* X509_NAME_ENTRY_dup(const X509_NAME_ENTRY*);
int BN_BLINDING_convert(BIGNUM*, BN_BLINDING*, BN_CTX*);
int sem_wait(sem_t*);
void* ASN1_item_d2i_bio(const ASN1_ITEM*, BIO*, void*);
PKCS7_SIGNER_INFO* PKCS7_sign_add_signer(PKCS7*, X509*, EVP_PKEY*, const EVP_MD*, int);
void X509_STORE_CTX_set_flags(X509_STORE_CTX*, unsigned long);
ssize_t copy_file_range(int, __off64_t*, int, __off64_t*, size_t, unsigned int);
int SSL_use_cert_and_key(SSL*, X509*, EVP_PKEY*, stack_st_X509*, int);
int pthread_attr_setdetachstate(pthread_attr_t*, int);
uint32_t X509_get_extended_key_usage(X509*);
int islower_l(int, locale_t);
PROFESSION_INFO* d2i_PROFESSION_INFO(PROFESSION_INFO**, const unsigned char**, long);
int SSL_connect(SSL*);
int getentropy(void*, size_t);
OCSP_RESPBYTES* OCSP_RESPBYTES_new();
lhash_st_CONF_VALUE* CONF_load(lhash_st_CONF_VALUE*, const char*, long*);
int sem_trywait(sem_t*);
int OSSL_PARAM_get_utf8_ptr(const OSSL_PARAM*, const char**);
int DSA_up_ref(DSA*);
int brk(void*);
char* ptsname(int);
X509* d2i_X509(X509**, const unsigned char**, long);
DSA* PEM_read_bio_DSA_PUBKEY(BIO*, DSA**, pem_password_cb*, void*);
RSA* PEM_read_RSAPrivateKey(FILE*, RSA**, pem_password_cb*, void*);
int UI_UTIL_read_pw( char*,  char*, int, const char*, int);
int ASN1_verify(i2d_of_void*, X509_ALGOR*, ASN1_BIT_STRING*,  char*, EVP_PKEY*);
int BN_rand_ex(BIGNUM*, int, int, int, unsigned int, BN_CTX*);
const COMP_METHOD* SSL_get_current_expansion(const SSL*);
int BIO_ctrl_reset_read_request(BIO*);
EVP_PKEY_gen_cb* EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX*);
int SSL_CTX_set_generate_session_id(SSL_CTX*, GEN_SESSION_CB);
int pthread_attr_setaffinity_np(pthread_attr_t*, size_t, const cpu_set_t*);
int (DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*)* DSA_meth_get_paramgen(const DSA_METHOD*);
int EVP_MAC_CTX_get_params(EVP_MAC_CTX*, OSSL_PARAM[]);
PKCS7* PEM_read_PKCS7(FILE*, PKCS7**, pem_password_cb*, void*);
int OPENSSL_sk_reserve(OPENSSL_STACK*, int);
void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX*, EVP_PKEY_CTX*);
int X509V3_EXT_add_alias(int, int);
int SSL_key_update(SSL*, int);
__sighandler_t signal(int, __sighandler_t);
int EVP_PKEY_get_size_t_param(const EVP_PKEY*, const char*, size_t*);
int BIO_get_retry_reason(BIO*);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO*, X509*);
char* CRYPTO_strndup(const char*, size_t, const char*, int);
const ASN1_ITEM* NETSCAPE_SPKAC_it();
char* mkdtemp( char*);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP*);
int i2d_SXNETID(const SXNETID*, unsigned char**);
char* ttyname(int);
const char* ENGINE_get_name(const ENGINE*);
const EVP_CIPHER* EVP_aes_256_cbc_hmac_sha1();
int BIO_read_ex(BIO*, void*, size_t, size_t*);
const OSSL_PARAM* EVP_MAC_gettable_params(const EVP_MAC*);
int i2d_PrivateKey(const EVP_PKEY*, unsigned char**);
void rewinddir(DIR*);
void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME*);
int i2d_OCSP_SERVICELOC(const OCSP_SERVICELOC*, unsigned char**);
const EVP_CIPHER* EVP_aes_256_xts();
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t*, int);
void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX*, int*, int);
RSA_PSS_PARAMS* RSA_PSS_PARAMS_dup(const RSA_PSS_PARAMS*);
int NAME_CONSTRAINTS_check(X509*, NAME_CONSTRAINTS*);
int ASN1_TIME_set_string_X509(ASN1_TIME*, const char*);
int socket(int, int, int);
int PKCS7_add_certificate(PKCS7*, X509*);
int gai_suspend(const const gaicb*[], int, const timespec*);
const EVP_CIPHER* EVP_aria_128_ccm();
int SSL_SESSION_set1_ticket_appdata(SSL_SESSION*, const void*, size_t);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_get0(int);
void BIO_ADDRINFO_free(BIO_ADDRINFO*);
ISSUER_SIGN_TOOL* ISSUER_SIGN_TOOL_new();
int BIO_up_ref(BIO*);
int compress2(Bytef*, uLongf*, const Bytef*, uLong, int);
const UI_METHOD* UI_get_method(UI*);
int X509_CRL_set1_lastUpdate(X509_CRL*, const ASN1_TIME*);
void (const SSL*, int, int)* SSL_CTX_get_info_callback(SSL_CTX*);
int fileno(FILE*);
int getpw(__uid_t,  char*);
uint32_t X509_get_extension_flags(X509*);
int SCT_get_signature_nid(const SCT*);
int EC_KEY_set_public_key_affine_coordinates(EC_KEY*, BIGNUM*, BIGNUM*);
const EVP_CIPHER* EVP_aria_192_cfb128();
BIGNUM* BN_native2bn(const unsigned char*, int, BIGNUM*);
int EVP_RAND_reseed(EVP_RAND_CTX*, int, const unsigned char*, size_t, const unsigned char*, size_t);
int EVP_PKEY_get_utf8_string_param(const EVP_PKEY*, const char*,  char*, size_t, size_t*);
void SSL_CTX_sess_set_new_cb(SSL_CTX*, int (ssl_st*, SSL_SESSION*)*);
const char* OBJ_nid2sn(int);
int unlockpt(int);
int deflateEnd(z_streamp);
void _dl_mcount_wrapper_check(void*);
int i2d_USERNOTICE(const USERNOTICE*, unsigned char**);
const EVP_CIPHER* EVP_aria_192_cbc();
const EVP_MD* EVP_md5();
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED*, int64_t);
int OSSL_PARAM_get_uint(const OSSL_PARAM*, unsigned int*);
int EC_GROUP_get_curve_GF2m(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
UI_METHOD* UI_create_method(const char*);
int EVP_PKEY_CTX_set_dsa_paramgen_md(EVP_PKEY_CTX*, const EVP_MD*);
size_t SSL_CTX_get_num_tickets(const SSL_CTX*);
void* OPENSSL_sk_value(const OPENSSL_STACK*, int);
BIO* BIO_push(BIO*, BIO*);
int BIO_ADDRINFO_family(const BIO_ADDRINFO*);
const BIO_METHOD* BIO_s_null();
int RSA_verify(int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, RSA*);
int pcre16_get_stringnumber(const pcre16*, const unsigned short*);
int getaddrinfo_a(int, gaicb*[], int, restrict sigevent*);
POLICY_CONSTRAINTS* POLICY_CONSTRAINTS_new();
int PEM_write_bio_PrivateKey(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int BN_mod_exp2_mont(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
int i2d_DSA_PUBKEY(const DSA*, unsigned char**);
int BN_mask_bits(BIGNUM*, int);
void* PEM_ASN1_read(d2i_of_void*, const char*, FILE*, void**, pem_password_cb*, void*);
long int ftell(FILE*);
size_t CRYPTO_secure_used();
const char* RSA_meth_get0_name(const RSA_METHOD*);
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX*, ASN1_TYPE*);
int isxdigit_l(int, locale_t);
int SMIME_write_PKCS7(BIO*, PKCS7*, BIO*, int);
int munlockall();
int i2d_PROFESSION_INFO(const PROFESSION_INFO*, unsigned char**);
CRL_DIST_POINTS* d2i_CRL_DIST_POINTS(CRL_DIST_POINTS**, const unsigned char**, long);
int PEM_SignFinal(EVP_MD_CTX*, unsigned char*, unsigned int*, EVP_PKEY*);
int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS*, const char*);
int BIO_sock_should_retry(int);
int (EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, size_t)* EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER*);
void OPENSSL_fork_prepare();
const EVP_CIPHER* EVP_camellia_256_cfb8();
const unsigned char* SSL_SESSION_get0_id_context(const SSL_SESSION*, unsigned int*);
size_t SSL_get_server_random(const SSL*, unsigned char*, size_t);
int X509_NAME_get_text_by_NID(const X509_NAME*, int,  char*, int);
int openat64(int, const char*, int);
int uncompress(Bytef*, uLongf*, const Bytef*, uLong);
RSA* RSA_new();
PBE2PARAM* d2i_PBE2PARAM(PBE2PARAM**, const unsigned char**, long);
int OPENSSL_issetugid();
X509_ALGOR* PKCS5_pbe_set_ex(int, int, const unsigned char*, int, OSSL_LIB_CTX*);
void EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD*, int (X509_SIG_INFO*, const X509_ALGOR*, const ASN1_STRING*)*);
void EVP_ASYM_CIPHER_do_all_provided(OSSL_LIB_CTX*, void (EVP_ASYM_CIPHER*, void*)*, void*);
void SSL_set_psk_server_callback(SSL*, SSL_psk_server_cb_func);
int i2d_PrivateKey_bio(BIO*, const EVP_PKEY*);
USERNOTICE* USERNOTICE_new();
int BN_mod_mul(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int pthread_getaffinity_np(pthread_t, size_t, cpu_set_t*);
CTLOG_STORE* CTLOG_STORE_new();
int ASYNC_is_capable();
ASN1_INTEGER* ASN1_INTEGER_new();
int PKCS7_type_is_other(PKCS7*);
void* memmem(const void*, size_t, const void*, size_t);
int ENGINE_set_default_EC(ENGINE*);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX*, EVP_PKEY*);
int BN_GF2m_mod_sqrt_arr(BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
int BIO_socket_nbio(int, int);
void PBKDF2PARAM_free(PBKDF2PARAM*);
void CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES*);
int access(const char*, int);
int BIO_connect(int, const BIO_ADDR*, int);
int EVP_PKEY_get_bn_param(const EVP_PKEY*, const char*, BIGNUM**);
long int jrand48(unsigned short int[3]);
int SSL_shutdown(SSL*);
int SSL_use_psk_identity_hint(SSL*, const char*);
int DH_check_pub_key_ex(const DH*, const BIGNUM*);
const ASN1_ITEM* ASN1_UTF8STRING_it();
int RAND_pseudo_bytes(unsigned char*, int);
int EVP_PKEY_CTX_get1_id(EVP_PKEY_CTX*, void*);
int i2d_DSA_PUBKEY_fp(FILE*, const DSA*);
const ASN1_ITEM* PBKDF2PARAM_it();
int i2d_ASN1_SET_ANY(const ASN1_SEQUENCE_ANY*, unsigned char**);
int EVP_SignFinal(EVP_MD_CTX*, unsigned char*, unsigned int*, EVP_PKEY*);
void free(void*);
int CRYPTO_dup_ex_data(int, CRYPTO_EX_DATA*, const CRYPTO_EX_DATA*);
void SSL_set_security_callback(SSL*, int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)*);
const EVP_CIPHER* EVP_get_cipherbyname(const char*);
void ENGINE_unregister_RAND(ENGINE*);
const char* EVP_PKEY_CTX_get0_propq(const EVP_PKEY_CTX*);
int SSL_export_keying_material(SSL*, unsigned char*, size_t, const char*, size_t, const unsigned char*, size_t, int);
EC_KEY* EC_KEY_new_ex(OSSL_LIB_CTX*, const char*);
void* realloc(void*, unsigned long int);
int EVP_PKEY_set1_DH(EVP_PKEY*, dh_st*);
int EVP_DigestVerifyUpdate(EVP_MD_CTX*, const void*, size_t);
stack_st_X509_REVOKED* X509_CRL_get_REVOKED(X509_CRL*);
UI_METHOD* UI_OpenSSL();
EVP_PKEY* PEM_read_PrivateKey(FILE*, EVP_PKEY**, pem_password_cb*, void*);
const char* SSL_get_psk_identity_hint(const SSL*);
EVP_PKEY_CTX* EVP_MD_CTX_get_pkey_ctx(const EVP_MD_CTX*);
const OSSL_PARAM* EVP_KEYEXCH_gettable_ctx_params(const EVP_KEYEXCH*);
void OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO*);
void X509_STORE_CTX_set_depth(X509_STORE_CTX*, int);
const char* SSL_state_string_long(const SSL*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE**, const ASN1_OBJECT*, int, const void*, int);
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
OCSP_REQUEST* d2i_OCSP_REQUEST(OCSP_REQUEST**, const unsigned char**, long);
RSA* d2i_RSAPublicKey_bio(BIO*, RSA**);
int OPENSSL_init_crypto(uint64_t, const OPENSSL_INIT_SETTINGS*);
int EVP_PKEY_CTX_set_dh_rfc5114(EVP_PKEY_CTX*, int);
const char* SSL_get_version(const SSL*);
int i2d_X509_VAL(const X509_VAL*, unsigned char**);
void SSL_SESSION_get0_ticket(const SSL_SESSION*, const unsigned char**, size_t*);
size_t HMAC_size(const HMAC_CTX*);
int ENGINE_register_DH(ENGINE*);
int pthread_getattr_default_np(pthread_attr_t*);
EVP_PKEY* X509_get_pubkey(X509*);
const EVP_PKEY_METHOD* EVP_PKEY_meth_find(int);
int X509_CRL_check_suiteb(X509_CRL*, EVP_PKEY*, unsigned long);
const ASN1_ITEM* PROXY_CERT_INFO_EXTENSION_it();
void ASN1_add_stable_module();
const EVP_CIPHER* EVP_aes_256_wrap();
EVP_CIPHER* EVP_CIPHER_meth_new(int, int, int);
double strtod_l(restrict const char*, restrict  char**, locale_t);
void SCT_LIST_print(const stack_st_SCT*, BIO*, int, const char*, const CTLOG_STORE*);
int X509V3_add_value_bool(const char*, int, stack_st_CONF_VALUE**);
const EVP_MD* EVP_sha512_224();
int BN_mod_add(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const ASN1_ITEM* DIST_POINT_NAME_it();
const EVP_MD* EVP_sha256();
const char* DH_meth_get0_name(const DH_METHOD*);
int epoll_ctl(int, int, int, epoll_event*);
int SSL_CTX_set_default_verify_store(SSL_CTX*);
int bcmp(const void*, const void*, unsigned long int);
int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM*, const char*);
BIGNUM* BN_new();
EC_GROUP* EC_GROUP_new_from_params(const OSSL_PARAM[], OSSL_LIB_CTX*, const char*);
int X509v3_addr_canonize(IPAddrBlocks*);
void RSA_free(RSA*);
int getsubopt(restrict  char**, restrict const  char**, restrict  char**);
int EVP_DigestVerifyInit(EVP_MD_CTX*, EVP_PKEY_CTX**, const EVP_MD*, ENGINE*, EVP_PKEY*);
ssize_t sendmsg(int, const msghdr*, int);
void CTLOG_get0_log_id(const CTLOG*, const uint8_t**, size_t*);
uintmax_t wcstoumax(restrict const __gwchar_t*, restrict __gwchar_t**, int);
void DTLS_set_timer_cb(SSL*, DTLS_timer_cb);
const stack_st_X509* OCSP_resp_get0_certs(const OCSP_BASICRESP*);
void X509_CERT_AUX_free(X509_CERT_AUX*);
int X509v3_get_ext_by_NID(const stack_st_X509_EXTENSION*, int, int);
X509_VAL* X509_VAL_new();
int X509_trusted(const X509*);
OSSL_PARAM OSSL_PARAM_construct_size_t(const char*, size_t*);
uintmax_t strtoumax(restrict const char*, restrict  char**, int);
int gzungetc(int, gzFile);
int RSA_meth_set_bn_mod_exp(RSA_METHOD*, int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
__pid_t _Fork();
int DSA_meth_set_finish(DSA_METHOD*, int (DSA*)*);
int epoll_pwait2(int, epoll_event*, int, const timespec*, const __sigset_t*);
void ERR_add_error_data(int);
void EVP_CIPHER_do_all_provided(OSSL_LIB_CTX*, void (EVP_CIPHER*, void*)*, void*);
OSSL_PARAM OSSL_PARAM_construct_int32(const char*, int32_t*);
int EVP_PBE_CipherInit_ex(ASN1_OBJECT*, const char*, int, ASN1_TYPE*, EVP_CIPHER_CTX*, int, OSSL_LIB_CTX*, const char*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_from_name(OSSL_LIB_CTX*, const char*, const char*);
SSL_SESSION* d2i_SSL_SESSION(SSL_SESSION**, const unsigned char**, long);
ASN1_VALUE* SMIME_read_ASN1_ex(BIO*, int, BIO**, const ASN1_ITEM*, ASN1_VALUE**, OSSL_LIB_CTX*, const char*);
int SSL_has_matching_session_id(const SSL*, const unsigned char*, unsigned int);
const ASN1_OBJECT* X509_policy_node_get0_policy(const X509_POLICY_NODE*);
uLong crc32_combine64(uLong, uLong, off64_t);
PKCS7* d2i_PKCS7_fp(FILE*, PKCS7**);
int dirfd(DIR*);
void* X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE*, int, int, void*);
EVP_PKEY* d2i_PrivateKey_ex_bio(BIO*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
int rexec_af(restrict  char**, int, restrict const char*, restrict const char*, restrict const char*, restrict int*, sa_family_t);
int mkdirat(int, const char*, __mode_t);
int SMIME_write_ASN1(BIO*, ASN1_VALUE*, BIO*, int, int, int, stack_st_X509_ALGOR*, const ASN1_ITEM*);
const ASN1_ITEM* EDIPARTYNAME_it();
stack_st_X509_ALGOR* PKCS7_get_smimecap(PKCS7_SIGNER_INFO*);
X509_EXTENSION* X509_REVOKED_delete_ext(X509_REVOKED*, int);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE*, const ASN1_OBJECT*);
ssize_t recvmsg(int, msghdr*, int);
void X509_STORE_CTX_set0_dane(X509_STORE_CTX*, SSL_DANE*);
int X509_add1_trust_object(X509*, const ASN1_OBJECT*);
int OBJ_obj2txt( char*, int, const ASN1_OBJECT*, int);
int SCT_set_source(SCT*, sct_source_t);
int i2d_ASN1_GENERALIZEDTIME(const ASN1_GENERALIZEDTIME*, unsigned char**);
int SSL_export_keying_material_early(SSL*, unsigned char*, size_t, const char*, size_t, const unsigned char*, size_t);
const EVP_CIPHER* EVP_sm4_ecb();
void CRYPTO_secure_free(void*, const char*, int);
int open_by_handle_at(int, file_handle*, int);
int fchmod(int, __mode_t);
int strfromf32( char*, size_t, const char*, _Float32);
const EVP_CIPHER* EVP_aes_192_cfb128();
int SSL_CTX_add1_to_CA_list(SSL_CTX*, const X509*);
DH* DHparams_dup(const DH*);
int fexecve(int, const  char*[], const  char*[]);
int X509_REQ_add1_attr(X509_REQ*, X509_ATTRIBUTE*);
int i2d_PrivateKey_fp(FILE*, const EVP_PKEY*);
int inflateEnd(z_streamp);
void __sched_cpufree(cpu_set_t*);
void ECPKPARAMETERS_free(ECPKPARAMETERS*);
int BN_bn2mpi(const BIGNUM*, unsigned char*);
int EVP_PKEY_keygen(EVP_PKEY_CTX*, EVP_PKEY**);
int compress(Bytef*, uLongf*, const Bytef*, uLong);
int SSL_set_srp_server_param(SSL*, const BIGNUM*, const BIGNUM*, BIGNUM*, BIGNUM*,  char*);
int X509_cmp_timeframe(const X509_VERIFY_PARAM*, const ASN1_TIME*, const ASN1_TIME*);
socklen_t inet6_rth_space(int, int);
int BN_mod_lshift1(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX*, const char*, int);
const SSL_CIPHER* SSL_get_pending_cipher(const SSL*);
unsigned long ERR_peek_last_error();
int PKCS7_set_attributes(PKCS7_SIGNER_INFO*, stack_st_X509_ATTRIBUTE*);
int EVP_MD_meth_set_cleanup(EVP_MD*, int (EVP_MD_CTX*)*);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
OCSP_REQUEST* OCSP_REQUEST_new();
int EC_KEY_set_private_key(EC_KEY*, const BIGNUM*);
int OSSL_PARAM_get_utf8_string_ptr(const OSSL_PARAM*, const char**);
int BN_GF2m_mod_sqrt(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int i2d_ECPKParameters(const EC_GROUP*, unsigned char**);
X509_REQ* PEM_read_X509_REQ(FILE*, X509_REQ**, pem_password_cb*, void*);
int EVP_PKEY_copy_parameters(EVP_PKEY*, const EVP_PKEY*);
BIO* BIO_dup_chain(BIO*);
int EC_KEY_precompute_mult(EC_KEY*, BN_CTX*);
int SSL_CTX_use_certificate_ASN1(SSL_CTX*, int, const unsigned char*);
const UI_METHOD* UI_get_default_method();
X509_PUBKEY* X509_PUBKEY_new();
int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
SXNET* SXNET_new();
const ASN1_ITEM* OCSP_ONEREQ_it();
void OPENSSL_sk_sort(OPENSSL_STACK*);
int deflatePending(z_streamp, unsigned*, int*);
int malloc_trim(size_t);
unsigned ntohl(unsigned);
int SSL_get_early_data_status(const SSL*);
uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX*);
stack_st_SSL_CIPHER* SSL_CTX_get_ciphers(const SSL_CTX*);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, const ASN1_INTEGER*, X509_OBJECT*);
int gzgetc_(gzFile);
X509_EXTENSION* OCSP_BASICRESP_delete_ext(OCSP_BASICRESP*, int);
int at_quick_exit(void ()*);
int pthread_sigmask(int, restrict const __sigset_t*, restrict __sigset_t*);
unsigned long int strxfrm( char*, const  char*, unsigned long int);
void ASN1_STRING_free(ASN1_STRING*);
int OPENSSL_isservice();
int strcasecmp_l(const char*, const char*, locale_t);
ASN1_OBJECT* d2i_ASN1_OBJECT(ASN1_OBJECT**, const unsigned char**, long);
void SSL_set_cert_cb(SSL*, int (SSL*, void*)*, void*);
const ASN1_PRINTABLESTRING* PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO*);
void SSL_CTX_set_alpn_select_cb(SSL_CTX*, SSL_CTX_alpn_select_cb_func, void*);
int OSSL_PARAM_get_double(const OSSL_PARAM*, double*);
stack_st_X509* X509_STORE_get1_all_certs(X509_STORE*);
const ASN1_ITEM* X509_NAME_it();
char* strndup(const  char*, unsigned long int);
IPAddressRange* d2i_IPAddressRange(IPAddressRange**, const unsigned char**, long);
X509_EXTENSION* X509_delete_ext(X509*, int);
void srand48(long int);
OCSP_RESPID* d2i_OCSP_RESPID(OCSP_RESPID**, const unsigned char**, long);
int OCSP_RESPID_match(OCSP_RESPID*, X509*);
int close_range(unsigned int, unsigned int, int);
int killpg(__pid_t, int);
EC_KEY* PEM_read_bio_ECPrivateKey(BIO*, EC_KEY**, pem_password_cb*, void*);
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX*, int);
void SSL_CTX_set0_CA_list(SSL_CTX*, stack_st_X509_NAME*);
EVP_PKEY* d2i_AutoPrivateKey(EVP_PKEY**, const unsigned char**, long);
X509_PUBKEY* d2i_X509_PUBKEY(X509_PUBKEY**, const unsigned char**, long);
uint8_t* inet6_option_alloc(cmsghdr*, int, int, int);
int getgrnam_r(restrict const char*, restrict group*, restrict  char*, size_t, restrict group**);
int _toupper(int);
const BIO_METHOD* BIO_s_connect();
int execvpe(const char*, const  char*[], const  char*[]);
void X509_set0_distinguishing_id(X509*, ASN1_OCTET_STRING*);
int pthread_condattr_setclock(pthread_condattr_t*, __clockid_t);
int EC_KEY_generate_key(EC_KEY*);
int SSL_SESSION_set1_master_key(SSL_SESSION*, const unsigned char*, size_t);
int (EVP_MD_CTX*, const EVP_MD_CTX*)* EVP_MD_meth_get_copy(const EVP_MD*);
void SHA512_Transform(SHA512_CTX*, const unsigned char*);
int EVP_read_pw_string_min( char*, int, int, const char*, int);
int SSL_select_next_proto(unsigned char**, unsigned char*, const unsigned char*, unsigned int, const unsigned char*, unsigned int);
void EC_GROUP_set_point_conversion_form(EC_GROUP*, point_conversion_form_t);
int EVP_CIPHER_CTX_get_iv_length(const EVP_CIPHER_CTX*);
int OSSL_PARAM_set_uint(OSSL_PARAM*, unsigned int);
int fsync(int);
RSA* d2i_RSAPrivateKey_fp(FILE*, RSA**);
SCT* SCT_new_from_base64(unsigned char, const char*, ct_log_entry_type_t, uint64_t, const char*, const char*);
int EVP_PKEY_CTX_set_dsa_paramgen_type(EVP_PKEY_CTX*, const char*);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY*, const ASN1_OBJECT*, int, const unsigned char*, int);
int ferror(FILE*);
int X509V3_EXT_print(BIO*, X509_EXTENSION*, unsigned long, int);
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY**, int, int, const unsigned char*, int);
int scanf(restrict const  char*);
long int strtol_l(restrict const char*, restrict  char**, int, locale_t);
int pthread_rwlock_timedrdlock(restrict pthread_rwlock_t*, restrict const timespec*);
int X509_NAME_ENTRY_set(const X509_NAME_ENTRY*);
unsigned char* ASN1_STRING_data(ASN1_STRING*);
X509_EXTENSION* OCSP_REQUEST_get_ext(OCSP_REQUEST*, int);
ENGINE* ENGINE_get_last();
DH* DSA_dup_DH(const DSA*);
void OSSL_PARAM_set_all_unmodified(OSSL_PARAM*);
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn*, CRYPTO_realloc_fn*, CRYPTO_free_fn*);
const EVP_CIPHER* EVP_rc2_ecb();
void X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX*, stack_st_X509*);
int OPENSSL_sk_num(const OPENSSL_STACK*);
int EVP_PBE_scrypt_ex(const char*, size_t, const unsigned char*, size_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char*, size_t, OSSL_LIB_CTX*, const char*);
int X509v3_addr_subset(IPAddrBlocks*, IPAddrBlocks*);
const EVP_CIPHER* EVP_chacha20_poly1305();
int seed48_r(unsigned short int[3], drand48_data*);
int setipv4sourcefilter(int, in_addr, in_addr, uint32_t, uint32_t, const in_addr*);
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_txt(stack_st_X509_ATTRIBUTE**, const char*, int, const unsigned char*, int);
void ENGINE_register_all_EC();
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD*, void (EVP_PKEY*)*);
int deflateInit_(z_streamp, int, const char*, int);
int X509_STORE_load_locations_ex(X509_STORE*, const char*, const char*, OSSL_LIB_CTX*, const char*);
int UI_add_input_boolean(UI*, const char*, const char*, const char*, const char*, int,  char*);
int ASN1_TIME_print(BIO*, const ASN1_TIME*);
int SSL_CTX_set_client_cert_engine(SSL_CTX*, ENGINE*);
size_t confstr(int,  char*, size_t);
uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX*);
int i2d_ASIdentifiers(const ASIdentifiers*, unsigned char**);
time_t timegm(tm*);
int ASN1_i2d_bio(i2d_of_void*, BIO*, const void*);
int PKCS7_decrypt(PKCS7*, EVP_PKEY*, X509*, BIO*, int);
int PEM_write_DHparams(FILE*, const DH*);
char* l64a(long int);
int SSL_CTX_dane_enable(SSL_CTX*);
int EC_POINT_add(const EC_GROUP*, EC_POINT*, const EC_POINT*, const EC_POINT*, BN_CTX*);
char* crypt_rn(const char*, const char*, void*, int);
int BN_RECP_CTX_set(BN_RECP_CTX*, const BIGNUM*, BN_CTX*);
const BIGNUM* EC_GROUP_get0_field(const EC_GROUP*);
int EVP_PKEY_CTX_set_dh_paramgen_subprime_len(EVP_PKEY_CTX*, int);
const EVP_CIPHER* EVP_aria_256_ccm();
int pcre_fullinfo(const pcre*, const pcre_extra*, int, void*);
int SSL_dane_enable(SSL*, const char*);
int BIO_nread(BIO*,  char**, int);
void SSL_CTX_set_default_passwd_cb(SSL_CTX*, pem_password_cb*);
int X509_STORE_load_store(X509_STORE*, const char*);
int getpwent_r(restrict passwd*, restrict  char*, size_t, restrict passwd**);
int pthread_attr_getstack(restrict const pthread_attr_t*, restrict void**, restrict size_t*);
FILE* freopen64(restrict const char*, restrict const char*, restrict FILE*);
int getprotoent_r(restrict protoent*, restrict  char*, size_t, restrict protoent**);
int SSL_config(SSL*, const char*);
const ASN1_ITEM* POLICY_CONSTRAINTS_it();
int dladdr1(const void*, Dl_info*, void**, int);
int EVP_VerifyFinal(EVP_MD_CTX*, const unsigned char*, unsigned int, EVP_PKEY*);
int OCSP_RESPID_match_ex(OCSP_RESPID*, X509*, OSSL_LIB_CTX*, const char*);
int SSL_SESSION_up_ref(SSL_SESSION*);
char* ERR_error_string(unsigned long,  char*);
int EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER*, int (EVP_CIPHER_CTX*, ASN1_TYPE*)*);
int RAND_load_file(const char*, long);
X509_CRL* X509_CRL_diff(X509_CRL*, X509_CRL*, EVP_PKEY*, const EVP_MD*, unsigned int);
int pthread_mutex_trylock(pthread_mutex_t*);
int inflateBackEnd(z_streamp);
int X509_REVOKED_add_ext(X509_REVOKED*, X509_EXTENSION*, int);
int PKCS5_PBE_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
const char* OBJ_nid2ln(int);
int pipe(int[2]);
void OPENSSL_sk_free(OPENSSL_STACK*);
int DSA_generate_key(DSA*);
void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY*, ASN1_STRING*);
int i2d_EC_PUBKEY(const EC_KEY*, unsigned char**);
void SSL_set_default_read_buffer_len(SSL*, size_t);
const RSA_METHOD* RSA_get_default_method();
int pthread_attr_getsigmask_np(const pthread_attr_t*, __sigset_t*);
OSSL_LIB_CTX* OSSL_LIB_CTX_new_child(const OSSL_CORE_HANDLE*, const OSSL_DISPATCH*);
int versionsort64(const dirent64**, const dirent64**);
uint64_t BIO_number_read(BIO*);
int OCSP_basic_sign(OCSP_BASICRESP*, X509*, EVP_PKEY*, const EVP_MD*, stack_st_X509*, unsigned long);
int X509_CRL_get0_by_cert(X509_CRL*, X509_REVOKED**, X509*);
int EVP_EncryptFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
POLICYQUALINFO* d2i_POLICYQUALINFO(POLICYQUALINFO**, const unsigned char**, long);
int deflateSetDictionary(z_streamp, const Bytef*, uInt);
int getpriority(__priority_which_t, id_t);
void BIO_vfree(BIO*);
int X509_ocspid_print(BIO*, X509*);
int i2d_RSA_PUBKEY_bio(BIO*, const RSA*);
int X509_TRUST_get_count();
stack_st_SRTP_PROTECTION_PROFILE* SSL_get_srtp_profiles(SSL*);
void EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD*, void (EVP_PKEY_CTX*)**);
const OSSL_PARAM* EVP_RAND_gettable_params(const EVP_RAND*);
CONF_METHOD* NCONF_default();
int X509_LOOKUP_init(X509_LOOKUP*);
int sem_getvalue(restrict sem_t*, restrict int*);
int BN_bn2lebinpad(const BIGNUM*, unsigned char*, int);
int SSL_set_session_id_context(SSL*, const unsigned char*, unsigned int);
int X509V3_add1_i2d(stack_st_X509_EXTENSION**, int, void*, int, unsigned long);
const char* EVP_ASYM_CIPHER_get0_name(const EVP_ASYM_CIPHER*);
int setrlimit(__rlimit_resource_t, const rlimit*);
X509_PUBKEY* X509_REQ_get_X509_PUBKEY(X509_REQ*);
void X509_STORE_CTX_free(X509_STORE_CTX*);
const EVP_CIPHER* EVP_des_ede_cbc();
int SSL_get_peer_signature_type_nid(const SSL*, int*);
int inflate(z_streamp, int);
unsigned long int fwrite(const void*, unsigned long int, unsigned long int, FILE*);
int ASN1_STRING_set(ASN1_STRING*, const void*, int);
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE*);
EVP_PKEY_METHOD* EVP_PKEY_meth_new(int, int);
int X509v3_asid_add_inherit(ASIdentifiers*, int);
int X509v3_asid_validate_path(X509_STORE_CTX*);
int PEM_write(FILE*, const char*, const char*, const unsigned char*, long);
int SSL_SESSION_set1_id_context(SSL_SESSION*, const unsigned char*, unsigned int);
void CONF_imodule_set_flags(CONF_IMODULE*, unsigned long);
const EVP_MD* EVP_get_digestbyname(const char*);
void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM*, X509_VERIFY_PARAM*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE**, const char*, int, const unsigned char*, int);
const BIGNUM* BN_get0_nist_prime_192();
uLong crc32_z(uLong, const Bytef*, z_size_t);
int gzputc(gzFile, int);
int RSA_generate_key_ex(RSA*, int, BIGNUM*, BN_GENCB*);
int SSL_SESSION_print_fp(FILE*, const SSL_SESSION*);
int i2d_OCSP_CERTSTATUS(const OCSP_CERTSTATUS*, unsigned char**);
const OSSL_PARAM* EVP_KEM_settable_ctx_params(const EVP_KEM*);
int PEM_read(FILE*,  char**,  char**, unsigned char**, long*);
const OSSL_PARAM* EVP_MAC_gettable_ctx_params(const EVP_MAC*);
void X509_STORE_CTX_set_error(X509_STORE_CTX*, int);
int sched_setscheduler(__pid_t, int, const sched_param*);
int i2d_RSAPublicKey(const RSA*, unsigned char**);
int OCSP_resp_find(OCSP_BASICRESP*, OCSP_CERTID*, int);
int (EVP_MD_CTX*)* EVP_MD_meth_get_init(const EVP_MD*);
int SMIME_write_ASN1_ex(BIO*, ASN1_VALUE*, BIO*, int, int, int, stack_st_X509_ALGOR*, const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int sem_close(sem_t*);
PKCS7_ISSUER_AND_SERIAL* PKCS7_get_issuer_and_serial(PKCS7*, int);
int PEM_read_bio_ex(BIO*,  char**,  char**, unsigned char**, long*, unsigned int);
const ASN1_TIME* X509_CRL_get0_lastUpdate(const X509_CRL*);
int OSSL_PARAM_set_uint32(OSSL_PARAM*, uint32_t);
const OSSL_PARAM* EVP_KEYMGMT_gen_settable_params(const EVP_KEYMGMT*);
void OCSP_RESPDATA_free(OCSP_RESPDATA*);
size_t fread_unlocked(restrict void*, size_t, size_t, restrict FILE*);
X509_CRL* d2i_X509_CRL_fp(FILE*, X509_CRL**);
int SSL_CTX_set_async_callback_arg(SSL_CTX*, void*);
RSA* PEM_read_bio_RSAPrivateKey(BIO*, RSA**, pem_password_cb*, void*);
void EVP_EncodeInit(EVP_ENCODE_CTX*);
int SSL_CTX_set_purpose(SSL_CTX*, int);
GENERAL_NAMES* v2i_GENERAL_NAMES(const X509V3_EXT_METHOD*, X509V3_CTX*, stack_st_CONF_VALUE*);
int sigqueue(__pid_t, int, const sigval);
char* __stpcpy(restrict  char*, restrict const char*);
int PEM_write_bio_ECPrivateKey(BIO*, const EC_KEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int BIO_set_ex_data(BIO*, int, void*);
PKCS7_SIGNER_INFO* d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO**, const unsigned char**, long);
void pcre16_free_substring_list(const unsigned short**);
int BN_nnmod(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int EVP_EncryptInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*);
int RSA_set0_factors(RSA*, BIGNUM*, BIGNUM*);
void quick_exit(int);
X509_PURPOSE* X509_PURPOSE_get0(int);
int pthread_attr_setinheritsched(pthread_attr_t*, int);
char* i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD*, const ASN1_OCTET_STRING*);
int ECDH_compute_key(void*, size_t, const EC_POINT*, const EC_KEY*, void* (const void*, size_t, void*, size_t*)*);
int ASYNC_WAIT_CTX_set_status(ASYNC_WAIT_CTX*, int);
long int lrand48();
int EVP_PKEY_CTX_set_rsa_oaep_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_KEYEXCH_is_a(const EVP_KEYEXCH*, const char*);
void AUTHORITY_KEYID_free(AUTHORITY_KEYID*);
const EVP_CIPHER* EVP_des_ede_cfb64();
int OPENSSL_strcasecmp(const char*, const char*);
OCSP_CERTID* OCSP_onereq_get0_id(OCSP_ONEREQ*);
int EVP_MAC_CTX_set_params(EVP_MAC_CTX*, const OSSL_PARAM[]);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY*, const char*, int, const unsigned char*, int);
int PEM_write_X509(FILE*, const X509*);
const EVP_CIPHER* EVP_aria_256_cfb8();
int X509_REQ_add1_attr_by_txt(X509_REQ*, const char*, int, const unsigned char*, int);
int i2d_ACCESS_DESCRIPTION(const ACCESS_DESCRIPTION*, unsigned char**);
unsigned int EVP_RAND_get_strength(EVP_RAND_CTX*);
int BN_mod_sub_quick(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*);
void ERR_add_error_mem_bio(const char*, BIO*);
OCSP_RESPBYTES* d2i_OCSP_RESPBYTES(OCSP_RESPBYTES**, const unsigned char**, long);
BN_MONT_CTX* BN_MONT_CTX_set_locked(BN_MONT_CTX**, CRYPTO_RWLOCK*, const BIGNUM*, BN_CTX*);
int OPENSSL_init_ssl(uint64_t, const OPENSSL_INIT_SETTINGS*);
ASN1_OCTET_STRING* X509_EXTENSION_get_data(X509_EXTENSION*);
int munmap(void*, size_t);
char* inet_nsap_ntoa(int, const unsigned char*,  char*);
COMP_CTX* COMP_CTX_new(COMP_METHOD*);
int ASYNC_WAIT_CTX_get_callback(ASYNC_WAIT_CTX*, ASYNC_callback_fn*, void**);
int SSL_CONF_cmd_argv(SSL_CONF_CTX*, int*,  char***);
int mlockall(int);
int PEM_write_bio_PKCS8PrivateKey(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
int DSA_sign(int, const unsigned char*, int, unsigned char*, unsigned int*, DSA*);
void RSA_get0_factors(const RSA*, const BIGNUM**, const BIGNUM**);
int RSA_padding_check_PKCS1_type_1(unsigned char*, int, const unsigned char*, int, int);
const ASN1_ITEM* OTHERNAME_it();
_Float64 strtof64_l(restrict const char*, restrict  char**, locale_t);
void* valloc(size_t);
long SSL_SESSION_get_timeout(const SSL_SESSION*);
long int pathconf(const char*, int);
int OCSP_single_get0_status(OCSP_SINGLERESP*, int*, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**);
int EVP_read_pw_string( char*, int, const char*, int);
const stack_st_X509_EXTENSION* X509_get0_extensions(const X509*);
void OPENSSL_die(const char*, const char*, int);
const char* X509_get_default_cert_dir_env();
void CRYPTO_clear_free(void*, size_t, const char*, int);
X509_CERT_AUX* d2i_X509_CERT_AUX(X509_CERT_AUX**, const unsigned char**, long);
IPAddressRange* IPAddressRange_new();
pcre16* pcre16_compile2(const unsigned short*, int, int*, const char**, int*, const unsigned char*);
unsigned short ntohs(unsigned short);
int i2d_SCT_LIST(const stack_st_SCT*, unsigned char**);
int EVP_MD_names_do_all(const EVP_MD*, void (const char*, void*)*, void*);
X509_CRL* PEM_read_bio_X509_CRL(BIO*, X509_CRL**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_rc4_hmac_md5();
int PKCS7_print_ctx(BIO*, const PKCS7*, int, const ASN1_PCTX*);
DH* DH_get_1024_160();
const EVP_CIPHER* EVP_aes_256_ccm();
int BIO_vprintf(BIO*, const char*, va_list);
int OSSL_HTTP_REQ_CTX_set_request_line(OSSL_HTTP_REQ_CTX*, int, const char*, const char*, const char*);
const EVP_PKEY_ASN1_METHOD* ENGINE_get_pkey_asn1_meth(ENGINE*, int);
int pthread_attr_getaffinity_np(const pthread_attr_t*, size_t, cpu_set_t*);
char* strrchr(const  char*, int);
ASN1_INTEGER* BN_to_ASN1_INTEGER(const BIGNUM*, ASN1_INTEGER*);
void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD*, int (EVP_MD_CTX*, const ASN1_ITEM*, const void*, const X509_ALGOR*, const ASN1_BIT_STRING*, EVP_PKEY*)*, int (EVP_MD_CTX*, const ASN1_ITEM*, const void*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*)*);
const BIGNUM* RSA_get0_p(const RSA*);
int EVP_PKEY_is_a(const EVP_PKEY*, const char*);
int i2d_OCSP_ONEREQ(const OCSP_ONEREQ*, unsigned char**);
int SXNET_add_id_ulong(SXNET**, unsigned long, const char*, int);
int EVP_RAND_nonce(EVP_RAND_CTX*, unsigned char*, size_t);
int adjtime(const timeval*, timeval*);
EC_KEY_METHOD* EC_KEY_METHOD_new(const EC_KEY_METHOD*);
int strfromf32x( char*, size_t, const char*, _Float32x);
evp_pkey_st* SSL_get_privatekey(const SSL*);
X509* PEM_read_X509_AUX(FILE*, X509**, pem_password_cb*, void*);
int ASN1_TYPE_cmp(const ASN1_TYPE*, const ASN1_TYPE*);
int i2d_re_X509_tbs(X509*, unsigned char**);
int SSL_get0_dane_tlsa(SSL*, uint8_t*, uint8_t*, uint8_t*, const unsigned char**, size_t*);
int PEM_write_bio_PUBKEY(BIO*, const EVP_PKEY*);
NETSCAPE_SPKI* NETSCAPE_SPKI_new();
stack_st_OPENSSL_STRING* X509_get1_email(X509*);
X509_NAME* X509_get_issuer_name(const X509*);
const BIO_METHOD* BIO_f_nbio_test();
int execveat(int, const char*, const  char*[], const  char*[], int);
RSA* PEM_read_bio_RSAPublicKey(BIO*, RSA**, pem_password_cb*, void*);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX*, int);
int EVP_PBE_find(int, int, int*, int*, EVP_PBE_KEYGEN**);
int BN_dec2bn(BIGNUM**, const char*);
X509_OBJECT* X509_OBJECT_new();
int getservent_r(restrict servent*, restrict  char*, size_t, restrict servent**);
pcre_jit_stack* pcre_jit_stack_alloc(int, int);
DSA* d2i_DSA_PUBKEY_bio(BIO*, DSA**);
int SSL_CIPHER_get_bits(const SSL_CIPHER*, int*);
void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM*, unsigned int);
int DSA_size(const DSA*);
int OCSP_basic_verify(OCSP_BASICRESP*, stack_st_X509*, X509_STORE*, unsigned long);
int X509v3_addr_add_prefix(IPAddrBlocks*, const unsigned, const unsigned*, unsigned char*, const int);
const BIGNUM* RSA_get0_q(const RSA*);
void SSL_set_psk_find_session_callback(SSL*, SSL_psk_find_session_cb_func);
OCSP_CERTID* d2i_OCSP_CERTID(OCSP_CERTID**, const unsigned char**, long);
int EVP_CIPHER_CTX_get_key_length(const EVP_CIPHER_CTX*);
X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(const X509_STORE_CTX*);
int OSSL_PARAM_get_uint64(const OSSL_PARAM*, uint64_t*);
void EVP_PKEY_meth_get_digest_custom(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**);
ASN1_OBJECT* OBJ_dup(const ASN1_OBJECT*);
int ASN1_get_object(const unsigned char**, long*, int*, int*, long);
char* crypt(const char*, const char*);
int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX*, const void*, int*, void**);
int inet6_option_init(void*, cmsghdr**, int);
int EC_GROUP_set_curve_GFp(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
X509_PUBKEY* X509_get_X509_PUBKEY(const X509*);
const EVP_CIPHER* EVP_aes_128_wrap_pad();
void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, EVP_MD_CTX*)*);
const char* ERR_reason_error_string(unsigned long);
X509_TRUST* X509_TRUST_get0(int);
PROXY_CERT_INFO_EXTENSION* d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION**, const unsigned char**, long);
int RSA_generate_multi_prime_key(RSA*, int, int, BIGNUM*, BN_GENCB*);
void* memrchr(const void*, int, size_t);
const EVP_MD* HMAC_CTX_get_md(const HMAC_CTX*);
int EVP_DigestVerifyFinal(EVP_MD_CTX*, const unsigned char*, size_t);
void EC_KEY_METHOD_get_init(const EC_KEY_METHOD*, int (EC_KEY*)**, void (EC_KEY*)**, int (EC_KEY*, const EC_KEY*)**, int (EC_KEY*, const EC_GROUP*)**, int (EC_KEY*, const BIGNUM*)**, int (EC_KEY*, const EC_POINT*)**);
BIO* BIO_new_accept(const char*);
EVP_PKEY* EVP_PKEY_new();
int BN_GF2m_mod_sqr_arr(BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
int (ssl_st*, SSL_SESSION*)* SSL_CTX_sess_get_new_cb(SSL_CTX*);
void* ASN1_item_d2i_bio_ex(const ASN1_ITEM*, BIO*, void*, OSSL_LIB_CTX*, const char*);
OSSL_PARAM OSSL_PARAM_construct_octet_string(const char*, void*, size_t);
int X509_LOOKUP_by_subject_ex(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, X509_OBJECT*, OSSL_LIB_CTX*, const char*);
int BN_mod_add_quick(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*);
PKCS7* PKCS7_dup(const PKCS7*);
ISSUER_SIGN_TOOL* d2i_ISSUER_SIGN_TOOL(ISSUER_SIGN_TOOL**, const unsigned char**, long);
int drand48_r(restrict drand48_data*, restrict double*);
X509_ALGOR* PKCS5_pbe2_set_iv_ex(const EVP_CIPHER*, int, unsigned char*, int, unsigned char*, int, OSSL_LIB_CTX*);
int i2d_X509_REQ_fp(FILE*, const X509_REQ*);
void ASN1_BMPSTRING_free(ASN1_BMPSTRING*);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME*, const char*);
int inflatePrime(z_streamp, int, int);
X509_CRL_INFO* d2i_X509_CRL_INFO(X509_CRL_INFO**, const unsigned char**, long);
int RSA_meth_set_pub_enc(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
int i2d_ASN1_T61STRING(const ASN1_T61STRING*, unsigned char**);
stack_st_CONF_VALUE* X509V3_parse_list(const char*);
const ENGINE_CMD_DEFN* ENGINE_get_cmd_defns(const ENGINE*);
int ECDH_KDF_X9_62(unsigned char*, size_t, const unsigned char*, size_t, const unsigned char*, size_t, const EVP_MD*);
SSL_SESSION* PEM_read_SSL_SESSION(FILE*, SSL_SESSION**, pem_password_cb*, void*);
DH_METHOD* DH_meth_dup(const DH_METHOD*);
long CONF_get_number(lhash_st_CONF_VALUE*, const char*, const char*);
void __pthread_unwind_next(__pthread_unwind_buf_t*);
int RSA_check_key_ex(const RSA*, BN_GENCB*);
const ASN1_INTEGER* X509_REVOKED_get0_serialNumber(const X509_REVOKED*);
void* OPENSSL_LH_insert(OPENSSL_LHASH*, void*);
char* getenv(const char*);
const BIGNUM* EC_KEY_get0_private_key(const EC_KEY*);
int SSL_get_changed_async_fds(SSL*, int*, size_t*, int*, size_t*);
void EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**);
void EVP_MD_do_all(void (const EVP_MD*, const char*, const char*, void*)*, void*);
void BN_BLINDING_set_flags(BN_BLINDING*, unsigned long);
int i2d_X509_PUBKEY_fp(FILE*, const X509_PUBKEY*);
void DSA_free(DSA*);
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM*);
X509_CRL* X509_STORE_CTX_get0_current_crl(const X509_STORE_CTX*);
const OSSL_PARAM* EVP_KEYMGMT_settable_params(const EVP_KEYMGMT*);
int GENERAL_NAME_get0_otherName(const GENERAL_NAME*, ASN1_OBJECT**, ASN1_TYPE**);
X509_STORE* X509_LOOKUP_get_store(const X509_LOOKUP*);
int (int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, const RSA*)* RSA_meth_get_sign(const RSA_METHOD*);
BIO* BIO_new_fd(int, int);
int BN_sub(BIGNUM*, const BIGNUM*, const BIGNUM*);
int i2d_ASN1_VISIBLESTRING(const ASN1_VISIBLESTRING*, unsigned char**);
int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(EVP_PKEY_CTX*, int);
int DSA_meth_set_paramgen(DSA_METHOD*, int (DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*)*);
DIST_POINT_NAME* DIST_POINT_NAME_new();
const NAMING_AUTHORITY* ADMISSIONS_get0_namingAuthority(const ADMISSIONS*);
int OCSP_id_get0_info(ASN1_OCTET_STRING**, ASN1_OBJECT**, ASN1_OCTET_STRING**, ASN1_INTEGER**, OCSP_CERTID*);
const ASN1_ITEM* RSAPrivateKey_it();
void gzclearerr(gzFile);
int i2d_ADMISSIONS(const ADMISSIONS*, unsigned char**);
int sched_setaffinity(__pid_t, size_t, const cpu_set_t*);
int EVP_PKEY_CTX_set0_dh_kdf_ukm(EVP_PKEY_CTX*, unsigned char*, int);
int execvp(const char*, const  char*[]);
int BN_GF2m_mod_exp_arr(BIGNUM*, const BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
EC_GROUP* EC_GROUP_new(const EC_METHOD*);
void tzset();
int (EVP_MD_CTX*)* EVP_MD_meth_get_cleanup(const EVP_MD*);
const EVP_CIPHER* EVP_camellia_192_ctr();
X509_ATTRIBUTE* EVP_PKEY_get_attr(const EVP_PKEY*, int);
const char* pcre16_version();
uint64_t SSL_CTX_set_options(SSL_CTX*, uint64_t);
void SCT_LIST_free(stack_st_SCT*);
int clock_getres(clockid_t, timespec*);
int deflateParams(z_streamp, int, int);
X509_NAME_ENTRY* d2i_X509_NAME_ENTRY(X509_NAME_ENTRY**, const unsigned char**, long);
int i2d_ASN1_GENERALSTRING(const ASN1_GENERALSTRING*, unsigned char**);
int COMP_get_type(const COMP_METHOD*);
int EVP_DigestInit_ex2(EVP_MD_CTX*, const EVP_MD*, const OSSL_PARAM[]);
int EVP_PKEY_set1_EC_KEY(EVP_PKEY*, ec_key_st*);
int OSSL_PARAM_get_long(const OSSL_PARAM*, long int*);
int EVP_PKEY_CTX_get_ecdh_cofactor_mode(EVP_PKEY_CTX*);
void EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
int EVP_KEM_names_do_all(const EVP_KEM*, void (const char*, void*)*, void*);
unsigned long ERR_get_error_line(const char**, int*);
__pid_t waitpid(__pid_t, int*, int);
int NCONF_load(CONF*, const char*, long*);
int X509_CRL_digest(const X509_CRL*, const EVP_MD*, unsigned char*, unsigned int*);
void* mmap64(void*, size_t, int, int, int, __off64_t);
int EVP_PKEY_eq(const EVP_PKEY*, const EVP_PKEY*);
EC_GROUP* EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS*);
EC_GROUP* EC_GROUP_new_from_ecparameters(const ECPARAMETERS*);
int waitid(idtype_t, __id_t, siginfo_t*, int);
void EVP_KEYMGMT_free(EVP_KEYMGMT*);
unsigned char* EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX*);
BIGNUM* BN_CTX_get(BN_CTX*);
int ENGINE_set_init_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
int SCT_set0_log_id(SCT*, unsigned char*, size_t);
int setrlimit64(__rlimit_resource_t, const rlimit64*);
int PEM_write_bio_DSA_PUBKEY(BIO*, const DSA*);
int DH_meth_set_init(DH_METHOD*, int (DH*)*);
int ASN1_parse_dump(BIO*, const unsigned char*, long, int, int);
int pthread_attr_setsigmask_np(pthread_attr_t*, const __sigset_t*);
void X509_CRL_METHOD_free(X509_CRL_METHOD*);
const RSA_METHOD* RSA_get_method(const RSA*);
NAMING_AUTHORITY* NAMING_AUTHORITY_new();
int EVP_PKEY_print_public(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
int ASN1_mbstring_ncopy(ASN1_STRING**, const unsigned char*, int, int, unsigned long, long, long);
int pcre32_get_named_substring(const pcre32*, const unsigned int*, int*, int, const unsigned int*, const unsigned int**);
const EVP_CIPHER* EVP_aes_256_cfb8();
void EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
int PEM_write_PUBKEY_ex(FILE*, const EVP_PKEY*, OSSL_LIB_CTX*, const char*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new(EVP_PKEY*, ENGINE*);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
int OSSL_PARAM_get_utf8_string(const OSSL_PARAM*,  char**, size_t);
int SSL_set1_param(SSL*, X509_VERIFY_PARAM*);
int (EVP_CIPHER_CTX*, const unsigned char*, const unsigned char*, int)* EVP_CIPHER_meth_get_init(const EVP_CIPHER*);
int group_member(__gid_t);
clock_t clock();
const char* EVP_MAC_get0_description(const EVP_MAC*);
const stack_st_X509_EXTENSION* X509_CRL_get0_extensions(const X509_CRL*);
int fprintf(FILE*, const  char*);
const BIO_METHOD* BIO_s_fd();
int OPENSSL_sk_unshift(OPENSSL_STACK*, const void*);
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM*);
size_t BUF_MEM_grow_clean(BUF_MEM*, size_t);
void SSL_add_ssl_module();
int pthread_setschedparam(pthread_t, int, const sched_param*);
X509* d2i_X509_AUX(X509**, const unsigned char**, long);
int EVP_ASYM_CIPHER_up_ref(EVP_ASYM_CIPHER*);
const EVP_CIPHER* EVP_cast5_ofb();
int OCSP_resp_find_status(OCSP_BASICRESP*, OCSP_CERTID*, int*, int*, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**);
int BN_GF2m_mod_mul(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int accept4(int, __SOCKADDR_ARG, restrict socklen_t*, int);
int sigismember(const sigset_t*, int);
int EVP_PKEY_CTX_set_dh_paramgen_seed(EVP_PKEY_CTX*, const unsigned char*, size_t);
int EVP_CIPHER_CTX_get_block_size(const EVP_CIPHER_CTX*);
int SSL_set_ssl_method(SSL*, const SSL_METHOD*);
int SSL_get_signature_type_nid(const SSL*, int*);
int X509_NAME_digest(const X509_NAME*, const EVP_MD*, unsigned char*, unsigned int*);
GENERAL_NAME* GENERAL_NAME_new();
const ASN1_GENERALIZEDTIME* OCSP_resp_get0_produced_at(const OCSP_BASICRESP*);
int EVP_PKEY_decrypt(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
stack_st_X509* SSL_get0_verified_chain(const SSL*);
BIO* BIO_new_file(const char*, const char*);
EC_GROUP* EC_GROUP_new_curve_GFp(const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int RSA_check_key(const RSA*);
int ENGINE_free(ENGINE*);
EVP_PKEY* b2i_PublicKey(const unsigned char**, long);
int ENGINE_register_EC(ENGINE*);
const BIGNUM* ECDSA_SIG_get0_s(const ECDSA_SIG*);
SSL_SESSION* SSL_SESSION_new();
int BN_GF2m_add(BIGNUM*, const BIGNUM*, const BIGNUM*);
char* strstr(const  char*, const  char*);
EC_GROUP* PEM_read_bio_ECPKParameters(BIO*, EC_GROUP**, pem_password_cb*, void*);
unsigned long ASN1_tag2bit(int);
int EVP_MD_meth_set_result_size(EVP_MD*, int);
ASN1_OBJECT* ASN1_OBJECT_new();
void SSL_CTX_set_cert_cb(SSL_CTX*, int (SSL*, void*)*, void*);
void EVP_MAC_free(EVP_MAC*);
const OSSL_PARAM* EVP_KEM_gettable_ctx_params(const EVP_KEM*);
long (BIO*, int, BIO_info_cb*)* BIO_meth_get_callback_ctrl(const BIO_METHOD*);
int PKCS5_PBKDF2_HMAC_SHA1(const char*, int, const unsigned char*, int, int, int, unsigned char*);
int DH_KDF_X9_42(unsigned char*, size_t, const unsigned char*, size_t, ASN1_OBJECT*, const unsigned char*, size_t, const EVP_MD*);
int i2d_DHxparams(const DH*, unsigned char**);
int RSA_padding_add_PKCS1_OAEP(unsigned char*, int, const unsigned char*, int, const unsigned char*, int);
int EVP_PKEY_get_params(const EVP_PKEY*, OSSL_PARAM[]);
const char* SSL_group_to_name(SSL*, int);
EC_KEY* EC_KEY_new();
int X509_OBJECT_up_ref_count(X509_OBJECT*);
OPENSSL_STACK* OPENSSL_sk_new(OPENSSL_sk_compfunc);
ssize_t process_vm_readv(pid_t, const iovec*, unsigned long int, const iovec*, unsigned long int, unsigned long int);
int SSL_set_rfd(SSL*, int);
X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(const X509_LOOKUP_METHOD*);
int PEM_write_bio_DHparams(BIO*, const DH*);
void ASYNC_unblock_pause();
int X509_check_ca(X509*);
const char* SSL_CIPHER_standard_name(const SSL_CIPHER*);
int EVP_PBE_scrypt(const char*, size_t, const unsigned char*, size_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char*, size_t);
int OCSP_copy_nonce(OCSP_BASICRESP*, OCSP_REQUEST*);
void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
X509_EXTENSION* OCSP_REQUEST_delete_ext(OCSP_REQUEST*, int);
int getw(FILE*);
int pthread_setname_np(pthread_t, const char*);
const ASN1_ITEM* X509_REQ_it();
const BIO_METHOD* BIO_s_bio();
int X509_get_signature_info(X509*, int*, int*, int*, uint32_t*);
const EVP_CIPHER* EVP_aes_128_cfb8();
int EVP_PKEY_set1_DSA(EVP_PKEY*, dsa_st*);
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
const char* zError(int);
const RSA_METHOD* ENGINE_get_RSA(const ENGINE*);
int EVP_MD_get_params(const EVP_MD*, OSSL_PARAM[]);
void NCONF_free_data(CONF*);
char* fgets_unlocked(restrict  char*, int, restrict FILE*);
int pcre_dfa_exec(const pcre*, const pcre_extra*, const char*, int, int, int, int*, int, int*, int);
int EVP_PKEY_CTX_set_dsa_paramgen_q_bits(EVP_PKEY_CTX*, int);
int OCSP_request_onereq_count(OCSP_REQUEST*);
const X509_POLICY_NODE* X509_policy_node_get0_parent(const X509_POLICY_NODE*);
X509* X509_dup(const X509*);
X509_SIG* d2i_X509_SIG(X509_SIG**, const unsigned char**, long);
EVP_MD* EVP_MD_meth_dup(const EVP_MD*);
int msync(void*, size_t, int);
const ASN1_ITEM* PBE2PARAM_it();
void SSL_CTX_set_verify_depth(SSL_CTX*, int);
int pthread_mutex_init(pthread_mutex_t*, const pthread_mutexattr_t*);
void* BN_GENCB_get_arg(BN_GENCB*);
int sigblock(int);
OPENSSL_INIT_SETTINGS* OPENSSL_INIT_new();
int OPENSSL_buf2hexstr_ex( char*, size_t, size_t*, const unsigned char*, size_t, const char);
unsigned long SSL_dane_clear_flags(SSL*, unsigned long);
BIO_ADDR* BIO_ADDR_new();
int getresuid(__uid_t*, __uid_t*, __uid_t*);
int EC_GROUP_get_order(const EC_GROUP*, BIGNUM*, BN_CTX*);
int EVP_PKEY_CTX_set1_id(EVP_PKEY_CTX*, const void*, int);
const EVP_CIPHER* EVP_seed_ecb();
int EVP_ASYM_CIPHER_is_a(const EVP_ASYM_CIPHER*, const char*);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*, int, int, void*);
void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING*);
void EVP_ASYM_CIPHER_free(EVP_ASYM_CIPHER*);
int OSSL_PARAM_get_size_t(const OSSL_PARAM*, size_t*);
int setpgid(__pid_t, __pid_t);
int SSL_get_shutdown(const SSL*);
int a2i_ASN1_ENUMERATED(BIO*, ASN1_ENUMERATED*,  char*, int);
pem_password_cb* SSL_get_default_passwd_cb(SSL*);
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM*);
int BIO_sock_info(int, BIO_sock_info_type, BIO_sock_info_u*);
int mkostemps( char*, int, int);
int EC_GROUP_set_curve_GF2m(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
void ERR_remove_state(unsigned long);
int SSL_is_server(const SSL*);
void ERR_add_error_txt(const char*, const char*);
void SSL_CTX_set_psk_find_session_callback(SSL_CTX*, SSL_psk_find_session_cb_func);
int gethostbyaddr_r(restrict const void*, __socklen_t, int, restrict hostent*, restrict  char*, size_t, restrict hostent**, restrict int*);
BIGNUM* BN_get_rfc3526_prime_3072(BIGNUM*);
int getservbyname_r(restrict const char*, restrict const char*, restrict servent*, restrict  char*, size_t, restrict servent**);
int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DSA_meth_get_bn_mod_exp(const DSA_METHOD*);
X509* X509_STORE_CTX_get0_cert(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_camellia_128_cbc();
int BN_get_params(int);
int pcre16_fullinfo(const pcre16*, const pcre16_extra*, int, void*);
void BIO_set_next(BIO*, BIO*);
OPENSSL_STACK* OPENSSL_sk_new_null();
_Float32x strtof32x_l(restrict const char*, restrict  char**, locale_t);
int EVP_PKEY_asn1_get_count();
int EVP_PKEY_get_raw_private_key(const EVP_PKEY*, unsigned char*, size_t*);
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED*);
void X509_REQ_set0_distinguishing_id(X509_REQ*, ASN1_OCTET_STRING*);
void CRL_DIST_POINTS_free(CRL_DIST_POINTS*);
BIO* BIO_new_dgram(int, int);
void PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO*, ASN1_OCTET_STRING*);
int RSA_get_multi_prime_extra_count(const RSA*);
int clock_nanosleep(clockid_t, int, const timespec*, timespec*);
X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(const X509_STORE*);
int clearenv();
int DSA_test_flags(const DSA*, int);
int BN_add_word(BIGNUM*, unsigned long);
RSA* RSA_new_method(ENGINE*);
void* memmove(void*, const void*, unsigned long int);
X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(const X509_LOOKUP_METHOD*);
int iruserok(uint32_t, int, const char*, const char*);
long long int llabs(long long int);
int EVP_PKEY_decapsulate(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
void* CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL*);
ssize_t pread(int, void*, size_t, __off64_t);
int BIO_dump(BIO*, const void*, int);
void* OPENSSL_sk_shift(OPENSSL_STACK*);
const ASN1_INTEGER* X509_get0_authority_serial(X509*);
void OCSP_SIGNATURE_free(OCSP_SIGNATURE*);
void X509V3_conf_free(CONF_VALUE*);
int X509_STORE_load_file_ex(X509_STORE*, const char*, OSSL_LIB_CTX*, const char*);
long SSL_CTX_set_timeout(SSL_CTX*, long);
int BN_GF2m_mod_solve_quad(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
BIO_METHOD* BIO_meth_new(int, const char*);
X509_LOOKUP_METHOD* X509_LOOKUP_file();
int EVP_RAND_names_do_all(const EVP_RAND*, void (const char*, void*)*, void*);
ct_log_entry_type_t SCT_get_log_entry_type(const SCT*);
int EVP_DecodeFinal(EVP_ENCODE_CTX*, unsigned char*, int*);
int EVP_RAND_enable_locking(EVP_RAND_CTX*);
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX*,  char* (SSL*, void*)*);
const EVP_CIPHER* EVP_des_ede3_ecb();
int X509_PURPOSE_get_by_sname(const char*);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE*);
X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(const X509_LOOKUP_METHOD*);
void SSL_set_allow_early_data_cb(SSL*, SSL_allow_early_data_cb_fn, void*);
const BIO_METHOD* BIO_s_file();
int X509_REQ_print_fp(FILE*, X509_REQ*);
int OSSL_HTTP_REQ_CTX_set_expected(OSSL_HTTP_REQ_CTX*, const char*, int, int, int);
void SSL_SESSION_get0_alpn_selected(const SSL_SESSION*, const unsigned char**, size_t*);
tm* getdate(const char*);
const OCSP_RESPDATA* OCSP_resp_get0_respdata(const OCSP_BASICRESP*);
const char* OPENSSL_cipher_name(const char*);
int nrand48_r(unsigned short int[3], restrict drand48_data*, restrict long int*);
void* DH_meth_get0_app_data(const DH_METHOD*);
char* fcvt(double, int, restrict int*, restrict int*);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK*);
int X509_STORE_CTX_get_by_subject(const X509_STORE_CTX*, X509_LOOKUP_TYPE, const X509_NAME*, X509_OBJECT*);
const unsigned char* EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX*);
X509_ALGOR* PKCS5_pbkdf2_set(int, unsigned char*, int, int, int);
long long int strtoq(restrict const char*, restrict  char**, int);
int (RSA*)* RSA_meth_get_finish(const RSA_METHOD*);
lhash_st_CONF_VALUE* CONF_load_bio(lhash_st_CONF_VALUE*, BIO*, long*);
void psiginfo(const siginfo_t*, const char*);
void SSL_set_default_passwd_cb(SSL*, pem_password_cb*);
int SSL_CTX_use_certificate_chain_file(SSL_CTX*, const char*);
int pthread_cond_destroy(pthread_cond_t*);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM*, unsigned long);
int i2a_ASN1_OBJECT(BIO*, const ASN1_OBJECT*);
ssize_t process_vm_writev(pid_t, const iovec*, unsigned long int, const iovec*, unsigned long int, unsigned long int);
const OSSL_PARAM* EVP_PKEY_settable_params(const EVP_PKEY*);
RSA* RSA_generate_key(int, unsigned long, void (int, int, void*)*, void*);
X509_REQ* X509_REQ_new_ex(OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aes_256_cbc_hmac_sha256();
int srand48_r(long int, drand48_data*);
void OPENSSL_LH_free(OPENSSL_LHASH*);
const OSSL_PARAM* EVP_RAND_settable_ctx_params(const EVP_RAND*);
int OSSL_PARAM_get_octet_ptr(const OSSL_PARAM*, const void**, size_t*);
int X509_REQ_verify(X509_REQ*, EVP_PKEY*);
const ASN1_ITEM* ASN1_PRINTABLE_it();
uLong zlibCompileFlags();
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE*);
int X509v3_asid_add_id_or_range(ASIdentifiers*, int, ASN1_INTEGER*, ASN1_INTEGER*);
const ASN1_ITEM* SCRYPT_PARAMS_it();
int X509V3_get_value_bool(const CONF_VALUE*, int*);
const ASN1_STRING* NAMING_AUTHORITY_get0_authorityText(const NAMING_AUTHORITY*);
int timer_gettime(timer_t, itimerspec*);
int BN_mod_exp(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int scandir64(restrict const char*, restrict dirent64***, int (const dirent64*)*, int (const dirent64**, const dirent64**)*);
int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char*, int, const unsigned char*, int, int, const unsigned char*, int, const EVP_MD*, const EVP_MD*);
X509_EXTENSION* X509v3_delete_ext(stack_st_X509_EXTENSION*, int);
int fsetpos64(FILE*, const fpos64_t*);
int X509_get_pubkey_parameters(EVP_PKEY*, stack_st_X509*);
void PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO*, NAMING_AUTHORITY*);
int pthread_clockjoin_np(pthread_t, void**, clockid_t, const timespec*);
void NOTICEREF_free(NOTICEREF*);
int i2d_PBKDF2PARAM(const PBKDF2PARAM*, unsigned char**);
int BN_mod_lshift(BIGNUM*, const BIGNUM*, int, const BIGNUM*, BN_CTX*);
void OPENSSL_LH_doall(OPENSSL_LHASH*, OPENSSL_LH_DOALL_FUNC);
void* OPENSSL_sk_delete_ptr(OPENSSL_STACK*, const void*);
int PEM_write_SSL_SESSION(FILE*, const SSL_SESSION*);
EVP_MAC_CTX* EVP_MAC_CTX_dup(const EVP_MAC_CTX*);
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE*);
int X509_CRL_set1_nextUpdate(X509_CRL*, const ASN1_TIME*);
const char* SSL_alert_type_string(int);
ECDSA_SIG* ECDSA_do_sign_ex(const unsigned char*, int, const BIGNUM*, const BIGNUM*, EC_KEY*);
int X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD*, X509_LOOKUP_ctrl_fn);
long inflateMark(z_streamp);
int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL*, void (void*)*);
int DSA_generate_parameters_ex(DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*);
const ASN1_ITEM* IPAddressOrRange_it();
const char* EVP_KEYMGMT_get0_description(const EVP_KEYMGMT*);
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST*, int, void*, int, unsigned long);
int PEM_write_bio_PKCS7_stream(BIO*, PKCS7*, BIO*, int);
int OBJ_find_sigid_by_algs(int*, int, int);
void EVP_MD_CTX_free(EVP_MD_CTX*);
void EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, const EVP_PKEY_CTX*)**);
int i2d_PROXY_CERT_INFO_EXTENSION(const PROXY_CERT_INFO_EXTENSION*, unsigned char**);
int X509V3_add_value_bool_nf(const char*, int, stack_st_CONF_VALUE**);
size_t CRYPTO_secure_actual_size(void*);
BIGNUM* BN_get_rfc3526_prime_4096(BIGNUM*);
int timer_getoverrun(timer_t);
ASN1_STRING* ASN1_item_pack(void*, const ASN1_ITEM*, ASN1_OCTET_STRING**);
int BN_to_montgomery(BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH*, BIO*);
int daemon(int, int);
int mkdir(const char*, __mode_t);
int OSSL_PARAM_modified(const OSSL_PARAM*);
const SSL_METHOD* TLSv1_2_client_method();
ssize_t preadv64v2(int, const iovec*, int, __off64_t, int);
int gethostname( char*, size_t);
void sync();
int i2d_RSA_PUBKEY_fp(FILE*, const RSA*);
int obstack_printf(restrict obstack*, restrict const char*);
int getlogin_r( char*, size_t);
int i2d_PKCS7(const PKCS7*, unsigned char**);
OCSP_CRLID* d2i_OCSP_CRLID(OCSP_CRLID**, const unsigned char**, long);
DIR* fdopendir(int);
ASN1_OCTET_STRING* SXNET_get_id_INTEGER(SXNET*, ASN1_INTEGER*);
char* UI_construct_prompt(UI*, const char*, const char*);
void* EVP_PKEY_get_ex_data(const EVP_PKEY*, int);
void BN_clear(BIGNUM*);
int EVP_CIPHER_get_type(const EVP_CIPHER*);
int setitimer(__itimer_which_t, restrict const itimerval*, restrict itimerval*);
void* UI_get0_user_data(UI*);
PKEY_USAGE_PERIOD* PKEY_USAGE_PERIOD_new();
X509_STORE_CTX* X509_STORE_CTX_new_ex(OSSL_LIB_CTX*, const char*);
void* RSA_get_ex_data(const RSA*, int);
unsigned long X509_subject_name_hash(X509*);
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ*, int, int);
int EVP_MD_meth_get_app_datasize(const EVP_MD*);
int SHA512_Final(unsigned char*, SHA512_CTX*);
int EVP_MAC_names_do_all(const EVP_MAC*, void (const char*, void*)*, void*);
int (int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, const RSA*)* RSA_meth_get_verify(const RSA_METHOD*);
void PEM_dek_info( char*, const char*, int, const char*);
int feof(FILE*);
const BIGNUM* DSA_get0_pub_key(const DSA*);
int EVP_CIPHER_CTX_get_params(EVP_CIPHER_CTX*, OSSL_PARAM[]);
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ*, int, int);
const OCSP_CERTID* OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP*);
int SSL_CTX_add_client_custom_ext(SSL_CTX*, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void*, custom_ext_parse_cb, void*);
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST*, int, int);
int COMP_expand_block(COMP_CTX*, unsigned char*, int, unsigned char*, int);
unsigned long X509_issuer_name_hash(X509*);
unsigned long BN_mod_word(const BIGNUM*, unsigned long);
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL*);
NETSCAPE_SPKI* NETSCAPE_SPKI_b64_decode(const char*, int);
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO*, stack_st_X509_ATTRIBUTE*);
int ERR_load_COMP_strings();
void BIO_set_shutdown(BIO*, int);
int ENGINE_set_default_DH(ENGINE*);
int X509_STORE_set_default_paths_ex(X509_STORE*, OSSL_LIB_CTX*, const char*);
long long int strtoll_l(restrict const char*, restrict  char**, int, locale_t);
int ASN1_item_verify(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, EVP_PKEY*);
void BIO_meth_free(BIO_METHOD*);
void X509_NAME_free(X509_NAME*);
int EVP_PKEY_CTX_get_rsa_padding(EVP_PKEY_CTX*, int*);
int settimeofday(const timeval*, const timezone*);
void EVP_RAND_do_all_provided(OSSL_LIB_CTX*, void (EVP_RAND*, void*)*, void*);
long SSL_CTX_ctrl(SSL_CTX*, int, long, void*);
int DSA_print_fp(FILE*, const DSA*, int);
PKCS7* d2i_PKCS7(PKCS7**, const unsigned char**, long);
int setegid(__gid_t);
const char* OpenSSL_version(int);
int i2d_DISPLAYTEXT(const ASN1_STRING*, unsigned char**);
int i2d_EC_PUBKEY_bio(BIO*, const EC_KEY*);
OSSL_PARAM OSSL_PARAM_construct_utf8_ptr(const char*,  char**, size_t);
int OBJ_NAME_init();
unsigned int OPENSSL_version_patch();
const X509V3_EXT_METHOD* X509V3_EXT_get_nid(int);
EC_POINT* EC_POINT_hex2point(const EC_GROUP*, const char*, EC_POINT*, BN_CTX*);
void SSL_CTX_set_cookie_verify_cb(SSL_CTX*, int (SSL*, const unsigned char*, unsigned int)*);
int SSL_CTX_set_default_verify_file(SSL_CTX*);
EVP_PKEY* PEM_read_bio_PUBKEY(BIO*, EVP_PKEY**, pem_password_cb*, void*);
int ASN1_TIME_check(const ASN1_TIME*);
void ENGINE_register_all_pkey_meths();
void NETSCAPE_SPKI_free(NETSCAPE_SPKI*);
int pthread_mutexattr_getpshared(restrict const pthread_mutexattr_t*, restrict int*);
void SSL_CTX_set_record_padding_callback(SSL_CTX*, size_t (SSL*, int, size_t, void*)*);
void* ASN1_dup(i2d_of_void*, d2i_of_void*, const void*);
const PROFESSION_INFOS* ADMISSIONS_get0_professionInfos(const ADMISSIONS*);
int EVP_DigestSignInit_ex(EVP_MD_CTX*, EVP_PKEY_CTX**, const char*, OSSL_LIB_CTX*, const char*, EVP_PKEY*, const OSSL_PARAM[]);
X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(const X509_STORE_CTX*);
BIGNUM* BN_bin2bn(const unsigned char*, int, BIGNUM*);
int OCSP_REQUEST_print(BIO*, OCSP_REQUEST*, unsigned long);
void CTLOG_STORE_free(CTLOG_STORE*);
void SSL_CTX_set1_cert_store(SSL_CTX*, X509_STORE*);
int BN_mod_exp_recp(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509_REQ_sign(X509_REQ*, EVP_PKEY*, const EVP_MD*);
void X509_STORE_set_get_issuer(X509_STORE*, X509_STORE_CTX_get_issuer_fn);
void EVP_MD_CTX_set_flags(EVP_MD_CTX*, int);
int BN_print_fp(FILE*, const BIGNUM*);
X509_CRL* PEM_read_X509_CRL(FILE*, X509_CRL**, pem_password_cb*, void*);
int ASN1_TIME_set_string(ASN1_TIME*, const char*);
int SSL_srp_server_param_with_username(SSL*, int*);
void EVP_MD_do_all_sorted(void (const EVP_MD*, const char*, const char*, void*)*, void*);
void* memccpy(void*, const void*, int, unsigned long int);
const EVP_CIPHER* EVP_aria_192_cfb8();
int EVP_PKEY_verify_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
void ASN1_put_object(unsigned char**, int, int, int, int);
int pselect(int, restrict fd_set*, restrict fd_set*, restrict fd_set*, restrict const timespec*, restrict const __sigset_t*);
int ERR_get_next_error_library();
int utimensat(int, const char*, const timespec[2], int);
int pthread_spin_trylock(pthread_spinlock_t*);
int SSL_set_purpose(SSL*, int);
int X509_REQ_add_extensions_nid(X509_REQ*, const stack_st_X509_EXTENSION*, int);
int BN_check_prime(const BIGNUM*, BN_CTX*, BN_GENCB*);
int EVP_MD_CTX_reset(EVP_MD_CTX*);
int ENGINE_set_pkey_asn1_meths(ENGINE*, ENGINE_PKEY_ASN1_METHS_PTR);
int strcasecmp(const  char*, const  char*);
void X509_LOOKUP_free(X509_LOOKUP*);
OCSP_ONEREQ* d2i_OCSP_ONEREQ(OCSP_ONEREQ**, const unsigned char**, long);
int inet_net_pton(int, const char*, void*, size_t);
int BN_priv_rand_range(BIGNUM*, const BIGNUM*);
int ENGINE_set_cmd_defns(ENGINE*, const ENGINE_CMD_DEFN*);
OCSP_SINGLERESP* d2i_OCSP_SINGLERESP(OCSP_SINGLERESP**, const unsigned char**, long);
unsigned char* EC_GROUP_get0_seed(const EC_GROUP*);
BIO* BIO_new_ssl(SSL_CTX*, int);
int EVP_MD_meth_set_final(EVP_MD*, int (EVP_MD_CTX*, unsigned char*)*);
UI* UI_new_method(const UI_METHOD*);
size_t OPENSSL_strlcat( char*, const char*, size_t);
const char* EVP_MAC_get0_name(const EVP_MAC*);
void ERR_print_errors_cb(int (const char*, size_t, void*)*, void*);
int sigstack(sigstack*, sigstack*);
void SSL_CTX_set_tmp_dh_callback(SSL_CTX*, DH* (SSL*, int, int)*);
int X509_NAME_get_text_by_OBJ(const X509_NAME*, const ASN1_OBJECT*,  char*, int);
int X509_OBJECT_set1_X509(X509_OBJECT*, X509*);
int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER*, int);
int UI_dup_input_string(UI*, const char*, int,  char*, int, int);
ssize_t recv(int, void*, size_t, int);
int getservbyport_r(int, restrict const char*, restrict servent*, restrict  char*, size_t, restrict servent**);
void* CONF_module_get_usr_data(CONF_MODULE*);
EVP_PKEY* PEM_read_PrivateKey_ex(FILE*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void* CRYPTO_secure_zalloc(size_t, const char*, int);
unsigned long int strtoul_l(restrict const char*, restrict  char**, int, locale_t);
int i2d_X509(const X509*, unsigned char**);
const char* CONF_imodule_get_name(const CONF_IMODULE*);
int mallopt(int, int);
const ASN1_ITEM* USERNOTICE_it();
int pthread_mutex_unlock(pthread_mutex_t*);
int SSL_read_early_data(SSL*, void*, size_t, size_t*);
const DSA_METHOD* DSA_get_default_method();
int ftrylockfile(FILE*);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX*, unsigned long);
ASN1_OCTET_STRING* X509_get0_distinguishing_id(X509*);
GENERAL_NAME* v2i_GENERAL_NAME(const X509V3_EXT_METHOD*, X509V3_CTX*, CONF_VALUE*);
int BN_from_montgomery(BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY*, int, int, const unsigned char*, int);
int listen(int, int);
int X509_load_cert_file_ex(X509_LOOKUP*, const char*, int, OSSL_LIB_CTX*, const char*);
X509_EXTENSION* X509V3_EXT_conf_nid(lhash_st_CONF_VALUE*, X509V3_CTX*, int, const char*);
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM*, const X509_VERIFY_PARAM*);
const ASN1_ITEM* PKCS7_SIGNER_INFO_it();
void SSL_CTX_set_default_read_buffer_len(SSL_CTX*, size_t);
int X509_NAME_add_entry_by_txt(X509_NAME*, const char*, int, const unsigned char*, int, int, int);
int pthread_kill(pthread_t, int);
int OCSP_response_status(OCSP_RESPONSE*);
int gettimeofday(restrict timeval*, restrict void*);
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX*);
int i2d_PBEPARAM(const PBEPARAM*, unsigned char**);
IPAddressOrRange* IPAddressOrRange_new();
uint64_t SCT_get_timestamp(const SCT*);
int EC_KEY_check_key(const EC_KEY*);
const EVP_CIPHER* EVP_seed_cbc();
const BIGNUM* BN_get0_nist_prime_256();
const char* DSA_meth_get0_name(const DSA_METHOD*);
BIGNUM* BN_copy(BIGNUM*, const BIGNUM*);
int remap_file_pages(void*, size_t, int, size_t, int);
int DTLSv1_listen(SSL*, BIO_ADDR*);
int raise(int);
EC_KEY* EC_KEY_new_by_curve_name_ex(OSSL_LIB_CTX*, const char*, int);
PKCS7_ENVELOPE* PKCS7_ENVELOPE_new();
int RSA_blinding_on(RSA*, BN_CTX*);
int OBJ_ln2nid(const char*);
ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE*);
int pcre32_exec(const pcre32*, const pcre32_extra*, const unsigned int*, int, int, int, int*, int);
int PEM_ASN1_write_bio(i2d_of_void*, const char*, BIO*, const void*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
void* OPENSSL_LH_delete(OPENSSL_LHASH*, const void*);
OCSP_RESPONSE* d2i_OCSP_RESPONSE(OCSP_RESPONSE**, const unsigned char**, long);
int X509_set_ex_data(X509*, int, void*);
const ASN1_ITEM* X509_CINF_it();
int EVP_PKEY_print_params_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
GENERAL_NAME* v2i_GENERAL_NAME_ex(GENERAL_NAME*, const X509V3_EXT_METHOD*, X509V3_CTX*, CONF_VALUE*, int);
const EC_POINT* EC_GROUP_get0_generator(const EC_GROUP*);
char* strtok_r(restrict  char*, restrict const char*, restrict  char**);
int ASN1_object_size(int, int, int);
int alphasort(const dirent**, const dirent**);
int SSL_get_error(const SSL*, int);
X509_CRL* d2i_X509_CRL_bio(BIO*, X509_CRL**);
int EVP_EncryptInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*);
X509_CERT_AUX* X509_CERT_AUX_new();
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX*, int, int, int);
const OSSL_PARAM* EVP_KEYEXCH_settable_ctx_params(const EVP_KEYEXCH*);
const ASN1_ITEM* ASN1_UNIVERSALSTRING_it();
int SSL_check_chain(SSL*, X509*, EVP_PKEY*, stack_st_X509*);
int EVP_PKEY_export(const EVP_PKEY*, int, OSSL_CALLBACK*, void*);
int ASN1_TIME_compare(const ASN1_TIME*, const ASN1_TIME*);
const SSL_METHOD* TLSv1_1_method();
int random_r(restrict random_data*, restrict int32_t*);
ENGINE* DSA_get0_engine(DSA*);
const EVP_CIPHER* EVP_camellia_256_ecb();
int posix_openpt(int);
int SSL_set_session_secret_cb(SSL*, tls_session_secret_cb_fn, void*);
const EVP_MD* EVP_sha512();
ASN1_INTEGER* d2i_ASN1_UINTEGER(ASN1_INTEGER**, const unsigned char**, long);
X509_LOOKUP* X509_STORE_add_lookup(X509_STORE*, X509_LOOKUP_METHOD*);
int EVP_add_cipher(const EVP_CIPHER*);
EC_KEY* d2i_ECPrivateKey_fp(FILE*, EC_KEY**);
int RSA_padding_add_PKCS1_PSS_mgf1(RSA*, unsigned char*, const unsigned char*, const EVP_MD*, const EVP_MD*, int);
OPENSSL_STACK* OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc, int);
int ERR_load_TS_strings();
void OSSL_PARAM_free(OSSL_PARAM*);
int SSL_CTX_set_session_id_context(SSL_CTX*, const unsigned char*, unsigned int);
void OBJ_NAME_cleanup(int);
X509* X509_find_by_subject(stack_st_X509*, const X509_NAME*);
void ASN1_TIME_free(ASN1_TIME*);
X509* SSL_CTX_get0_certificate(const SSL_CTX*);
int EVP_PKEY_public_check_quick(EVP_PKEY_CTX*);
USERNOTICE* d2i_USERNOTICE(USERNOTICE**, const unsigned char**, long);
int X509_load_cert_crl_file_ex(X509_LOOKUP*, const char*, int, OSSL_LIB_CTX*, const char*);
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY**, const char*, int, const unsigned char*, int);
EVP_PKEY* d2i_PrivateKey_fp(FILE*, EVP_PKEY**);
int EVP_CIPHER_CTX_get_original_iv(EVP_CIPHER_CTX*, void*, size_t);
int BIO_ssl_copy_session_id(BIO*, BIO*);
int SSL_CTX_load_verify_store(SSL_CTX*, const char*);
const EC_METHOD* EC_GF2m_simple_method();
int ASN1_INTEGER_set_int64(ASN1_INTEGER*, int64_t);
int ERR_load_BN_strings();
void BIO_set_callback(BIO*, BIO_callback_fn);
void OCSP_CERTID_free(OCSP_CERTID*);
int getgrent_r(restrict group*, restrict  char*, size_t, restrict group**);
int EVP_OpenFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int ERR_load_ASN1_strings();
void X509_STORE_set_check_issued(X509_STORE*, X509_STORE_CTX_check_issued_fn);
X509_ATTRIBUTE* X509_REQ_get_attr(const X509_REQ*, int);
EVP_PKEY* EVP_PKEY_new_mac_key(int, ENGINE*, const unsigned char*, int);
int PEM_get_EVP_CIPHER_INFO( char*, EVP_CIPHER_INFO*);
EVP_PKEY* EVP_PKEY_Q_keygen(OSSL_LIB_CTX*, const char*, const char*);
int pcre16_get_substring_list(const unsigned short*, int*, int, const unsigned short***);
const ASN1_OCTET_STRING* X509_get0_authority_key_id(X509*);
int fcntl(int, int);
int SSL_CTX_set_srp_username_callback(SSL_CTX*, int (SSL*, int*, void*)*);
int PEM_write_PUBKEY(FILE*, const EVP_PKEY*);
int X509_REQ_digest(const X509_REQ*, const EVP_MD*, unsigned char*, unsigned int*);
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(EVP_PKEY_CTX*, const char*);
int lockf64(int, int, __off64_t);
void X509V3_set_nconf(X509V3_CTX*, CONF*);
ASN1_TYPE* PKCS7_get_signed_attribute(const PKCS7_SIGNER_INFO*, int);
const EVP_CIPHER* EVP_aria_128_cfb128();
int EVP_PKEY_sign_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX*, const unsigned char*, long);
int X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int readdir_r(restrict DIR*, restrict dirent*, restrict dirent**);
int SSL_set_cipher_list(SSL*, const char*);
int bindresvport6(int, sockaddr_in6*);
void* aligned_alloc(unsigned long int, unsigned long int);
int i2d_EXTENDED_KEY_USAGE(const EXTENDED_KEY_USAGE*, unsigned char**);
FILE* fopen(const  char*, const  char*);
unsigned long SSL_CTX_dane_set_flags(SSL_CTX*, unsigned long);
void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)*);
OSSL_provider_init_fnOSSL_provider_init;
int X509v3_addr_validate_resource_set(stack_st_X509*, IPAddrBlocks*, int);
int puts(const char*);
void SSL_CTX_set_info_callback(SSL_CTX*, void (const SSL*, int, int)*);
int (UI*)* UI_method_get_opener(const UI_METHOD*);
const BIO_METHOD* BIO_f_null();
stack_st_CONF_VALUE* i2v_GENERAL_NAME(X509V3_EXT_METHOD*, GENERAL_NAME*, stack_st_CONF_VALUE*);
int dup2(int, int);
void EVP_PKEY_meth_set_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
int timer_settime(timer_t, int, restrict const itimerspec*, restrict itimerspec*);
char* ctime_r(restrict const time_t*, restrict  char*);
const ASN1_OCTET_STRING* PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO*);
int nanosleep(const timespec*, timespec*);
OSSL_PROVIDER* EVP_ASYM_CIPHER_get0_provider(const EVP_ASYM_CIPHER*);
void X509_reject_clear(X509*);
void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING*);
PKCS7_SIGNED* PKCS7_SIGNED_new();
const char* EVP_KEYMGMT_get0_name(const EVP_KEYMGMT*);
int PEM_write_bio(BIO*, const char*, const char*, const unsigned char*, long);
OPENSSL_STACK* OPENSSL_sk_deep_copy(const OPENSSL_STACK*, OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc);
char* CONF_get_string(lhash_st_CONF_VALUE*, const char*, const char*);
NETSCAPE_SPKAC* NETSCAPE_SPKAC_new();
int X509_REVOKED_get_ext_by_critical(const X509_REVOKED*, int, int);
int SSL_client_hello_get0_ext(SSL*, unsigned int, const unsigned char**, size_t*);
int X509_digest(const X509*, const EVP_MD*, unsigned char*, unsigned int*);
void X509_STORE_set_check_policy(X509_STORE*, X509_STORE_CTX_check_policy_fn);
const EVP_MD* EVP_shake256();
int fgetc(FILE*);
unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX*);
void RSA_PSS_PARAMS_free(RSA_PSS_PARAMS*);
int NETSCAPE_SPKI_print(BIO*, NETSCAPE_SPKI*);
int i2d_X509_PUBKEY(const X509_PUBKEY*, unsigned char**);
char* SSL_get_srp_username(SSL*);
int PKCS7_set0_type_other(PKCS7*, int, ASN1_TYPE*);
ssize_t pwritev64v2(int, const iovec*, int, __off64_t, int);
char* crypt_gensalt_r(const char*, unsigned long, const char*, int,  char*, int);
tm* localtime_r(restrict const time_t*, restrict tm*);
OCSP_SIGNATURE* OCSP_SIGNATURE_new();
int ruserok_af(const char*, int, const char*, const char*, sa_family_t);
RSA* d2i_RSAPublicKey_fp(FILE*, RSA**);
const EVP_MD* EVP_ripemd160();
const SSL_METHOD* DTLSv1_2_server_method();
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const X509_PUBKEY*)*, int (X509_PUBKEY*, const EVP_PKEY*)*, int (const EVP_PKEY*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*, int (const EVP_PKEY*)*, int (const EVP_PKEY*)*);
SSL_SESSION* SSL_get_session(const SSL*);
int SSL_CONF_CTX_finish(SSL_CONF_CTX*);
int i2d_re_X509_CRL_tbs(X509_CRL*, unsigned char**);
EC_KEY* EC_KEY_new_method(ENGINE*);
const DSA_METHOD* DSA_get_method(DSA*);
int SSL_free_buffers(SSL*);
int X509_STORE_set_ex_data(X509_STORE*, int, void*);
unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH*);
void* OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST*, int, int*, int*);
BIO* OSSL_HTTP_REQ_CTX_exchange(OSSL_HTTP_REQ_CTX*);
int EVP_PKEY_CTX_set_rsa_keygen_primes(EVP_PKEY_CTX*, int);
void X509V3_set_conf_lhash(X509V3_CTX*, lhash_st_CONF_VALUE*);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_priv_enc(const RSA_METHOD*);
__sighandler_t sysv_signal(int, __sighandler_t);
uLong adler32_z(uLong, const Bytef*, z_size_t);
BIGNUM* BN_secure_new();
void ENGINE_register_all_ciphers();
const ASN1_ITEM* PROXY_POLICY_it();
void _Exit(int);
int pthread_tryjoin_np(pthread_t, void**);
int EVP_PKEY_asn1_get0_info(int*, int*, int*, const char**, const char**, const EVP_PKEY_ASN1_METHOD*);
int EVP_PKEY_type(int);
int i2d_RSAPrivateKey(const RSA*, unsigned char**);
int SSL_CTX_get_verify_mode(const SSL_CTX*);
int EVP_DecryptUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
void EVP_SIGNATURE_free(EVP_SIGNATURE*);
const ASN1_ITEM* PBEPARAM_it();
int RSA_public_encrypt(int, const unsigned char*, unsigned char*, RSA*, int);
const BIO_METHOD* BIO_f_linebuffer();
const char* UI_get0_action_string(UI_STRING*);
int i2t_ASN1_OBJECT( char*, int, const ASN1_OBJECT*);
void X509_ATTRIBUTE_free(X509_ATTRIBUTE*);
int RAND_bytes(unsigned char*, int);
int ASN1_STRING_copy(ASN1_STRING*, const ASN1_STRING*);
int EVP_PKEY_CTX_get_rsa_mgf1_md(EVP_PKEY_CTX*, const EVP_MD**);
int X509_REQ_sign_ctx(X509_REQ*, EVP_MD_CTX*);
int GENERAL_NAME_cmp(GENERAL_NAME*, GENERAL_NAME*);
int prctl(int);
int X509_STORE_load_file(X509_STORE*, const char*);
EVP_PKEY* d2i_PublicKey(int, EVP_PKEY**, const unsigned char**, long);
size_t OBJ_length(const ASN1_OBJECT*);
int UI_method_set_ex_data(UI_METHOD*, int, void*);
const EVP_CIPHER* EVP_bf_ofb();
void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int (unsigned char*, const BIGNUM*, DH*)* DH_meth_get_compute_key(const DH_METHOD*);
int EC_GROUP_set_generator(EC_GROUP*, const EC_POINT*, const BIGNUM*, const BIGNUM*);
int pthread_spin_lock(pthread_spinlock_t*);
OCSP_CERTID* OCSP_CERTID_new();
const stack_st_X509_ATTRIBUTE* PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO*);
int ASN1_check_infinite_end(unsigned char**, long);
int pthread_rwlock_tryrdlock(pthread_rwlock_t*);
int pthread_attr_destroy(pthread_attr_t*);
int X509_check_ip_asc(X509*, const char*, unsigned int);
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX*, int (SSL*, void*)*);
const EC_METHOD* EC_GFp_nistp521_method();
const ASN1_ITEM* ASN1_BMPSTRING_it();
void X509_SIG_get0(const X509_SIG*, const X509_ALGOR**, const ASN1_OCTET_STRING**);
int i2d_ASN1_SEQUENCE_ANY(const ASN1_SEQUENCE_ANY*, unsigned char**);
const COMP_METHOD* SSL_get_current_compression(const SSL*);
int mknod(const char*, __mode_t, __dev_t);
int X509_NAME_add_entry_by_OBJ(X509_NAME*, const ASN1_OBJECT*, int, const unsigned char*, int, int, int);
int EVP_CIPHER_get_mode(const EVP_CIPHER*);
int EC_METHOD_get_field_type(const EC_METHOD*);
ssize_t pread64(int, void*, size_t, __off64_t);
int BN_nist_mod_521(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
_Float32x strtof32x(restrict const char*, restrict  char**);
unsigned long ERR_peek_last_error_line(const char**, int*);
int X509v3_addr_add_inherit(IPAddrBlocks*, const unsigned, const unsigned*);
ERR_STATE* ERR_get_state();
int ENGINE_load_ssl_client_cert(ENGINE*, SSL*, stack_st_X509_NAME*, X509**, EVP_PKEY**, stack_st_X509**, UI_METHOD*, void*);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD*);
int RSA_padding_add_PKCS1_PSS(RSA*, unsigned char*, const unsigned char*, const EVP_MD*, int);
int (BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*)* BN_nist_mod_func(const BIGNUM*);
int shutdown(int, int);
int BN_bn2nativepad(const BIGNUM*, unsigned char*, int);
int ENGINE_cmd_is_executable(ENGINE*, int);
int EVP_MD_up_ref(EVP_MD*);
ASN1_TIME* X509_time_adj_ex(ASN1_TIME*, int, long, time_t*);
int sigpending(sigset_t*);
void SCRYPT_PARAMS_free(SCRYPT_PARAMS*);
int rcmd(restrict  char**, unsigned short int, restrict const char*, restrict const char*, restrict const char*, restrict int*);
int pthread_timedjoin_np(pthread_t, void**, const timespec*);
void PBEPARAM_free(PBEPARAM*);
int EVP_default_properties_enable_fips(OSSL_LIB_CTX*, int);
void setnetent(int);
int OCSP_resp_get1_id(const OCSP_BASICRESP*, ASN1_OCTET_STRING**, X509_NAME**);
ECPARAMETERS* ECPARAMETERS_new();
int getpwnam_r(restrict const char*, restrict passwd*, restrict  char*, size_t, restrict passwd**);
ASN1_OCTET_STRING* s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
int ASN1_TIME_diff(int*, int*, const ASN1_TIME*, const ASN1_TIME*);
int i2d_PublicKey(const EVP_PKEY*, unsigned char**);
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO_bio(BIO*, PKCS8_PRIV_KEY_INFO**);
size_t SSL_client_hello_get0_ciphers(SSL*, const unsigned char**);
EVP_PKEY* d2i_KeyParams_bio(int, EVP_PKEY**, BIO*);
void EVP_MD_meth_free(EVP_MD*);
X509_EXTENSION* X509_get_ext(const X509*, int);
void X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX*, stack_st_X509*);
void bcopy(const void*, void*, size_t);
int EVP_MAC_finalXOF(EVP_MAC_CTX*, unsigned char*, size_t);
int EVP_CIPHER_meth_set_cleanup(EVP_CIPHER*, int (EVP_CIPHER_CTX*)*);
int PKCS7_stream(unsigned char***, PKCS7*);
void* X509_REVOKED_get_ext_d2i(const X509_REVOKED*, int, int*, int*);
int i2d_ASN1_BIT_STRING(const ASN1_BIT_STRING*, unsigned char**);
int i2d_ISSUING_DIST_POINT(const ISSUING_DIST_POINT*, unsigned char**);
RSA* PEM_read_RSA_PUBKEY(FILE*, RSA**, pem_password_cb*, void*);
int BIO_dump_cb(int (const void*, size_t, void*)*, void*, const void*, int);
EC_KEY* o2i_ECPublicKey(EC_KEY**, const unsigned char**, long);
void X509_ALGOR_get0(const ASN1_OBJECT**, int*, const void**, const X509_ALGOR*);
int fclose(FILE*);
int SSL_add_store_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
const char* SSL_rstate_string(const SSL*);
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL*, const EVP_MD*, unsigned char*, unsigned int*);
const EC_KEY_METHOD* EC_KEY_get_default_method();
int (EVP_MD_CTX*, const void*, size_t)* EVP_MD_meth_get_update(const EVP_MD*);
int EC_POINT_is_at_infinity(const EC_GROUP*, const EC_POINT*);
X509_ATTRIBUTE* X509_ATTRIBUTE_dup(const X509_ATTRIBUTE*);
void ERR_add_error_vdata(int, va_list);
void DIRECTORYSTRING_free(ASN1_STRING*);
int EVP_MAC_is_a(const EVP_MAC*, const char*);
void pcre32_assign_jit_stack(pcre32_extra*, pcre32_jit_callback, void*);
int i2d_NETSCAPE_SPKAC(const NETSCAPE_SPKAC*, unsigned char**);
const ASN1_ITEM* ASN1_T61STRING_it();
int EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER*, int (EVP_CIPHER_CTX*, ASN1_TYPE*)*);
const BIO_METHOD* BIO_s_socket();
int EVP_PKEY_CTX_is_a(EVP_PKEY_CTX*, const char*);
int gzvprintf(gzFile, const char*, va_list);
int RSA_get0_multi_prime_crt_params(const RSA*, const BIGNUM*[], const BIGNUM*[]);
void RSA_clear_flags(RSA*, int);
const ASN1_ITEM* DHparams_it();
void X509V3_set_ctx(X509V3_CTX*, X509*, X509*, X509_REQ*, X509_CRL*, int);
int i2d_DSA_SIG(const DSA_SIG*, unsigned char**);
void endnetent();
PKCS7_ENC_CONTENT* d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT**, const unsigned char**, long);
X509_EXTENSION* X509_REVOKED_get_ext(const X509_REVOKED*, int);
int pthread_yield();
ENGINE* EVP_PKEY_get0_engine(const EVP_PKEY*);
int getpt();
const EVP_MD* EVP_sha3_384();
const EVP_CIPHER* EVP_aes_128_ecb();
int mkfifoat(int, const char*, __mode_t);
int sprintf( char*, const  char*);
void* ASN1_item_dup(const ASN1_ITEM*, const void*);
int COMP_CTX_get_type(const COMP_CTX*);
int vsprintf( char*, const  char*, __va_list_tag*);
void* X509_get_ex_data(const X509*, int);
const ASN1_ITEM* DISPLAYTEXT_it();
ssize_t write(int, const void*, size_t);
BIO* ASN1_item_i2d_mem_bio(const ASN1_ITEM*, const ASN1_VALUE*);
int fstatat64(int, restrict const char*, restrict stat64*, int);
int RAND_priv_bytes_ex(OSSL_LIB_CTX*, unsigned char*, size_t, unsigned int);
int OPENSSL_gmtime_diff(int*, int*, const tm*, const tm*);
X509_NAME* X509_NAME_dup(const X509_NAME*);
int BN_bn2binpad(const BIGNUM*, unsigned char*, int);
ENGINE* ENGINE_get_default_DH();
int PKCS8_pkey_add1_attr(PKCS8_PRIV_KEY_INFO*, X509_ATTRIBUTE*);
long X509_get_version(const X509*);
int SSL_set_record_padding_callback(SSL*, size_t (SSL*, int, size_t, void*)*);
void X509V3_EXT_val_prn(BIO*, stack_st_CONF_VALUE*, int, int);
int a2d_ASN1_OBJECT(unsigned char*, int, const char*, int);
int pcre32_get_stringnumber(const pcre32*, const unsigned int*);
void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**, int (EVP_PKEY_CTX*, const unsigned char*, int, EVP_MD_CTX*)**);
int DH_meth_set_generate_params(DH_METHOD*, int (DH*, int, int, BN_GENCB*)*);
int truncate64(const char*, __off64_t);
int i2d_CRL_DIST_POINTS(const CRL_DIST_POINTS*, unsigned char**);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX*);
int glob(restrict const char*, int, int (const char*, int)*, restrict glob_t*);
const char* EVP_MD_get0_description(const EVP_MD*);
void EC_GROUP_set_curve_name(EC_GROUP*, int);
hostent* BIO_gethostbyname(const char*);
int CRYPTO_secure_allocated(const void*);
UI_string_types UI_get_string_type(UI_STRING*);
PBEPARAM* PBEPARAM_new();
int ERR_load_X509_strings();
OCSP_CERTSTATUS* OCSP_CERTSTATUS_new();
int EVP_MAC_get_params(EVP_MAC*, OSSL_PARAM[]);
int SHA224_Init(SHA256_CTX*);
void* calloc(unsigned long int, unsigned long int);
int i2d_NAMING_AUTHORITY(const NAMING_AUTHORITY*, unsigned char**);
int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX*);
void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING*);
unsigned long X509_subject_name_hash_old(X509*);
char* qecvt(long double, int, restrict int*, restrict int*);
int SSL_ct_is_enabled(const SSL*);
const RAND_METHOD* RAND_get_rand_method();
int DH_meth_set0_app_data(DH_METHOD*, void*);
int lchown(const char*, __uid_t, __gid_t);
void* GENERAL_NAME_get0_value(const GENERAL_NAME*, int*);
void SSL_set_info_callback(SSL*, void (const SSL*, int, int)*);
int UI_get_result_maxsize(UI_STRING*);
void ASN1_UTCTIME_free(ASN1_UTCTIME*);
const ASN1_ITEM* PKCS8_PRIV_KEY_INFO_it();
ASN1_GENERALIZEDTIME* ASN1_TIME_to_generalizedtime(const ASN1_TIME*, ASN1_GENERALIZEDTIME**);
int RSA_verify_ASN1_OCTET_STRING(int, const unsigned char*, unsigned int, unsigned char*, unsigned int, RSA*);
stack_st_X509* PKCS7_get0_signers(PKCS7*, stack_st_X509*, int);
void ERR_print_errors_fp(FILE*);
void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, const EVP_PKEY_CTX*)*);
int BN_is_prime_fasttest_ex(const BIGNUM*, int, BN_CTX*, int, BN_GENCB*);
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO*);
int getnetbyname_r(restrict const char*, restrict netent*, restrict  char*, size_t, restrict netent**, restrict int*);
int __libc_current_sigrtmin();
int X509_set1_notAfter(X509*, const ASN1_TIME*);
int EVP_RAND_generate(EVP_RAND_CTX*, unsigned char*, size_t, unsigned int, int, const unsigned char*, size_t);
void* CRYPTO_get_ex_data(const CRYPTO_EX_DATA*, int);
int UI_method_set_writer(UI_METHOD*, int (UI*, UI_STRING*)*);
int X509_REVOKED_get_ext_count(const X509_REVOKED*);
void* EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX*);
char* crypt_gensalt_rn(const char*, unsigned long, const char*, int,  char*, int);
int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX*, const EVP_CIPHER_CTX*);
int inflateGetHeader(z_streamp, gz_headerp);
int vfscanf(restrict FILE*, restrict const  char*, __va_list_tag*);
int strfromf( char*, size_t, const char*, float);
void CONF_modules_finish();
int getpagesize();
FILE* tmpfile();
int DH_meth_set1_name(DH_METHOD*, const char*);
const char* SSL_COMP_get0_name(const SSL_COMP*);
int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING*, int);
void* rawmemchr(const void*, int);
int sched_getscheduler(__pid_t);
int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED*, const ASN1_OBJECT*, int);
char* i2s_ASN1_INTEGER(X509V3_EXT_METHOD*, const ASN1_INTEGER*);
int EVP_RAND_get_params(EVP_RAND*, OSSL_PARAM[]);
int pthread_mutexattr_gettype(restrict const pthread_mutexattr_t*, restrict int*);
ASIdOrRange* ASIdOrRange_new();
int UI_set_result(UI*, UI_STRING*, const char*);
int pcre_get_stringtable_entries(const pcre*, const char*,  char**,  char**);
int X509_STORE_add_crl(X509_STORE*, X509_CRL*);
int EVP_SIGNATURE_names_do_all(const EVP_SIGNATURE*, void (const char*, void*)*, void*);
ssize_t preadv2(int, const iovec*, int, __off64_t, int);
int fgetpwent_r(restrict FILE*, restrict passwd*, restrict  char*, size_t, restrict passwd**);
int EVP_PKEY_CTX_set_group_name(EVP_PKEY_CTX*, const char*);
int SSL_set_alpn_protos(SSL*, const unsigned char*, unsigned int);
int snprintf( char*, unsigned long int, const  char*);
int DH_generate_parameters_ex(DH*, int, int, BN_GENCB*);
int SSL_CONF_cmd_value_type(SSL_CONF_CTX*, const char*);
void lcong48(unsigned short int[7]);
void EVP_CIPHER_do_all_sorted(void (const EVP_CIPHER*, const char*, const char*, void*)*, void*);
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char*, int, const unsigned char*, int, const unsigned char*, int, const EVP_MD*, const EVP_MD*);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
int DH_size(const DH*);
BIO* BIO_find_type(BIO*, int);
X509_ALGOR* PKCS5_pbe2_set(const EVP_CIPHER*, int, unsigned char*, int);
int eaccess(const char*, int);
int SSL_set_ct_validation_callback(SSL*, ssl_ct_validation_cb, void*);
int BN_rand(BIGNUM*, int, int, int);
int EVP_DigestSignFinal(EVP_MD_CTX*, unsigned char*, size_t*);
int OSSL_HTTP_is_alive(const OSSL_HTTP_REQ_CTX*);
const ASN1_TIME* X509_CRL_get0_nextUpdate(const X509_CRL*);
void ERR_print_errors(BIO*);
ASN1_OCTET_STRING* d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING**, const unsigned char**, long);
void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX*);
int scandir(restrict const char*, restrict dirent***, int (const dirent*)*, int (const dirent**, const dirent**)*);
int OPENSSL_LH_error(OPENSSL_LHASH*);
unsigned long ERR_peek_error_line(const char**, int*);
const DH_METHOD* DH_OpenSSL();
int strfromf64x( char*, size_t, const char*, _Float64x);
int mknodat(int, const char*, __mode_t, __dev_t);
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM*, int);
const EVP_CIPHER* EVP_aes_192_wrap_pad();
int pthread_attr_init(pthread_attr_t*);
pcre16* pcre16_compile(const unsigned short*, int, const char**, int*, const unsigned char*);
RSA* RSAPrivateKey_dup(const RSA*);
int PKCS7_add_attribute(PKCS7_SIGNER_INFO*, int, int, void*);
void ERR_vset_error(int, int, const char*, va_list);
int BN_rand_range_ex(BIGNUM*, const BIGNUM*, unsigned int, BN_CTX*);
EVP_CIPHER* EVP_CIPHER_meth_dup(const EVP_CIPHER*);
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI*, EVP_PKEY*, const EVP_MD*);
int BN_num_bits(const BIGNUM*);
int clock_gettime(clockid_t, timespec*);
const OSSL_PARAM* EVP_SIGNATURE_gettable_ctx_params(const EVP_SIGNATURE*);
char* ctime(const time_t*);
const UI_METHOD* UI_null();
int RSA_set_ex_data(RSA*, int, void*);
EVP_PKEY* b2i_PublicKey_bio(BIO*);
int BN_security_bits(int, int);
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX*, SSL_CTX*);
int UI_ctrl(UI*, int, long, void*, void ()*);
const void* OBJ_bsearch_(const void*, const void*, int, int, int (const void*, const void*)*);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX*, SSL_CTX_npn_select_cb_func, void*);
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE*);
long int mrand48();
void X509_STORE_set_cert_crl(X509_STORE*, X509_STORE_CTX_cert_crl_fn);
int EVP_PKEY_set_octet_string_param(EVP_PKEY*, const char*, const unsigned char*, size_t);
int pthread_mutex_getprioceiling(restrict const pthread_mutex_t*, restrict int*);
int pcre32_get_substring(const unsigned int*, int*, int, int, const unsigned int**);
const char* OCSP_cert_status_str(long);
int SSL_CTX_get_security_level(const SSL_CTX*);
const GENERAL_NAME* ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX*);
int X509_TRUST_add(int, int, int (X509_TRUST*, X509*, int)*, const char*, int, void*);
EXTENDED_KEY_USAGE* d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE**, const unsigned char**, long);
const EVP_MD* EVP_blake2b512();
OSSL_PARAM OSSL_PARAM_construct_uint32(const char*, uint32_t*);
CONF_METHOD* NCONF_WIN32();
void POLICY_MAPPING_free(POLICY_MAPPING*);
int SSL_verify_client_post_handshake(SSL*);
const char* pcre_version();
int RAND_priv_bytes(unsigned char*, int);
int SMIME_text(BIO*, BIO*);
char* secure_getenv(const char*);
int BN_GF2m_mod_mul_arr(BIGNUM*, const BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
int mkostemps64( char*, int, int);
ASN1_BIT_STRING* v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD*, X509V3_CTX*, stack_st_CONF_VALUE*);
int SCT_LIST_validate(const stack_st_SCT*, CT_POLICY_EVAL_CTX*);
X509_PUBKEY* PEM_read_X509_PUBKEY(FILE*, X509_PUBKEY**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_des_ede3_cfb64();
ASN1_INTEGER* s2i_ASN1_INTEGER(X509V3_EXT_METHOD*, const char*);
int pthread_sigqueue(pthread_t, int, const sigval);
int fcloseall();
int getnetgrent_r(restrict  char**, restrict  char**, restrict  char**, restrict  char*, size_t);
int i2d_X509_EXTENSIONS(const X509_EXTENSIONS*, unsigned char**);
int pthread_mutex_consistent_np(pthread_mutex_t*);
int EVP_PKEY_todata(const EVP_PKEY*, int, OSSL_PARAM**);
int EVP_PKEY_print_params(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
const ASN1_ITEM* PKCS7_RECIP_INFO_it();
unsigned long ERR_get_error_all(const char**, int*, const char**, const char**, int*);
const EVP_CIPHER* EVP_aria_256_cfb128();
int X509_aux_print(BIO*, X509*, int);
int BN_priv_rand_ex(BIGNUM*, int, int, int, unsigned int, BN_CTX*);
size_t OSSL_HTTP_REQ_CTX_get_resp_len(const OSSL_HTTP_REQ_CTX*);
int X509_get_signature_nid(const X509*);
ASN1_STRING* d2i_DISPLAYTEXT(ASN1_STRING**, const unsigned char**, long);
char* strtok( char*, const  char*);
const ASN1_TEMPLATE* ASN1_SCTX_get_template(ASN1_SCTX*);
unsigned long ERR_peek_error_line_data(const char**, int*, const char**, int*);
const BIGNUM* DSA_get0_g(const DSA*);
const ASN1_IA5STRING* NAMING_AUTHORITY_get0_authorityURL(const NAMING_AUTHORITY*);
double strtod(const  char*,  char**);
CT_POLICY_EVAL_CTX* CT_POLICY_EVAL_CTX_new_ex(OSSL_LIB_CTX*, const char*);
int putgrent(restrict const group*, restrict FILE*);
int BN_div_recp(BIGNUM*, BIGNUM*, const BIGNUM*, BN_RECP_CTX*, BN_CTX*);
int fchown(int, __uid_t, __gid_t);
int DH_set_method(DH*, const DH_METHOD*);
int PKCS5_pbe_set0_algor(X509_ALGOR*, int, int, const unsigned char*, int);
int i2d_ASN1_TIME(const ASN1_TIME*, unsigned char**);
X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(const X509_STORE*);
char* X509_VERIFY_PARAM_get0_peername(const X509_VERIFY_PARAM*);
int sigisemptyset(const sigset_t*);
int SSL_add_file_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
int EVP_PKEY_print_public_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
long SSL_get_default_timeout(const SSL*);
BIGNUM* SSL_get_srp_N(SSL*);
DSA* PEM_read_DSA_PUBKEY(FILE*, DSA**, pem_password_cb*, void*);
int strfromd( char*, size_t, const char*, double);
int EVP_DigestVerify(EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t);
int ASN1_TIME_cmp_time_t(const ASN1_TIME*, time_t);
const BIO_METHOD* BIO_f_cipher();
EC_POINT* EC_POINT_dup(const EC_POINT*, const EC_GROUP*);
const char* SSL_get0_peername(SSL*);
_Float128 strtof128_l(restrict const char*, restrict  char**, locale_t);
long int strtol(const  char*,  char**, int);
const BIGNUM* DSA_get0_q(const DSA*);
void X509_REQ_set0_signature(X509_REQ*, ASN1_BIT_STRING*);
int ASN1_INTEGER_cmp(const ASN1_INTEGER*, const ASN1_INTEGER*);
int UI_add_verify_string(UI*, const char*, int,  char*, int, int, const char*);
int BIO_get_line(BIO*,  char*, int);
X509_CINF* d2i_X509_CINF(X509_CINF**, const unsigned char**, long);
const char* EC_curve_nid2nist(int);
OSSL_LIB_CTX* EVP_PKEY_CTX_get0_libctx(EVP_PKEY_CTX*);
unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX*);
int EVP_PKEY_get_attr_count(const EVP_PKEY*);
const char* ASN1_tag2str(int);
int revoke(const char*);
int EVP_MAC_up_ref(EVP_MAC*);
int BN_GENCB_call(BN_GENCB*, int, int);
int ASYNC_WAIT_CTX_set_callback(ASYNC_WAIT_CTX*, ASYNC_callback_fn, void*);
long X509_get_proxy_pathlen(X509*);
int ENGINE_set_ctrl_function(ENGINE*, ENGINE_CTRL_FUNC_PTR);
int ENGINE_set_pkey_meths(ENGINE*, ENGINE_PKEY_METHS_PTR);
int BIO_get_accept_socket( char*, int);
void SSL_CTX_set_stateless_cookie_verify_cb(SSL_CTX*, int (SSL*, const unsigned char*, size_t)*);
POLICY_MAPPING* POLICY_MAPPING_new();
int vhangup();
BIGNUM* BN_generate_prime(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, void (int, int, void*)*, void*);
stack_st_CONF_VALUE* CONF_get_section(lhash_st_CONF_VALUE*, const char*);
void BN_GENCB_free(BN_GENCB*);
int UI_set_ex_data(UI*, int, void*);
int epoll_create(int);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX*, X509_STORE_CTX_verify_cb);
const ASN1_ITEM* ASN1_GENERALIZEDTIME_it();
int PEM_write_X509_CRL(FILE*, const X509_CRL*);
int X509_CRL_print_fp(FILE*, X509_CRL*);
int BIO_vsnprintf( char*, size_t, const char*, va_list);
int i2d_ASN1_PRINTABLE(const ASN1_STRING*, unsigned char**);
const char* OSSL_HTTP_adapt_proxy(const char*, const char*, const char*, int);
int BN_BLINDING_invert(BIGNUM*, BN_BLINDING*, BN_CTX*);
int EVP_MD_meth_set_ctrl(EVP_MD*, int (EVP_MD_CTX*, int, int, void*)*);
int strcoll(const char*, const char*);
int (RSA*, int, int, BIGNUM*, BN_GENCB*)* RSA_meth_get_multi_prime_keygen(const RSA_METHOD*);
void* ENGINE_get_static_state();
uint64_t SSL_CTX_get_options(const SSL_CTX*);
int EC_GROUP_cmp(const EC_GROUP*, const EC_GROUP*, BN_CTX*);
int SSL_get0_dane_authority(SSL*, X509**, EVP_PKEY**);
uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION*);
void PROFESSION_INFO_set0_professionItems(PROFESSION_INFO*, stack_st_ASN1_STRING*);
void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
char* canonicalize_file_name(const char*);
void X509V3_string_free(X509V3_CTX*,  char*);
X509_CRL* X509_CRL_new();
void EVP_KEYEXCH_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEYEXCH*, void*)*, void*);
int pause();
lhash_st_SSL_SESSION* SSL_CTX_sessions(SSL_CTX*);
PKCS7* PKCS7_new_ex(OSSL_LIB_CTX*, const char*);
ASN1_UTCTIME* ASN1_UTCTIME_new();
int i2d_ASN1_UTCTIME(const ASN1_UTCTIME*, unsigned char**);
int SSL_use_certificate_ASN1(SSL*, const unsigned char*, int);
const EVP_MD* EVP_md5_sha1();
const ASN1_ITEM* ADMISSION_SYNTAX_it();
int pthread_mutexattr_settype(pthread_mutexattr_t*, int);
X509_NAME_ENTRY* X509_NAME_get_entry(const X509_NAME*, int);
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ*, X509_EXTENSION*, int);
void ASN1_SCTX_free(ASN1_SCTX*);
const ASN1_ITEM* OCSP_CRLID_it();
const SSL_METHOD* SSL_get_ssl_method(const SSL*);
EDIPARTYNAME* d2i_EDIPARTYNAME(EDIPARTYNAME**, const unsigned char**, long);
void srandom(unsigned int);
const __int32_t** __ctype_tolower_loc();
const SSL_METHOD* TLSv1_1_client_method();
int X509_STORE_set1_param(X509_STORE*, const X509_VERIFY_PARAM*);
void* (UI*, void*)* UI_method_get_data_duplicator(const UI_METHOD*);
OCSP_SINGLERESP* OCSP_resp_get0(OCSP_BASICRESP*, int);
int EVP_PBE_get(int*, int*, size_t);
int DSA_do_verify(const unsigned char*, int, DSA_SIG*, DSA*);
void HMAC_CTX_free(HMAC_CTX*);
int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO*, ASN1_OBJECT*, int, int, void*, unsigned char*, int);
int BIO_lookup_ex(const char*, const char*, int, int, int, int, BIO_ADDRINFO**);
const ASN1_ITEM* ACCESS_DESCRIPTION_it();
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP*, const ASN1_OBJECT*, int);
int (BIO*)* BIO_meth_get_create(const BIO_METHOD*);
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP*, int, int);
const EVP_CIPHER* EVP_aria_256_cfb1();
void SSL_set_connect_state(SSL*);
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST*);
int inflateGetDictionary(z_streamp, Bytef*, uInt*);
X509_STORE* X509_STORE_new();
int EVP_PKEY_CTX_get0_rsa_oaep_label(EVP_PKEY_CTX*, unsigned char**);
int isalnum(int);
int CONF_modules_load(const CONF*, const char*, unsigned long);
int SSL_CTX_SRP_CTX_init(SSL_CTX*);
int EVP_MD_CTX_copy_ex(EVP_MD_CTX*, const EVP_MD_CTX*);
int EVP_PKEY_encapsulate(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char*, size_t*);
int setenv(const char*, const char*, int);
SCRYPT_PARAMS* SCRYPT_PARAMS_new();
const BIGNUM* RSA_get0_e(const RSA*);
int UI_method_set_data_duplicator(UI_METHOD*, void* (UI*, void*)*, void (UI*, void*)*);
unsigned long BN_get_word(const BIGNUM*);
int SSL_get_security_level(const SSL*);
X509_ATTRIBUTE* X509_REQ_delete_attr(X509_REQ*, int);
int SCT_set_version(SCT*, sct_version_t);
const EC_POINT* EC_KEY_get0_public_key(const EC_KEY*);
int SSL_use_PrivateKey_file(SSL*, const char*, int);
X509_CRL* X509_CRL_load_http(const char*, BIO*, BIO*, int);
void X509_CRL_set_meth_data(X509_CRL*, void*);
unsigned long EVP_MD_get_flags(const EVP_MD*);
void BIO_copy_next_retry(BIO*);
int CRYPTO_new_ex_data(int, void*, CRYPTO_EX_DATA*);
void OCSP_BASICRESP_free(OCSP_BASICRESP*);
int BN_BLINDING_update(BN_BLINDING*, BN_CTX*);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING*, const char*, int, BIT_STRING_BITNAME*);
int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_subject_fn);
ECDSA_SIG* d2i_ECDSA_SIG(ECDSA_SIG**, const unsigned char**, long);
int EVP_PKEY_CTX_get_signature_md(EVP_PKEY_CTX*, const EVP_MD**);
X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(const X509_STORE_CTX*);
int ERR_load_ERR_strings();
int fchdir(int);
const ASN1_ITEM* BASIC_CONSTRAINTS_it();
EVP_CIPHER* EVP_CIPHER_CTX_get1_cipher(EVP_CIPHER_CTX*);
int OBJ_add_sigid(int, int, int);
int (UI*, UI_STRING*)* UI_method_get_writer(const UI_METHOD*);
int i2d_PKCS7_fp(FILE*, const PKCS7*);
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT*);
int EVP_CIPHER_get_nid(const EVP_CIPHER*);
void* BIO_ptr_ctrl(BIO*, int, long);
int execlp(const char*, const char*);
int EVP_MD_meth_set_copy(EVP_MD*, int (EVP_MD_CTX*, const EVP_MD_CTX*)*);
void* X509_CRL_get_ext_d2i(const X509_CRL*, int, int*, int*);
const ASN1_OCTET_STRING* OCSP_resp_get0_signature(const OCSP_BASICRESP*);
ASN1_OCTET_STRING* PKCS7_digest_from_attributes(stack_st_X509_ATTRIBUTE*);
void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
unsigned int sleep(unsigned int);
int SSL_COMP_add_compression_method(int, COMP_METHOD*);
int EVP_MAC_init(EVP_MAC_CTX*, const unsigned char*, size_t, const OSSL_PARAM[]);
int (const DH*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DH_meth_get_bn_mod_exp(const DH_METHOD*);
const EVP_CIPHER* EVP_des_ede3_ofb();
int EVP_MD_CTX_set_params(EVP_MD_CTX*, const OSSL_PARAM[]);
X509_EXTENSION* OCSP_url_svcloc_new(const X509_NAME*, const char**);
DSA* d2i_DSA_PUBKEY_fp(FILE*, DSA**);
X509* SSL_SESSION_get0_peer(SSL_SESSION*);
void EVP_MD_free(EVP_MD*);
int nice(int);
void ENGINE_load_builtin_engines();
int renameat(int, const char*, int, const char*);
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP*, int, int);
int OBJ_obj2nid(const ASN1_OBJECT*);
int X509_REQ_set_subject_name(X509_REQ*, const X509_NAME*);
OCSP_SINGLERESP* OCSP_basic_add1_status(OCSP_BASICRESP*, OCSP_CERTID*, int, int, ASN1_TIME*, ASN1_TIME*, ASN1_TIME*);
int timespec_get(timespec*, int);
void EC_KEY_METHOD_free(EC_KEY_METHOD*);
int EVP_DigestInit_ex(EVP_MD_CTX*, const EVP_MD*, ENGINE*);
void X509_CINF_free(X509_CINF*);
int i2d_OCSP_SINGLERESP(const OCSP_SINGLERESP*, unsigned char**);
netent* getnetbyaddr(uint32_t, int);
int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX*, int*, size_t*);
int i2d_ASN1_OCTET_STRING(const ASN1_OCTET_STRING*, unsigned char**);
int SHA512_Init(SHA512_CTX*);
void SSL_SESSION_free(SSL_SESSION*);
const void* UI_method_get_ex_data(const UI_METHOD*, int);
int SSL_up_ref(SSL*);
int BIO_asn1_set_prefix(BIO*, asn1_ps_func*, asn1_ps_func*);
void DSA_set_flags(DSA*, int);
void* memset(void*, int, unsigned long int);
X509_SIG* d2i_PKCS8_bio(BIO*, X509_SIG**);
int ENGINE_register_complete(ENGINE*);
int uname(utsname*);
int pcre_get_substring_list(const char*, int*, int, const char***);
int srandom_r(unsigned int, random_data*);
const EVP_CIPHER* EVP_aes_256_ecb();
int SSL_CTX_set_ex_data(SSL_CTX*, int, void*);
int X509_print(BIO*, X509*);
unsigned long SSL_CTX_dane_clear_flags(SSL_CTX*, unsigned long);
BN_BLINDING* BN_BLINDING_new(const BIGNUM*, const BIGNUM*, BIGNUM*);
size_t strxfrm_l( char*, const char*, size_t, locale_t);
int PKCS7_signatureVerify(BIO*, PKCS7*, PKCS7_SIGNER_INFO*, X509*);
BIO* BIO_new_from_core_bio(OSSL_LIB_CTX*, OSSL_CORE_BIO*);
void SSL_set0_wbio(SSL*, BIO*);
stack_st_POLICYQUALINFO* X509_policy_node_get0_qualifiers(const X509_POLICY_NODE*);
ENGINE* ENGINE_get_pkey_meth_engine(int);
int EVP_PKEY_get_octet_string_param(const EVP_PKEY*, const char*, unsigned char*, size_t, size_t*);
void* SSL_CTX_get_ex_data(const SSL_CTX*, int);
const EVP_CIPHER* EVP_des_ede3();
int pthread_mutexattr_getprotocol(restrict const pthread_mutexattr_t*, restrict int*);
int pthread_mutexattr_setprotocol(pthread_mutexattr_t*, int);
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP*);
int SSL_CTX_ct_is_enabled(const SSL_CTX*);
int OCSP_basic_add1_nonce(OCSP_BASICRESP*, unsigned char*, int);
int getprotobynumber_r(int, restrict protoent*, restrict  char*, size_t, restrict protoent**);
void BIO_free_all(BIO*);
const SSL_METHOD* DTLSv1_server_method();
int lutimes(const char*, const timeval[2]);
int closedir(DIR*);
int OSSL_PARAM_set_BN(OSSL_PARAM*, const BIGNUM*);
int RSA_set0_crt_params(RSA*, BIGNUM*, BIGNUM*, BIGNUM*);
int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_issuer_serial_fn);
stack_st_X509_EXTENSION* X509v3_add_ext(stack_st_X509_EXTENSION**, X509_EXTENSION*, int);
int alphasort64(const dirent64**, const dirent64**);
int BN_ucmp(const BIGNUM*, const BIGNUM*);
int X509_STORE_CTX_verify(X509_STORE_CTX*);
char* strsignal(int);
const char* EVP_SIGNATURE_get0_description(const EVP_SIGNATURE*);
const ASN1_ITEM* CRL_DIST_POINTS_it();
int BN_get_flags(const BIGNUM*, int);
const BIGNUM* DH_get0_p(const DH*);
int UI_method_set_opener(UI_METHOD*, int (UI*)*);
void* UI_add_user_data(UI*, void*);
const EVP_MD* EVP_MD_CTX_get0_md(const EVP_MD_CTX*);
unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX*, unsigned int);
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_OBJ(stack_st_X509_ATTRIBUTE**, const ASN1_OBJECT*, int, const unsigned char*, int);
ssize_t sendfile64(int, int, __off64_t*, size_t);
int EVP_MAC_update(EVP_MAC_CTX*, const unsigned char*, size_t);
void X509_NAME_ENTRY_free(X509_NAME_ENTRY*);
__pid_t wait3(int*, int, rusage*);
int ENGINE_set_default_pkey_asn1_meths(ENGINE*);
int NCONF_get_number_e(const CONF*, const char*, const char*, long*);
pcre* pcre_compile(const char*, int, const char**, int*, const unsigned char*);
X509_INFO* X509_INFO_new();
void SSL_set_accept_state(SSL*);
int EVP_PKEY_CTX_get_ecdh_kdf_outlen(EVP_PKEY_CTX*, int*);
int i2d_X509_SIG(const X509_SIG*, unsigned char**);
char* X509_VERIFY_PARAM_get0_email(X509_VERIFY_PARAM*);
int EVP_PKEY_CTX_get_rsa_oaep_md_name(EVP_PKEY_CTX*,  char*, size_t);
void EVP_KEM_free(EVP_KEM*);
int CTLOG_STORE_load_file(CTLOG_STORE*, const char*);
int PEM_write_bio_PrivateKey_traditional(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int OSSL_PARAM_set_utf8_ptr(OSSL_PARAM*, const char*);
int i2d_X509_ATTRIBUTE(const X509_ATTRIBUTE*, unsigned char**);
int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO*, int, int, const unsigned char*, int);
int EC_KEY_set_public_key(EC_KEY*, const EC_POINT*);
void* CRYPTO_malloc(size_t, const char*, int);
char* getlogin();
EVP_MD_CTX* EVP_MD_CTX_new();
int SSL_CTX_load_verify_file(SSL_CTX*, const char*);
const EVP_PKEY_ASN1_METHOD* ENGINE_get_pkey_asn1_meth_str(ENGINE*, const char*, int);
int ERR_load_BUF_strings();
int BN_nist_mod_224(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
hostent* gethostbyaddr(const void*, __socklen_t, int);
const BIO_METHOD* BIO_f_readbuffer();
__ssize_t getdirentries64(int, restrict  char*, size_t, restrict __off64_t*);
cpu_set_t* __sched_cpualloc(size_t);
int chroot(const char*);
int DSA_SIG_set0(DSA_SIG*, BIGNUM*, BIGNUM*);
const X509V3_EXT_METHOD* X509V3_EXT_get(X509_EXTENSION*);
const OSSL_PARAM* EVP_KEYMGMT_gettable_params(const EVP_KEYMGMT*);
int fstatfs64(int, statfs64*);
int SSL_CTX_add_custom_ext(SSL_CTX*, unsigned int, unsigned int, SSL_custom_ext_add_cb_ex, SSL_custom_ext_free_cb_ex, void*, SSL_custom_ext_parse_cb_ex, void*);
const unsigned char* EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX*);
DH* DH_new_by_nid(int);
int scandirat(int, restrict const char*, restrict dirent***, int (const dirent*)*, int (const dirent**, const dirent**)*);
const EVP_MD* EVP_sm3();
void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(const X509_STORE*);
int erand48_r(unsigned short int[3], restrict drand48_data*, restrict double*);
int system(const char*);
int EVP_DigestFinal_ex(EVP_MD_CTX*, unsigned char*, unsigned int*);
int gzread(gzFile, voidp, unsigned);
DSA_SIG* DSA_SIG_new();
int SSL_SESSION_get_protocol_version(const SSL_SESSION*);
int EC_GROUP_check_discriminant(const EC_GROUP*, BN_CTX*);
int X509v3_get_ext_count(const stack_st_X509_EXTENSION*);
int EVP_PKEY_set1_engine(EVP_PKEY*, ENGINE*);
int pthread_rwlock_rdlock(pthread_rwlock_t*);
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING*);
int ASN1_item_digest(const ASN1_ITEM*, const EVP_MD*, void*, unsigned char*, unsigned int*);
PKCS7_SIGNER_INFO* PKCS7_add_signature(PKCS7*, X509*, EVP_PKEY*, const EVP_MD*);
OCSP_RESPDATA* d2i_OCSP_RESPDATA(OCSP_RESPDATA**, const unsigned char**, long);
int X509_PURPOSE_get_trust(const X509_PURPOSE*);
int dladdr(const void*, Dl_info*);
X509_EXTENSION* X509_EXTENSION_dup(const X509_EXTENSION*);
dirent64* readdir64(DIR*);
int DHparams_print(BIO*, const DH*);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP*, X509_LOOKUP_TYPE, const unsigned char*, int, X509_OBJECT*);
int EC_KEY_can_sign(const EC_KEY*);
void ASN1_PCTX_free(ASN1_PCTX*);
const ASN1_ITEM* RSA_OAEP_PARAMS_it();
int BN_set_bit(BIGNUM*, int);
OSSL_PROVIDER* EVP_SIGNATURE_get0_provider(const EVP_SIGNATURE*);
ASN1_VISIBLESTRING* ASN1_VISIBLESTRING_new();
void X509_trust_clear(X509*);
int EVP_PKEY_save_parameters(EVP_PKEY*, int);
X509* SSL_get_certificate(const SSL*);
EVP_KEYEXCH* EVP_KEYEXCH_fetch(OSSL_LIB_CTX*, const char*, const char*);
unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX*);
__off64_t ftello64(FILE*);
int OCSP_resp_get0_id(const OCSP_BASICRESP*, const ASN1_OCTET_STRING**, const X509_NAME**);
void EDIPARTYNAME_free(EDIPARTYNAME*);
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO*, stack_st_X509_ALGOR*);
void X509_free(X509*);
int ENGINE_register_ciphers(ENGINE*);
EVP_PKEY* PEM_read_bio_PUBKEY_ex(BIO*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
dh_st* EVP_PKEY_get1_DH(EVP_PKEY*);
int munlock(const void*, size_t);
int OSSL_PARAM_set_int32(OSSL_PARAM*, int32_t);
int ungetc(int, FILE*);
const ASN1_ITEM* ASN1_TIME_it();
size_t BUF_MEM_grow(BUF_MEM*, size_t);
int EVP_OpenInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, int, const unsigned char*, EVP_PKEY*);
int RSA_get0_multi_prime_factors(const RSA*, const BIGNUM*[]);
const RSA_METHOD* RSA_PKCS1_OpenSSL();
BIO* OSSL_HTTP_REQ_CTX_get0_mem_bio(const OSSL_HTTP_REQ_CTX*);
int i2a_ACCESS_DESCRIPTION(BIO*, const ACCESS_DESCRIPTION*);
int ERR_load_PEM_strings();
size_t EC_get_builtin_curves(EC_builtin_curve*, size_t);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_pub_dec(const RSA_METHOD*);
int epoll_pwait(int, epoll_event*, int, int, const __sigset_t*);
int EVP_KEYMGMT_names_do_all(const EVP_KEYMGMT*, void (const char*, void*)*, void*);
void X509_OBJECT_free(X509_OBJECT*);
int pthread_rwlock_init(restrict pthread_rwlock_t*, restrict const pthread_rwlockattr_t*);
int BN_mod_lshift1_quick(BIGNUM*, const BIGNUM*, const BIGNUM*);
const CTLOG_STORE* SSL_CTX_get0_ctlog_store(const SSL_CTX*);
int i2o_SCT_LIST(const stack_st_SCT*, unsigned char**);
const RSA_METHOD* RSA_null_method();
ECPKPARAMETERS* EC_GROUP_get_ecpkparameters(const EC_GROUP*, ECPKPARAMETERS*);
unsigned short htons(unsigned short);
int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE*, long*, unsigned char*, int);
unsigned int SSL_client_hello_get0_legacy_version(SSL*);
int EVP_CIPHER_get_block_size(const EVP_CIPHER*);
int putpwent(restrict const passwd*, restrict FILE*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME*, time_t);
int PKCS7_verify(PKCS7*, stack_st_X509*, X509_STORE*, BIO*, BIO*, int);
int EVP_MD_get_type(const EVP_MD*);
int BN_sub_word(BIGNUM*, unsigned long);
SSL_CTX* SSL_CTX_new_ex(OSSL_LIB_CTX*, const char*, const SSL_METHOD*);
void BIO_clear_flags(BIO*, int);
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP*, int, void*, int, unsigned long);
int SCT_validate(SCT*, const CT_POLICY_EVAL_CTX*);
int EVP_PBE_CipherInit(ASN1_OBJECT*, const char*, int, ASN1_TYPE*, EVP_CIPHER_CTX*, int);
unsigned long X509_issuer_and_serial_hash(X509*);
int EVP_PKEY_CTX_set_dh_pad(EVP_PKEY_CTX*, int);
int EVP_PKEY_CTX_set_rsa_mgf1_md_name(EVP_PKEY_CTX*, const char*, const char*);
void X509_POLICY_NODE_print(BIO*, X509_POLICY_NODE*, int);
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD*);
void ASN1_ENUMERATED_free(ASN1_ENUMERATED*);
int BN_cmp(const BIGNUM*, const BIGNUM*);
int EVP_PKEY_CTX_set_dsa_paramgen_md_props(EVP_PKEY_CTX*, const char*, const char*);
int PEM_write_bio_SSL_SESSION(BIO*, const SSL_SESSION*);
const char* SSL_rstate_string_long(const SSL*);
ENGINE* ENGINE_by_id(const char*);
int execl(const char*, const char*);
protoent* getprotobynumber(int);
void SSL_get0_alpn_selected(const SSL*, const unsigned char**, unsigned int*);
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX*, ASN1_TYPE*);
void BUF_reverse(unsigned char*, const unsigned char*, size_t);
int vdprintf(int, restrict const char*, __gnuc_va_list);
int SRP_Calc_A_param(SSL*);
void* DSA_get_ex_data(const DSA*, int);
int BIO_meth_set_write_ex(BIO_METHOD*, int (BIO*, const char*, size_t, size_t*)*);
const BIO_METHOD* BIO_f_base64();
EVP_PKEY* PEM_read_bio_Parameters(BIO*, EVP_PKEY**);
size_t SSL_client_hello_get0_compression_methods(SSL*, const unsigned char**);
int EVP_KEM_up_ref(EVP_KEM*);
int PEM_write_PKCS8(FILE*, const X509_SIG*);
const char* EVP_CIPHER_get0_name(const EVP_CIPHER*);
int SSL_SESSION_is_resumable(const SSL_SESSION*);
X509_CRL* X509_CRL_new_ex(OSSL_LIB_CTX*, const char*);
void qsort(void*, size_t, size_t, __compar_fn_t);
const OSSL_PARAM* EVP_ASYM_CIPHER_gettable_ctx_params(const EVP_ASYM_CIPHER*);
void PKCS7_free(PKCS7*);
int BIO_asn1_get_suffix(BIO*, asn1_ps_func**, asn1_ps_func**);
int EVP_PKEY_CTX_set_dhx_rfc5114(EVP_PKEY_CTX*, int);
void SSL_set_not_resumable_session_callback(SSL*, int (SSL*, int)*);
int i2d_PKEY_USAGE_PERIOD(const PKEY_USAGE_PERIOD*, unsigned char**);
int epoll_wait(int, epoll_event*, int, int);
int BIO_accept(int,  char**);
void* SSL_get_default_passwd_cb_userdata(SSL*);
int EVP_CIPHER_CTX_get_nid(const EVP_CIPHER_CTX*);
void ENGINE_unregister_DSA(ENGINE*);
unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX*, unsigned int);
void EC_POINT_free(EC_POINT*);
int PEM_write_PrivateKey_ex(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aria_256_ecb();
void* ASN1_SCTX_get_app_data(ASN1_SCTX*);
int i2d_DIRECTORYSTRING(const ASN1_STRING*, unsigned char**);
int ENGINE_register_pkey_asn1_meths(ENGINE*);
EC_GROUP* d2i_ECPKParameters(EC_GROUP**, const unsigned char**, long);
ENGINE* ENGINE_get_default_DSA();
X509_SIG* PEM_read_PKCS8(FILE*, X509_SIG**, pem_password_cb*, void*);
int SSL_CTX_set_session_ticket_cb(SSL_CTX*, SSL_CTX_generate_session_ticket_fn, SSL_CTX_decrypt_session_ticket_fn, void*);
int SSL_use_certificate_chain_file(SSL*, const char*);
int PEM_write_RSAPublicKey(FILE*, const RSA*);
int i2d_X509_ALGORS(const X509_ALGORS*, unsigned char**);
void EVP_DecodeInit(EVP_ENCODE_CTX*);
int i2d_ECDSA_SIG(const ECDSA_SIG*, unsigned char**);
EC_KEY* EC_KEY_new_by_curve_name(int);
int EC_GROUP_check(const EC_GROUP*, BN_CTX*);
int sigpause(int);
const EVP_MD* EVP_sha3_224();
int BN_mod_exp_mont_word(BIGNUM*, unsigned long, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
int X509_load_crl_file(X509_LOOKUP*, const char*, int);
int X509_PURPOSE_add(int, int, int, int (const X509_PURPOSE*, const X509*, int)*, const char*, const char*, void*);
int stat64(restrict const char*, restrict stat64*);
int deflate(z_streamp, int);
BN_BLINDING* RSA_setup_blinding(RSA*, BN_CTX*);
int SSL_COMP_get_id(const SSL_COMP*);
int HMAC_Init(HMAC_CTX*, const void*, int, const EVP_MD*);
int BN_BLINDING_invert_ex(BIGNUM*, const BIGNUM*, BN_BLINDING*, BN_CTX*);
int SSL_CTX_set_default_verify_paths(SSL_CTX*);
void ENGINE_unregister_pkey_meths(ENGINE*);
void ASN1_STRING_TABLE_cleanup();
BIO_callback_fn_ex BIO_get_callback_ex(const BIO*);
ASN1_STRING_TABLE* ASN1_STRING_TABLE_get(int);
int BN_asc2bn(BIGNUM**, const char*);
int isalnum_l(int, locale_t);
void IPAddressOrRange_free(IPAddressOrRange*);
ASN1_INTEGER* ASN1_INTEGER_dup(const ASN1_INTEGER*);
int islower(int);
__pid_t setsid();
int utimes(const char*, const timeval[2]);
__off64_t ftello(FILE*);
int i2d_PKCS8PrivateKey_nid_bio(BIO*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
int i2a_ASN1_ENUMERATED(BIO*, const ASN1_ENUMERATED*);
void SSL_CTX_set_client_cert_cb(SSL_CTX*, int (SSL*, X509**, EVP_PKEY**)*);
long SSL_SESSION_set_time(SSL_SESSION*, long);
int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX*, uint8_t);
const OSSL_PARAM* EVP_CIPHER_gettable_params(const EVP_CIPHER*);
size_t SSL_get_peer_finished(const SSL*, void*, size_t);
int sigrelse(int);
int SSL_CTX_has_client_custom_ext(const SSL_CTX*, unsigned int);
ssize_t readv(int, const iovec*, int);
void SHA1_Transform(SHA_CTX*, const unsigned char*);
stack_st_X509_NAME* SSL_load_client_CA_file(const char*);
int BIO_dgram_non_fatal_error(int);
BN_RECP_CTX* BN_RECP_CTX_new();
int ERR_load_ENGINE_strings();
int pthread_rwlock_clockrdlock(restrict pthread_rwlock_t*, clockid_t, restrict const timespec*);
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, int, long, void*)*);
const ASN1_ITEM* PKCS7_it();
PKCS7_ISSUER_AND_SERIAL* d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL**, const unsigned char**, long);
int i2d_ECPrivateKey_bio(BIO*, const EC_KEY*);
long BIO_debug_callback_ex(BIO*, int, const char*, size_t, int, long, int, size_t*);
int ECPKParameters_print(BIO*, const EC_GROUP*, int);
stack_st_X509_POLICY_NODE* X509_policy_tree_get0_policies(const X509_POLICY_TREE*);
int i2d_OCSP_REVOKEDINFO(const OCSP_REVOKEDINFO*, unsigned char**);
int X509_REQ_get_attr_by_OBJ(const X509_REQ*, const ASN1_OBJECT*, int);
X509_VERIFY_PARAM* SSL_get0_param(SSL*);
void X509_get0_signature(const ASN1_BIT_STRING**, const X509_ALGOR**, const X509*);
int BIO_method_type(const BIO*);
int pkey_mprotect(void*, size_t, int, int);
int ERR_load_RAND_strings();
int EVP_PKEY_decapsulate_init(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int X509_STORE_up_ref(X509_STORE*);
const EVP_CIPHER* EVP_aes_128_cbc_hmac_sha256();
unsigned char* SHA1(const unsigned char*, size_t, unsigned char*);
int EVP_PKEY_get_ec_point_conv_form(const EVP_PKEY*);
void EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE*);
int SSL_dane_tlsa_add(SSL*, uint8_t, uint8_t, uint8_t, const unsigned char*, size_t);
int i2b_PVK_bio(BIO*, const EVP_PKEY*, int, pem_password_cb*, void*);
X509_VERIFY_PARAM* X509_STORE_CTX_get0_param(const X509_STORE_CTX*);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX*, int);
void CONF_free(lhash_st_CONF_VALUE*);
int RSA_meth_set_sign(RSA_METHOD*, int (int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, const RSA*)*);
PKCS7_SIGNER_INFO* PKCS7_SIGNER_INFO_new();
const X509_VERIFY_PARAM* X509_VERIFY_PARAM_get0(int);
ASN1_SEQUENCE_ANY* d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY**, const unsigned char**, long);
int fsetpos(FILE*, const fpos_t*);
int ERR_unload_strings(int, ERR_STRING_DATA*);
void CRYPTO_free(void*, const char*, int);
char* EVP_get_pw_prompt();
int OBJ_NAME_remove(const char*, int);
int sched_setparam(__pid_t, const sched_param*);
RSA* d2i_RSAPrivateKey(RSA**, const unsigned char**, long);
int OBJ_cmp(const ASN1_OBJECT*, const ASN1_OBJECT*);
int DSA_set_method(DSA*, const DSA_METHOD*);
void pthread_exit(void*);
const EVP_CIPHER* EVP_seed_ofb();
int ENGINE_set_default_DSA(ENGINE*);
OCSP_RESPONSE* OCSP_response_create(int, OCSP_BASICRESP*);
ENGINE* ENGINE_get_default_RAND();
int PEM_write_bio_DSAparams(BIO*, const DSA*);
void PKCS7_SIGNED_free(PKCS7_SIGNED*);
int RSA_X931_generate_key_ex(RSA*, int, const BIGNUM*, BN_GENCB*);
X509_EXTENSION* X509V3_EXT_i2d(int, int, void*);
void endhostent();
int X509_get_ext_by_critical(const X509*, int, int);
int SHA384_Update(SHA512_CTX*, const void*, size_t);
int sem_init(sem_t*, int, unsigned int);
int ENGINE_register_RAND(ENGINE*);
int BIO_meth_set_gets(BIO_METHOD*, int (BIO*,  char*, int)*);
int PKCS7_set_digest(PKCS7*, const EVP_MD*);
const ASN1_ITEM* NOTICEREF_it();
const SSL_METHOD* TLSv1_2_method();
const EVP_CIPHER* EVP_seed_cfb128();
int EVP_PKEY_CTX_set_rsa_oaep_md_name(EVP_PKEY_CTX*, const char*, const char*);
int fileno_unlocked(FILE*);
void globfree(glob_t*);
int RSA_meth_set_multi_prime_keygen(RSA_METHOD*, int (RSA*, int, int, BIGNUM*, BN_GENCB*)*);
NOTICEREF* NOTICEREF_new();
int SSL_use_RSAPrivateKey_ASN1(SSL*, const unsigned char*, long);
int SSL_renegotiate_abbreviated(SSL*);
ASN1_TYPE* ASN1_generate_nconf(const char*, CONF*);
int SSL_CONF_cmd(SSL_CONF_CTX*, const char*, const char*);
int EVP_PKEY_CTX_set_dh_kdf_type(EVP_PKEY_CTX*, int);
X509_STORE_CTX_verify_fn X509_STORE_get_verify(const X509_STORE*);
void ADMISSIONS_set0_professionInfos(ADMISSIONS*, PROFESSION_INFOS*);
FILE* open_memstream( char**, size_t*);
void HMAC_CTX_set_flags(HMAC_CTX*, unsigned long);
int X509_check_host(X509*, const char*, size_t, unsigned int,  char**);
int X509_subject_name_cmp(const X509*, const X509*);
int X509_up_ref(X509*);
int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM*, const unsigned char*, size_t);
int COMP_compress_block(COMP_CTX*, unsigned char*, int, unsigned char*, int);
int EVP_MD_CTX_test_flags(const EVP_MD_CTX*, int);
int EVP_PKEY_CTX_set0_rsa_oaep_label(EVP_PKEY_CTX*, void*, int);
int vfork();
int EVP_RAND_verify_zeroization(EVP_RAND_CTX*);
void EVP_add_alg_module();
OCSP_REQINFO* d2i_OCSP_REQINFO(OCSP_REQINFO**, const unsigned char**, long);
int (EVP_MD_CTX*, unsigned char*)* EVP_MD_meth_get_final(const EVP_MD*);
int EVP_PKEY_CTX_set_dsa_paramgen_bits(EVP_PKEY_CTX*, int);
size_t strnlen(const char*, size_t);
long int random();
int renameat2(int, const char*, int, const char*, unsigned int);
ADMISSIONS* d2i_ADMISSIONS(ADMISSIONS**, const unsigned char**, long);
const EVP_MD* EVP_sha224();
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX*, void*);
const EVP_MD* EVP_md4();
int UI_method_set_reader(UI_METHOD*, int (UI*, UI_STRING*)*);
int select(int, restrict fd_set*, restrict fd_set*, restrict fd_set*, restrict timeval*);
long SSL_ctrl(SSL*, int, long, void*);
long int telldir(DIR*);
ASN1_INTEGER* d2i_ASN1_INTEGER(ASN1_INTEGER**, const unsigned char**, long);
void pthread_testcancel();
stack_st_SSL_CIPHER* SSL_get1_supported_ciphers(SSL*);
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS*);
void setrpcent(int);
int getloadavg(double[], int);
void ERR_remove_thread_state(void*);
size_t EC_KEY_key2buf(const EC_KEY*, point_conversion_form_t, unsigned char**, BN_CTX*);
int X509_REQ_add1_attr_by_OBJ(X509_REQ*, const ASN1_OBJECT*, int, const unsigned char*, int);
int BN_clear_bit(BIGNUM*, int);
void clearerr(FILE*);
X509_OBJECT* X509_OBJECT_retrieve_match(stack_st_X509_OBJECT*, X509_OBJECT*);
int EVP_PKEY_CTX_set_params(EVP_PKEY_CTX*, const OSSL_PARAM*);
int SXNET_add_id_asc(SXNET**, const char*, const char*, int);
const stack_st_X509_NAME* SSL_get0_peer_CA_list(const SSL*);
int sigignore(int);
X509_EXTENSION* OCSP_accept_responses_new( char**);
int EC_POINT_oct2point(const EC_GROUP*, EC_POINT*, const unsigned char*, size_t, BN_CTX*);
int gzdirect(gzFile);
void CRYPTO_secure_clear_free(void*, size_t, const char*, int);
__uid_t geteuid();
int GENERAL_NAME_set0_othername(GENERAL_NAME*, ASN1_OBJECT*, ASN1_TYPE*);
void X509_REQ_free(X509_REQ*);
int ERR_load_EC_strings();
X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(const X509_STORE*);
int inflateCopy(z_streamp, z_streamp);
const ASN1_ITEM* X509_VAL_it();
int ffsll(long long int);
int ENGINE_set_ciphers(ENGINE*, ENGINE_CIPHERS_PTR);
ASN1_VALUE* ASN1_item_d2i_ex(ASN1_VALUE**, const unsigned char**, long, const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int (BIGNUM*, const BIGNUM*, RSA*, BN_CTX*)* RSA_meth_get_mod_exp(const RSA_METHOD*);
int CTLOG_new_from_base64_ex(CTLOG**, const char*, const char*, OSSL_LIB_CTX*, const char*);
int ENGINE_set_RSA(ENGINE*, const RSA_METHOD*);
int i2d_ASIdentifierChoice(const ASIdentifierChoice*, unsigned char**);
BASIC_CONSTRAINTS* d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS**, const unsigned char**, long);
OSSL_PARAM OSSL_PARAM_construct_ulong(const char*, unsigned long int*);
int BN_print(BIO*, const BIGNUM*);
void X509_VAL_free(X509_VAL*);
int EC_POINT_set_compressed_coordinates(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
PKCS7_SIGNED* d2i_PKCS7_SIGNED(PKCS7_SIGNED**, const unsigned char**, long);
int EC_KEY_oct2priv(EC_KEY*, const unsigned char*, size_t);
X509_ATTRIBUTE* X509at_get_attr(const stack_st_X509_ATTRIBUTE*, int);
const char* pcre32_version();
X509_REQ* d2i_X509_REQ_bio(BIO*, X509_REQ**);
EVP_PKEY* PEM_read_bio_PrivateKey_ex(BIO*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void RSA_blinding_off(RSA*);
int EC_GROUP_get_curve_GFp(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
int pcre16_config(int, void*);
char* qgcvt(long double, int,  char*);
int unshare(int);
const ASN1_ITEM* ISSUER_SIGN_TOOL_it();
ASN1_NULL* d2i_ASN1_NULL(ASN1_NULL**, const unsigned char**, long);
void SSL_set_record_padding_callback_arg(SSL*, void*);
int BIO_wait(BIO*, time_t, unsigned int);
const OSSL_PARAM* EVP_MD_CTX_settable_params(EVP_MD_CTX*);
int EVP_DigestUpdate(EVP_MD_CTX*, const void*, size_t);
int ENGINE_add(ENGINE*);
int BN_GF2m_mod_div_arr(BIGNUM*, const BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
stack_st_X509_ATTRIBUTE* X509at_add1_attr(stack_st_X509_ATTRIBUTE**, X509_ATTRIBUTE*);
int UI_method_set_flusher(UI_METHOD*, int (UI*)*);
const OSSL_PARAM* EVP_PKEY_fromdata_settable(EVP_PKEY_CTX*, int);
int NCONF_load_bio(CONF*, BIO*, long*);
const CTLOG* CTLOG_STORE_get0_log_by_id(const CTLOG_STORE*, const uint8_t*, size_t);
int EC_KEY_get_flags(const EC_KEY*);
const unsigned char* EVP_PKEY_get0_hmac(const EVP_PKEY*, size_t*);
void sethostent(int);
void OSSL_LIB_CTX_free(OSSL_LIB_CTX*);
int X509_STORE_CTX_init(X509_STORE_CTX*, X509_STORE*, X509*, stack_st_X509*);
int timespec_getres(timespec*, int);
const unsigned char* pcre_maketables();
int prlimit64(__pid_t, __rlimit_resource, const rlimit64*, rlimit64*);
int RAND_write_file(const char*);
int getrpcent_r(rpcent*,  char*, size_t, rpcent**);
int OCSP_RESPID_set_by_key_ex(OCSP_RESPID*, X509*, OSSL_LIB_CTX*, const char*);
int SSL_set_wfd(SSL*, int);
int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_alias_fn);
void setlinebuf(FILE*);
const X509_ALGOR* OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP*);
int EVP_PKEY_get_id(const EVP_PKEY*);
int EVP_KEYEXCH_up_ref(EVP_KEYEXCH*);
BUF_MEM* BUF_MEM_new();
int SSL_CTX_set0_tmp_dh_pkey(SSL_CTX*, EVP_PKEY*);
const EVP_CIPHER* EVP_aria_256_gcm();
int BIO_socket_wait(int, int, time_t);
int SSL_CIPHER_get_kx_nid(const SSL_CIPHER*);
void* SSL_get0_security_ex_data(const SSL*);
const EVP_MD* EVP_sha384();
int pkey_set(int, unsigned int);
int i2d_ASN1_OBJECT(const ASN1_OBJECT*, unsigned char**);
void X509_STORE_CTX_set0_untrusted(X509_STORE_CTX*, stack_st_X509*);
int OSSL_PARAM_set_double(OSSL_PARAM*, double);
int open64(const char*, int);
ASIdentifiers* d2i_ASIdentifiers(ASIdentifiers**, const unsigned char**, long);
int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL*, void*);
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC*);
int X509_add_ext(X509*, X509_EXTENSION*, int);
SSL* SSL_new(SSL_CTX*);
X509_EXTENSION* X509_EXTENSION_create_by_NID(X509_EXTENSION**, int, int, ASN1_OCTET_STRING*);
int ERR_load_OSSL_STORE_strings();
int EVP_PKEY_CTX_get_rsa_oaep_md(EVP_PKEY_CTX*, const EVP_MD**);
size_t BIO_ctrl_get_read_request(BIO*);
int (DSA*, BN_CTX*, BIGNUM**, BIGNUM**)* DSA_meth_get_sign_setup(const DSA_METHOD*);
void setprotoent(int);
char* CRYPTO_strdup(const char*, const char*, int);
int pthread_cond_wait(restrict pthread_cond_t*, restrict pthread_mutex_t*);
X509_STORE_CTX* X509_STORE_CTX_new();
void endgrent();
const EVP_CIPHER* EVP_camellia_192_cbc();
ASN1_IA5STRING* ASN1_IA5STRING_new();
ENGINE* ENGINE_get_default_EC();
int BN_mod_sub(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const unsigned char* ASN1_STRING_get0_data(const ASN1_STRING*);
int i2d_X509_CERT_AUX(const X509_CERT_AUX*, unsigned char**);
void BN_GENCB_set_old(BN_GENCB*, void (int, int, void*)*, void*);
void X509_TRUST_cleanup();
void seekdir(DIR*, long int);
int ERR_load_PKCS12_strings();
int PEM_write_bio_EC_PUBKEY(BIO*, const EC_KEY*);
int fgetpos64(restrict FILE*, restrict fpos64_t*);
int X509_TRUST_get_by_id(int);
int OBJ_create(const char*, const char*, const char*);
int i2d_POLICYQUALINFO(const POLICYQUALINFO*, unsigned char**);
const char* COMP_get_name(const COMP_METHOD*);
sct_source_t SCT_get_source(const SCT*);
void SXNETID_free(SXNETID*);
char* inet_ntoa(in_addr);
unsigned htonl(unsigned);
EVP_PKEY* PEM_read_PUBKEY(FILE*, EVP_PKEY**, pem_password_cb*, void*);
void* RSA_meth_get0_app_data(const RSA_METHOD*);
z_size_t gzfwrite(voidpc, z_size_t, z_size_t, gzFile);
ASN1_ENUMERATED* BN_to_ASN1_ENUMERATED(const BIGNUM*, ASN1_ENUMERATED*);
ISSUING_DIST_POINT* d2i_ISSUING_DIST_POINT(ISSUING_DIST_POINT**, const unsigned char**, long);
const EVP_CIPHER* EVP_sm4_cfb128();
int EVP_PBE_alg_add(int, const EVP_CIPHER*, const EVP_MD*, EVP_PBE_KEYGEN*);
int EVP_PKEY_derive(EVP_PKEY_CTX*, unsigned char*, size_t*);
int OSSL_PARAM_set_int64(OSSL_PARAM*, int64_t);
size_t EC_GROUP_set_seed(EC_GROUP*, const unsigned char*, size_t);
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP*, int, int);
void* BIO_get_ex_data(const BIO*, int);
rpcent* getrpcent();
int pthread_rwlock_unlock(pthread_rwlock_t*);
const BIO_METHOD* BIO_f_buffer();
int X509_SIG_INFO_get(const X509_SIG_INFO*, int*, int*, int*, uint32_t*);
const ASN1_ITEM* ASN1_GENERALSTRING_it();
void ENGINE_unregister_RSA(ENGINE*);
EVP_MD* EVP_MD_fetch(OSSL_LIB_CTX*, const char*, const char*);
ssize_t preadv(int, const iovec*, int, __off64_t);
int EVP_MD_meth_get_result_size(const EVP_MD*);
const char* SSL_CIPHER_get_name(const SSL_CIPHER*);
void DSA_get0_key(const DSA*, const BIGNUM**, const BIGNUM**);
void DISPLAYTEXT_free(ASN1_STRING*);
int BN_X931_generate_Xpq(BIGNUM*, BIGNUM*, int, BN_CTX*);
unsigned char* OPENSSL_hexstr2buf(const char*, long*);
int pthread_getconcurrency();
int SSL_SESSION_print(BIO*, const SSL_SESSION*);
int SSL_get_wfd(const SSL*);
int EVP_MD_meth_get_input_blocksize(const EVP_MD*);
int inflateSync(z_streamp);
char* inet_net_ntop(int, const void*, int,  char*, size_t);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM*, ASN1_OBJECT*);
int SSL_enable_ct(SSL*, int);
RSA* PEM_read_RSAPublicKey(FILE*, RSA**, pem_password_cb*, void*);
void* OPENSSL_sk_pop(OPENSSL_STACK*);
char* strfry( char*);
void endnetgrent();
int OCSP_id_issuer_cmp(const OCSP_CERTID*, const OCSP_CERTID*);
void abort();
stack_st_ASN1_OBJECT* X509_get0_reject_objects(X509*);
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
const EVP_MD* EVP_blake2s256();
tm* OPENSSL_gmtime(const time_t*, tm*);
OSSL_PARAM* OSSL_PARAM_dup(const OSSL_PARAM*);
int BN_X931_generate_prime_ex(BIGNUM*, BIGNUM*, BIGNUM*, BIGNUM*, BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_GENCB*);
int ERR_load_EVP_strings();
int pkey_free(int);
RSA* d2i_RSA_PUBKEY_bio(BIO*, RSA**);
int ENGINE_set_EC(ENGINE*, const EC_KEY_METHOD*);
OCSP_BASICRESP* OCSP_BASICRESP_new();
const ASN1_ITEM* OCSP_REQUEST_it();
int X509_STORE_load_store_ex(X509_STORE*, const char*, OSSL_LIB_CTX*, const char*);
char* get_current_dir_name();
int BN_mod_sqr(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509v3_addr_get_range(IPAddressOrRange*, const unsigned, unsigned char*, unsigned char*, const int);
int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK*);
char* strerror_r(int,  char*, size_t);
int getnameinfo(restrict const sockaddr*, socklen_t, restrict  char*, socklen_t, restrict  char*, socklen_t, int);
int EVP_PKEY_CTX_set_dsa_paramgen_seed(EVP_PKEY_CTX*, const unsigned char*, size_t);
int BN_mod_mul_montgomery(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int OPENSSL_sk_find(OPENSSL_STACK*, const void*);
int pthread_setspecific(pthread_key_t, const void*);
int dprintf(int, restrict const char*);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
const ASN1_ITEM* ASN1_ENUMERATED_it();
int i2d_RSA_PSS_PARAMS(const RSA_PSS_PARAMS*, unsigned char**);
int vscanf(restrict const  char*, __va_list_tag*);
const char* X509_get_default_cert_file();
ASN1_IA5STRING* d2i_ASN1_IA5STRING(ASN1_IA5STRING**, const unsigned char**, long);
char* basename(const char*);
int strfroml( char*, size_t, const char*, long double);
int sigsuspend(const sigset_t*);
void ASN1_T61STRING_free(ASN1_T61STRING*);
stack_st_X509_INFO* PEM_X509_INFO_read_bio(BIO*, stack_st_X509_INFO*, pem_password_cb*, void*);
int ECDSA_size(const EC_KEY*);
EVP_MAC* EVP_MAC_CTX_get0_mac(EVP_MAC_CTX*);
char* getwd( char*);
int pthread_barrier_wait(pthread_barrier_t*);
int X509_ATTRIBUTE_count(const X509_ATTRIBUTE*);
ASN1_TYPE* X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE*, int);
int i2a_ASN1_STRING(BIO*, const ASN1_STRING*, int);
int X509v3_asid_validate_resource_set(stack_st_X509*, ASIdentifiers*, int);
int lcong48_r(unsigned short int[7], drand48_data*);
int pthread_attr_getscope(restrict const pthread_attr_t*, restrict int*);
void ERR_set_debug(const char*, int, const char*);
int SCT_set1_extensions(SCT*, const unsigned char*, size_t);
ASN1_TYPE* ASN1_TYPE_new();
int PEM_write_EC_PUBKEY(FILE*, const EC_KEY*);
const EVP_CIPHER* EVP_des_ecb();
int sem_destroy(sem_t*);
int X509_CRL_set_issuer_name(X509_CRL*, const X509_NAME*);
long PKCS7_ctrl(PKCS7*, int, long,  char*);
DH_METHOD* DH_meth_new(const char*, int);
int eventfd_read(int, eventfd_t*);
DH* d2i_DHparams(DH**, const unsigned char**, long);
const EVP_CIPHER* EVP_rc2_cfb64();
void EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
sct_validation_status_t SCT_get_validation_status(const SCT*);
EVP_PKEY* d2i_PrivateKey(int, EVP_PKEY**, const unsigned char**, long);
int X509V3_EXT_print_fp(FILE*, X509_EXTENSION*, int, int);
int i2d_DSA_PUBKEY_bio(BIO*, const DSA*);
int chdir(const char*);
int X509_ALGOR_cmp(const X509_ALGOR*, const X509_ALGOR*);
int EVP_PKEY_CTX_set1_rsa_keygen_pubexp(EVP_PKEY_CTX*, BIGNUM*);
size_t BIO_ctrl_pending(BIO*);
int SSL_SESSION_set1_id(SSL_SESSION*, const unsigned char*, unsigned int);
void BIO_set_callback_ex(BIO*, BIO_callback_fn_ex);
const char* strerrordesc_np(int);
int EVP_CIPHER_CTX_is_encrypting(const EVP_CIPHER_CTX*);
const char* hstrerror(int);
ACCESS_DESCRIPTION* ACCESS_DESCRIPTION_new();
int i2d_ADMISSION_SYNTAX(const ADMISSION_SYNTAX*, unsigned char**);
ssize_t pwritev(int, const iovec*, int, __off64_t);
int i2d_ECParameters(const EC_KEY*, unsigned char**);
int X509_NAME_set(X509_NAME**, const X509_NAME*);
int deflateSetHeader(z_streamp, gz_headerp);
void UI_free(UI*);
int ASYNC_init_thread(size_t, size_t);
unsigned long X509_VERIFY_PARAM_get_flags(const X509_VERIFY_PARAM*);
EVP_PKEY* d2i_AutoPrivateKey_ex(EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
const ASN1_ITEM* OCSP_CERTSTATUS_it();
void bzero(void*, unsigned long int);
int PKCS8_pkey_get0(const ASN1_OBJECT**, const unsigned char**, int*, const X509_ALGOR**, const PKCS8_PRIV_KEY_INFO*);
const EVP_CIPHER* EVP_CIPHER_CTX_get0_cipher(const EVP_CIPHER_CTX*);
int mlock(const void*, size_t);
X509_REVOKED* d2i_X509_REVOKED(X509_REVOKED**, const unsigned char**, long);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY*, int, const unsigned char*, int);
int ASN1_UTCTIME_print(BIO*, const ASN1_UTCTIME*);
void OPENSSL_config(const char*);
const char* SSL_CIPHER_get_version(const SSL_CIPHER*);
int i2d_PKCS7_SIGN_ENVELOPE(const PKCS7_SIGN_ENVELOPE*, unsigned char**);
int X509_add1_reject_object(X509*, const ASN1_OBJECT*);
void OPENSSL_LH_node_stats(const OPENSSL_LHASH*, FILE*);
X509_EXTENSION* X509_EXTENSION_new();
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
int PKCS7_simple_smimecap(stack_st_X509_ALGOR*, int, int);
const SSL_METHOD* SSL_CTX_get_ssl_method(const SSL_CTX*);
DIST_POINT_NAME* d2i_DIST_POINT_NAME(DIST_POINT_NAME**, const unsigned char**, long);
char* qfcvt(long double, int, restrict int*, restrict int*);
PKCS7* PKCS7_new();
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM*, const char*);
OCSP_REVOKEDINFO* d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO**, const unsigned char**, long);
const EVP_CIPHER* EVP_camellia_128_cfb1();
void OCSP_CERTSTATUS_free(OCSP_CERTSTATUS*);
int strcmp(const  char*, const  char*);
int i2d_ASN1_ENUMERATED(const ASN1_ENUMERATED*, unsigned char**);
uint32_t X509_get_key_usage(X509*);
int UI_add_info_string(UI*, const char*);
X509_EXTENSION* OCSP_ONEREQ_delete_ext(OCSP_ONEREQ*, int);
int PEM_write_ECPrivateKey(FILE*, const EC_KEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
const BIO_METHOD* BIO_s_datagram();
int SSL_CTX_set_srp_username(SSL_CTX*,  char*);
void* ASN1_d2i_fp(void* ()*, d2i_of_void*, FILE*, void**);
void BN_free(BIGNUM*);
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO*, EVP_PKEY**, X509_ALGOR**, X509_ALGOR**);
const ASN1_TIME* X509_get0_notAfter(const X509*);
int (BIO*, const char*)* BIO_meth_get_puts(const BIO_METHOD*);
int accept(int, __SOCKADDR_ARG, restrict socklen_t*);
const ASN1_ITEM* PKCS7_ENCRYPT_it();
X509_NAME* d2i_X509_NAME(X509_NAME**, const unsigned char**, long);
const char* OSSL_EC_curve_nid2name(int);
int (EVP_CIPHER_CTX*, int, int, void*)* EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER*);
OCSP_RESPONSE* OCSP_sendreq_bio(BIO*, const char*, OCSP_REQUEST*);
int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX*, X509*);
int pthread_cond_broadcast(pthread_cond_t*);
int pthread_barrierattr_init(pthread_barrierattr_t*);
PKCS7_RECIP_INFO* PKCS7_RECIP_INFO_new();
int EC_GROUP_get_cofactor(const EC_GROUP*, BIGNUM*, BN_CTX*);
int statfs(const char*, statfs*);
int mkstemps( char*, int);
int SSL_CTX_set_tlsext_ticket_key_evp_cb(SSL_CTX*, int (SSL*, unsigned char*, unsigned char*, EVP_CIPHER_CTX*, EVP_MAC_CTX*, int)*);
void X509_STORE_set_get_crl(X509_STORE*, X509_STORE_CTX_get_crl_fn);
int PEM_do_header(EVP_CIPHER_INFO*, unsigned char*, long*, pem_password_cb*, void*);
int i2d_OCSP_CRLID(const OCSP_CRLID*, unsigned char**);
void SCT_set0_extensions(SCT*, unsigned char*, size_t);
void X509_get0_uids(const X509*, const ASN1_BIT_STRING**, const ASN1_BIT_STRING**);
ASN1_ENUMERATED* ASN1_ENUMERATED_new();
__ssize_t vmsplice(int, const iovec*, size_t, unsigned int);
void ASIdentifiers_free(ASIdentifiers*);
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO*, X509_ALGOR**);
int inet6_rth_add(void*, const in6_addr*);
PKEY_USAGE_PERIOD* d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD**, const unsigned char**, long);
X509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(const X509_STORE_CTX*);
int execle(const char*, const char*);
const SSL_METHOD* TLSv1_1_server_method();
int ENGINE_set_RAND(ENGINE*, const RAND_METHOD*);
void BN_BLINDING_set_current_thread(BN_BLINDING*);
void EVP_PKEY_free(EVP_PKEY*);
const char* CONF_imodule_get_value(const CONF_IMODULE*);
X509_EXTENSION* OCSP_crlID_new(const char*, long*,  char*);
int X509_set_version(X509*, long);
void RSA_OAEP_PARAMS_free(RSA_OAEP_PARAMS*);
int siggetmask();
int symlinkat(const char*, int, const char*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_from_pkey(OSSL_LIB_CTX*, EVP_PKEY*, const char*);
int gai_error(gaicb*);
int EVP_PKEY_get_security_bits(const EVP_PKEY*);
ASN1_SCTX* ASN1_SCTX_new(int (ASN1_SCTX*)*);
int i2d_GENERAL_NAME(const GENERAL_NAME*, unsigned char**);
int sigfillset(sigset_t*);
int getgrgid_r(__gid_t, restrict group*, restrict  char*, size_t, restrict group**);
int bind(int, __CONST_SOCKADDR_ARG, socklen_t);
int BIO_test_flags(const BIO*, int);
int EVP_PKEY_set_type_by_keymgmt(EVP_PKEY*, EVP_KEYMGMT*);
int X509_CRL_add1_ext_i2d(X509_CRL*, int, void*, int, unsigned long);
int BN_usub(BIGNUM*, const BIGNUM*, const BIGNUM*);
int RAND_status();
stack_st_X509_EXTENSION* X509_REQ_get_extensions(X509_REQ*);
GENERAL_NAME* a2i_GENERAL_NAME(GENERAL_NAME*, const X509V3_EXT_METHOD*, X509V3_CTX*, int, const char*, int);
int acct(const char*);
int pcre32_get_stringtable_entries(const pcre32*, const unsigned int*, unsigned int**, unsigned int**);
_Float64 strtof64(restrict const char*, restrict  char**);
size_t SSL_get_finished(const SSL*, void*, size_t);
int isctype(int, int);
void SSL_CTX_set_psk_client_callback(SSL_CTX*, SSL_psk_client_cb_func);
void BN_consttime_swap(unsigned long, BIGNUM*, BIGNUM*, int);
int BIO_meth_set_create(BIO_METHOD*, int (BIO*)*);
X509_EXTENSION* X509V3_EXT_conf(lhash_st_CONF_VALUE*, X509V3_CTX*, const char*, const char*);
void BN_BLINDING_free(BN_BLINDING*);
int pipe2(int[2], int);
int i2d_ASN1_IA5STRING(const ASN1_IA5STRING*, unsigned char**);
int ERR_load_SSL_strings();
PKCS7_ENCRYPT* PKCS7_ENCRYPT_new();
int deflateInit2_(z_streamp, int, int, int, int, int, const char*, int);
int BN_sqr(BIGNUM*, const BIGNUM*, BN_CTX*);
EC_KEY* EC_KEY_copy(EC_KEY*, const EC_KEY*);
void X509_CRL_free(X509_CRL*);
void CONF_set_nconf(CONF*, lhash_st_CONF_VALUE*);
X509_EXTENSION* d2i_X509_EXTENSION(X509_EXTENSION**, const unsigned char**, long);
int DSA_set0_pqg(DSA*, BIGNUM*, BIGNUM*, BIGNUM*);
const SSL_METHOD* DTLSv1_client_method();
void X509_SIG_getm(X509_SIG*, X509_ALGOR**, ASN1_OCTET_STRING**);
int _tolower(int);
int i2d_ASN1_BMPSTRING(const ASN1_BMPSTRING*, unsigned char**);
stack_st_X509* X509_STORE_CTX_get0_chain(const X509_STORE_CTX*);
int i2d_DSAparams(const DSA*, unsigned char**);
int OCSP_RESPID_set_by_name(OCSP_RESPID*, X509*);
const BIO_METHOD* BIO_f_md();
const EVP_CIPHER* EVP_cast5_ecb();
int ASN1_TIME_to_tm(const ASN1_TIME*, tm*);
int chmod(const char*, __mode_t);
const OSSL_PARAM* EVP_MAC_CTX_gettable_params(EVP_MAC_CTX*);
BIO* BIO_get_retry_BIO(BIO*, int*);
PKCS7* PKCS7_sign(X509*, EVP_PKEY*, stack_st_X509*, BIO*, int);
int PEM_write_PKCS8PrivateKey(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
const COMP_METHOD* COMP_CTX_get_method(const COMP_CTX*);
const EVP_CIPHER* EVP_aes_128_cfb128();
int pcre16_get_named_substring(const pcre16*, const unsigned short*, int*, int, const unsigned short*, const unsigned short**);
int OCSP_RESPONSE_print(BIO*, OCSP_RESPONSE*, unsigned long);
int SSL_set_session_ticket_ext(SSL*, void*, int);
EVP_PKEY* X509_PUBKEY_get0(const X509_PUBKEY*);
OSSL_PROVIDER* EVP_KEM_get0_provider(const EVP_KEM*);
void pcre_jit_free_unused_memory();
void ASRange_free(ASRange*);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
int i2d_OTHERNAME(const OTHERNAME*, unsigned char**);
int ENGINE_set_name(ENGINE*, const char*);
int EVP_DecodeUpdate(EVP_ENCODE_CTX*, unsigned char*, int*, const unsigned char*, int);
char* setstate( char*);
int gzprintf(gzFile, const char*);
ASN1_STRING* ASN1_STRING_set_by_NID(ASN1_STRING**, const unsigned char*, int, int, int);
int EVP_PKEY_set_int_param(EVP_PKEY*, const char*, int);
int X509_CRL_set_version(X509_CRL*, long);
ssize_t recvfrom(int, restrict void*, size_t, int, __SOCKADDR_ARG, restrict socklen_t*);
int RAND_set_rand_engine(ENGINE*);
const char* EVP_MD_get0_name(const EVP_MD*);
int BIO_dump_fp(FILE*, const void*, int);
const OSSL_PARAM* EVP_SIGNATURE_settable_ctx_params(const EVP_SIGNATURE*);
RSA* PEM_read_bio_RSA_PUBKEY(BIO*, RSA**, pem_password_cb*, void*);
char* inet_neta(in_addr_t,  char*, size_t);
void ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX*, stack_st_ADMISSIONS*);
int X509_REVOKED_set_serialNumber(X509_REVOKED*, ASN1_INTEGER*);
int ASN1_ENUMERATED_set(ASN1_ENUMERATED*, long);
int EC_GROUP_get_field_type(const EC_GROUP*);
int CRYPTO_secure_malloc_initialized();
int vasprintf(restrict  char**, restrict const char*, __gnuc_va_list);
off64_t gzseek64(gzFile, off64_t, int);
void EVP_PKEY_meth_set_digestverify(EVP_PKEY_METHOD*, int (EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)*);
int OSSL_PARAM_set_time_t(OSSL_PARAM*, time_t);
const stack_st_X509_EXTENSION* X509_REVOKED_get0_extensions(const X509_REVOKED*);
int OSSL_PARAM_get_octet_string_ptr(const OSSL_PARAM*, const void**, size_t*);
long int gethostid();
void SSL_CTX_set_not_resumable_session_callback(SSL_CTX*, int (SSL*, int)*);
int SSL_CTX_use_certificate_file(SSL_CTX*, const char*, int);
const char* OSSL_default_cipher_list();
BIO* PKCS7_dataInit(PKCS7*, BIO*);
const ASN1_ITEM* ASIdentifierChoice_it();
X509_EXTENSION* X509V3_EXT_nconf_nid(CONF*, X509V3_CTX*, int, const char*);
EVP_PKEY* b2i_PrivateKey_bio(BIO*);
int glob64(restrict const char*, int, int (const char*, int)*, restrict glob64_t*);
int getcpu(unsigned int*, unsigned int*);
void globfree64(glob64_t*);
EVP_PKEY* EVP_PKCS82PKEY_ex(const PKCS8_PRIV_KEY_INFO*, OSSL_LIB_CTX*, const char*);
int SSL_peek(SSL*, void*, int);
const EVP_CIPHER* EVP_des_ede();
int ECDSA_SIG_set0(ECDSA_SIG*, BIGNUM*, BIGNUM*);
const OSSL_PARAM* EVP_PKEY_CTX_gettable_params(const EVP_PKEY_CTX*);
int SSL_SESSION_set_ex_data(SSL_SESSION*, int, void*);
CRYPTO_RWLOCK* CRYPTO_THREAD_lock_new();
int X509_STORE_set_purpose(X509_STORE*, int);
char* strerror_l(int, locale_t);
int SSL_set_session_ticket_ext_cb(SSL*, tls_session_ticket_ext_cb_fn, void*);
int X509_TRUST_get_flags(const X509_TRUST*);
TLS_FEATURE* TLS_FEATURE_new();
void IPAddressChoice_free(IPAddressChoice*);
void EVP_MAC_CTX_free(EVP_MAC_CTX*);
__pid_t fork();
GENERAL_NAME* d2i_GENERAL_NAME(GENERAL_NAME**, const unsigned char**, long);
int i2a_ASN1_INTEGER(BIO*, const ASN1_INTEGER*);
X509_STORE_CTX* X509_STORE_CTX_get0_parent_ctx(const X509_STORE_CTX*);
int SSL_use_certificate(SSL*, X509*);
void POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS*);
void* OPENSSL_sk_set(OPENSSL_STACK*, int, const void*);
int UI_dup_input_boolean(UI*, const char*, const char*, const char*, const char*, int,  char*);
BIGNUM* BN_mod_inverse(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const EVP_MD* EVP_MD_CTX_md(const EVP_MD_CTX*);
long BIO_debug_callback(BIO*, int, const char*, int, long, long);
int BN_GF2m_mod(BIGNUM*, const BIGNUM*, const BIGNUM*);
int sched_getcpu();
int i2d_X509_fp(FILE*, const X509*);
RSA_OAEP_PARAMS* d2i_RSA_OAEP_PARAMS(RSA_OAEP_PARAMS**, const unsigned char**, long);
unsigned long long int strtouq(restrict const char*, restrict  char**, int);
OPENSSL_LHASH* OPENSSL_LH_new(OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC);
int pthread_getattr_np(pthread_t, pthread_attr_t*);
const char* EVP_SIGNATURE_get0_name(const EVP_SIGNATURE*);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE*, const PKCS8_PRIV_KEY_INFO*);
int EVP_PKEY_CTX_get_dh_kdf_type(EVP_PKEY_CTX*);
char* getusershell();
void ASYNC_cleanup_thread();
int fflush_unlocked(FILE*);
int X509_signature_print(BIO*, const X509_ALGOR*, const ASN1_STRING*);
const ASN1_ITEM* OCSP_CERTID_it();
char* BIO_ADDR_service_string(const BIO_ADDR*, int);
int EVP_PKEY_CTX_set_kem_op(EVP_PKEY_CTX*, const char*);
int SSL_set_block_padding(SSL*, size_t);
void ENGINE_register_all_RSA();
const OSSL_PARAM* EVP_MD_gettable_params(const EVP_MD*);
void OPENSSL_LH_stats_bio(const OPENSSL_LHASH*, BIO*);
const EVP_CIPHER* EVP_aria_128_cfb1();
int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX*, X509*);
int X509_CRL_get_signature_nid(const X509_CRL*);
EVP_PKEY* ENGINE_load_public_key(ENGINE*, const char*, UI_METHOD*, void*);
unsigned long int strtoul(const  char*,  char**, int);
PKCS7_ISSUER_AND_SERIAL* PKCS7_ISSUER_AND_SERIAL_new();
const DH_METHOD* ENGINE_get_DH(const ENGINE*);
OSSL_PROVIDER* EVP_KEYEXCH_get0_provider(const EVP_KEYEXCH*);
int inet6_rth_segments(const void*);
stack_st_X509_CRL* X509_STORE_CTX_get1_crls(const X509_STORE_CTX*, const X509_NAME*);
int EVP_EncodeBlock(unsigned char*, const unsigned char*, int);
BIO* BIO_new_mem_buf(const void*, int);
int fseeko(FILE*, __off64_t, int);
void DSA_get0_pqg(const DSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
OCSP_SIGNATURE* d2i_OCSP_SIGNATURE(OCSP_SIGNATURE**, const unsigned char**, long);
int SSL_CTX_load_verify_locations(SSL_CTX*, const char*, const char*);
DSA_METHOD* DSA_meth_dup(const DSA_METHOD*);
int ERR_load_strings(int, ERR_STRING_DATA*);
int i2d_OCSP_REQINFO(const OCSP_REQINFO*, unsigned char**);
unsigned X509v3_addr_get_afi(const IPAddressFamily*);
void GENERAL_SUBTREE_free(GENERAL_SUBTREE*);
X509_STORE* X509_STORE_CTX_get0_store(const X509_STORE_CTX*);
int SSL_get_read_ahead(const SSL*);
int epoll_create1(int);
EVP_PKEY* X509_REQ_get0_pubkey(X509_REQ*);
int SSL_CTX_use_psk_identity_hint(SSL_CTX*, const char*);
const EVP_CIPHER* EVP_des_ede3_cbc();
__ssize_t readahead(int, __off64_t, size_t);
const EVP_CIPHER* EVP_desx_cbc();
X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(const X509_STORE_CTX*);
ssize_t readlinkat(int, restrict const char*, restrict  char*, size_t);
const char* sigabbrev_np(int);
int ENGINE_set_DSA(ENGINE*, const DSA_METHOD*);
SSL_DANE* SSL_get0_dane(SSL*);
int BIO_puts(BIO*, const char*);
void ASIdOrRange_free(ASIdOrRange*);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_get0_asn1(const EVP_PKEY*);
int X509V3_set_issuer_pkey(X509V3_CTX*, EVP_PKEY*);
int SHA512_Update(SHA512_CTX*, const void*, size_t);
const char* OBJ_NAME_get(const char*, int);
const char* EVP_KEM_get0_description(const EVP_KEM*);
void EVP_CIPHER_meth_free(EVP_CIPHER*);
void pcre16_assign_jit_stack(pcre16_extra*, pcre16_jit_callback, void*);
const char* EVP_KEM_get0_name(const EVP_KEM*);
OCSP_BASICRESP* d2i_OCSP_BASICRESP(OCSP_BASICRESP**, const unsigned char**, long);
void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION*);
BIGNUM* BN_get_rfc3526_prime_8192(BIGNUM*);
void* OPENSSL_LH_retrieve(OPENSSL_LHASH*, const void*);
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD*);
ASN1_OCTET_STRING* X509_digest_sig(const X509*, EVP_MD**, int*);
const ASN1_ITEM* ASN1_OCTET_STRING_NDEF_it();
X509* PEM_read_X509(FILE*, X509**, pem_password_cb*, void*);
void pcre16_free_study(pcre16_extra*);
int X509_TRUST_set(int*, int);
int EVP_PKEY_CTX_set_dh_paramgen_gindex(EVP_PKEY_CTX*, int);
int X509V3_EXT_CRL_add_conf(lhash_st_CONF_VALUE*, X509V3_CTX*, const char*, X509_CRL*);
const char* SSL_get_servername(const SSL*, const int);
const BIGNUM* EC_GROUP_get0_cofactor(const EC_GROUP*);
netent* getnetbyname(const char*);
const RSA_PSS_PARAMS* RSA_get0_pss_params(const RSA*);
void OPENSSL_thread_stop_ex(OSSL_LIB_CTX*);
void pcre_free_substring(const char*);
NETSCAPE_SPKI* d2i_NETSCAPE_SPKI(NETSCAPE_SPKI**, const unsigned char**, long);
int SHA256_Update(SHA256_CTX*, const void*, size_t);
void SSL_certs_clear(SSL*);
const ASN1_ITEM* NETSCAPE_SPKI_it();
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP*, int, int);
int (EVP_CIPHER_CTX*, ASN1_TYPE*)* EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER*);
int _dl_find_object(void*, dl_find_object*);
int BN_BLINDING_is_current_thread(BN_BLINDING*);
int pcre_copy_named_substring(const pcre*, const char*, int*, int, const char*,  char*, int);
int EC_GROUP_order_bits(const EC_GROUP*);
unsigned long int fread(void*, unsigned long int, unsigned long int, FILE*);
unsigned short int* seed48(unsigned short int[3]);
unsigned short BIO_ADDR_rawport(const BIO_ADDR*);
void BIO_ADDR_clear(BIO_ADDR*);
int EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX*, int);
int X509_PURPOSE_get_id(const X509_PURPOSE*);
int (EVP_MD_CTX*, const void*, size_t)* EVP_MD_CTX_update_fn(EVP_MD_CTX*);
BIO* BIO_new_fp(FILE*, int);
int EVP_PKEY_verify_init(EVP_PKEY_CTX*);
const ASN1_ITEM* ASN1_SEQUENCE_ANY_it();
int SSL_CTX_set_ciphersuites(SSL_CTX*, const char*);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE*, long, unsigned char*, int);
const stack_st_SCT* SSL_get0_peer_scts(SSL*);
int setstate_r(restrict  char*, restrict random_data*);
int EVP_PKEY_CTX_get_params(EVP_PKEY_CTX*, OSSL_PARAM*);
IPAddressOrRange* d2i_IPAddressOrRange(IPAddressOrRange**, const unsigned char**, long);
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP*, int, void*, int, unsigned long);
int i2d_X509_EXTENSION(const X509_EXTENSION*, unsigned char**);
int ENGINE_set_default_digests(ENGINE*);
int setns(int, int);
int BIO_ADDR_rawmake(BIO_ADDR*, int, const void*, size_t, unsigned short);
int pcre32_config(int, void*);
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO*);
const ASN1_ITEM* ASN1_IA5STRING_it();
int EVP_PKEY_CTX_set_dh_kdf_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_MD_is_a(const EVP_MD*, const char*);
void PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO*, ASN1_PRINTABLESTRING*);
int ENGINE_ctrl_cmd(ENGINE*, const char*, long, void*, void ()*, int);
int DH_generate_key(DH*);
const ASN1_ITEM* AUTHORITY_KEYID_it();
int EVP_add_digest(const EVP_MD*);
int EVP_PKEY_get_field_type(const EVP_PKEY*);
int pthread_condattr_getclock(restrict const pthread_condattr_t*, restrict __clockid_t*);
int EVP_PKEY_fromdata_init(EVP_PKEY_CTX*);
int OSSL_LIB_CTX_load_config(OSSL_LIB_CTX*, const char*);
void BIO_set_data(BIO*, void*);
int EVP_DecryptInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*);
int CRYPTO_atomic_add(int*, int, int*, CRYPTO_RWLOCK*);
group* getgrnam(const char*);
DH* DH_generate_parameters(int, int, void (int, int, void*)*, void*);
int EVP_MD_CTX_get_params(EVP_MD_CTX*, OSSL_PARAM[]);
int SSL_session_reused(const SSL*);
int faccessat(int, const char*, int, int);
int SSL_CTX_use_serverinfo(SSL_CTX*, const unsigned char*, size_t);
int iscntrl_l(int, locale_t);
SSL_CTX* SSL_CTX_new(const SSL_METHOD*);
int futimesat(int, const char*, const timeval[2]);
int posix_madvise(void*, size_t, int);
char* X509_PURPOSE_get0_name(const X509_PURPOSE*);
int pthread_mutexattr_getrobust_np(pthread_mutexattr_t*, int*);
int SSL_CTX_dane_mtype_set(SSL_CTX*, const EVP_MD*, uint8_t, uint8_t);
PBKDF2PARAM* d2i_PBKDF2PARAM(PBKDF2PARAM**, const unsigned char**, long);
EVP_PKEY* CTLOG_get0_public_key(const CTLOG*);
int EC_POINT_set_to_infinity(const EC_GROUP*, EC_POINT*);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find_str(ENGINE**, const char*, int);
void RSA_meth_free(RSA_METHOD*);
ASN1_OBJECT* OBJ_nid2obj(int);
int PEM_read_bio(BIO*,  char**,  char**, unsigned char**, long*);
int EVP_SealFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int EC_GROUP_get_curve_name(const EC_GROUP*);
void RAND_seed(const void*, int);
int X509_REQ_get_attr_by_NID(const X509_REQ*, int, int);
int SSL_set_tlsext_use_srtp(SSL*, const char*);
void EVP_KEYMGMT_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEYMGMT*, void*)*, void*);
int SSL_CTX_set1_param(SSL_CTX*, X509_VERIFY_PARAM*);
const ASN1_ITEM* ISSUING_DIST_POINT_it();
void SCT_print(const SCT*, BIO*, int, const CTLOG_STORE*);
ASN1_UTCTIME* d2i_ASN1_UTCTIME(ASN1_UTCTIME**, const unsigned char**, long);
void* ASN1_item_d2i_fp(const ASN1_ITEM*, FILE*, void*);
stack_st_CONF_VALUE* X509V3_get_section(X509V3_CTX*, const char*);
double difftime(time_t, time_t);
void pcre32_free_study(pcre32_extra*);
ASN1_OCTET_STRING* SXNET_get_id_asc(SXNET*, const char*);
int siginterrupt(int, int);
const ASN1_ITEM* X509_REVOKED_it();
DIST_POINT* d2i_DIST_POINT(DIST_POINT**, const unsigned char**, long);
int BIO_asn1_set_suffix(BIO*, asn1_ps_func*, asn1_ps_func*);
int X509_REQ_extension_nid(int);
int pkey_get(int);
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX*);
int SSL_renegotiate_pending(const SSL*);
void SSL_set_msg_callback(SSL*, void (int, int, int, const void*, size_t, SSL*, void*)*);
int usleep(__useconds_t);
const ASN1_ITEM* X509_ATTRIBUTE_it();
tm* localtime(const time_t*);
int SSL_stateless(SSL*);
ASN1_TIME* ASN1_TIME_dup(const ASN1_TIME*);
int pcre32_dfa_exec(const pcre32*, const pcre32_extra*, const unsigned int*, int, int, int, int*, int, int*, int);
const char* UI_get0_output_string(UI_STRING*);
const ASN1_ITEM* POLICYQUALINFO_it();
int SSL_add_client_CA(SSL*, X509*);
sem_t* sem_open(const char*, int);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY*, int, int);
char* stpcpy( char*, const  char*);
EVP_ASYM_CIPHER* EVP_ASYM_CIPHER_fetch(OSSL_LIB_CTX*, const char*, const char*);
EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_new(int, int, const char*, const char*);
void* SSL_SESSION_get_ex_data(const SSL_SESSION*, int);
int fgetgrent_r(restrict FILE*, restrict group*, restrict  char*, size_t, restrict group**);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD*);
const EVP_CIPHER* EVP_aes_128_xts();
X509* PKCS7_cert_from_signer_info(PKCS7*, PKCS7_SIGNER_INFO*);
ASN1_TIME* X509_getm_notBefore(const X509*);
int BN_is_word(const BIGNUM*, const unsigned long);
uint32_t SSL_get_recv_max_early_data(const SSL*);
SXNETID* d2i_SXNETID(SXNETID**, const unsigned char**, long);
int EC_KEY_print(BIO*, const EC_KEY*, int);
void SSL_free(SSL*);
int EVP_PKEY_CTX_get0_dh_kdf_oid(EVP_PKEY_CTX*, ASN1_OBJECT**);
PKCS7* PEM_read_bio_PKCS7(BIO*, PKCS7**, pem_password_cb*, void*);
int X509v3_addr_validate_path(X509_STORE_CTX*);
int ASN1_item_i2d_fp(const ASN1_ITEM*, FILE*, const void*);
int i2d_RSA_PUBKEY(const RSA*, unsigned char**);
int strncmp(const  char*, const  char*, unsigned long int);
int SSL_SESSION_set_protocol_version(SSL_SESSION*, int);
ssize_t send(int, const void*, size_t, int);
int strncasecmp_l(const char*, const char*, size_t, locale_t);
int PKCS7_set_cipher(PKCS7*, const EVP_CIPHER*);
int i2d_ASIdOrRange(const ASIdOrRange*, unsigned char**);
void EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD*, int (unsigned char**, size_t*, const EC_POINT*, const EC_KEY*)**);
int ASN1_parse(BIO*, const unsigned char*, long, int);
int BN_bntest_rand(BIGNUM*, int, int, int);
void pcre_free_substring_list(const char**);
int inet6_option_next(const cmsghdr*, uint8_t**);
void ASN1_TYPE_set(ASN1_TYPE*, int, void*);
int X509_set_pubkey(X509*, EVP_PKEY*);
const EVP_CIPHER* EVP_camellia_192_cfb1();
int SSL_read(SSL*, void*, int);
size_t EC_KEY_priv2buf(const EC_KEY*, unsigned char**);
EVP_PKEY* d2i_PrivateKey_bio(BIO*, EVP_PKEY**);
int X509_LOOKUP_by_alias(X509_LOOKUP*, X509_LOOKUP_TYPE, const char*, int, X509_OBJECT*);
void EVP_PKEY_meth_get0_info(int*, int*, const EVP_PKEY_METHOD*);
int ENGINE_ctrl_cmd_string(ENGINE*, const char*, const char*, int);
int lstat(restrict const char*, restrict stat*);
int dysize(int);
DSA* d2i_DSAPrivateKey_fp(FILE*, DSA**);
long BIO_ctrl(BIO*, int, long, void*);
int PEM_write_DSA_PUBKEY(FILE*, const DSA*);
uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM*);
int ASN1_item_verify_ctx(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, EVP_MD_CTX*);
const OSSL_PARAM* OSSL_PARAM_locate_const(const OSSL_PARAM*, const char*);
gzFile gzopen64(const char*, const char*);
int PEM_write_bio_X509_PUBKEY(BIO*, const X509_PUBKEY*);
void UI_set_default_method(const UI_METHOD*);
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ*);
int EC_POINT_set_affine_coordinates(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
ENGINE* ENGINE_get_cipher_engine(int);
void ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX*, GENERAL_NAME*);
void ADMISSIONS_set0_namingAuthority(ADMISSIONS*, NAMING_AUTHORITY*);
EC_KEY* PEM_read_EC_PUBKEY(FILE*, EC_KEY**, pem_password_cb*, void*);
int X509V3_extensions_print(BIO*, const char*, const stack_st_X509_EXTENSION*, unsigned long, int);
__pid_t __getpgid(__pid_t);
void __pthread_register_cancel(__pthread_unwind_buf_t*);
EVP_KEYMGMT* EVP_KEYMGMT_fetch(OSSL_LIB_CTX*, const char*, const char*);
void EVP_RAND_CTX_free(EVP_RAND_CTX*);
int RSA_X931_derive_ex(RSA*, BIGNUM*, BIGNUM*, BIGNUM*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_GENCB*);
int SSL_CTX_get_quiet_shutdown(const SSL_CTX*);
int ASN1_ENUMERATED_get_int64(int64_t*, const ASN1_ENUMERATED*);
int i2d_X509_REQ_INFO(const X509_REQ_INFO*, unsigned char**);
void X509_CRL_get0_signature(const X509_CRL*, const ASN1_BIT_STRING**, const X509_ALGOR**);
BIO* BIO_new_ex(OSSL_LIB_CTX*, const BIO_METHOD*);
__ssize_t getdirentries(int, restrict  char*, size_t, restrict __off64_t*);
int EVP_RAND_get_state(EVP_RAND_CTX*);
int SSL_set_recv_max_early_data(SSL*, uint32_t);
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO*);
void POLICYQUALINFO_free(POLICYQUALINFO*);
ASN1_IA5STRING* s2i_ASN1_IA5STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
int getrpcbynumber_r(int, rpcent*,  char*, size_t, rpcent**);
void (const SSL*, int, int)* SSL_get_info_callback(const SSL*);
const EC_METHOD* EC_POINT_method_of(const EC_POINT*);
PKCS7* PKCS7_encrypt_ex(stack_st_X509*, BIO*, const EVP_CIPHER*, int, OSSL_LIB_CTX*, const char*);
long X509_REQ_get_version(const X509_REQ*);
const unsigned char* pcre32_maketables();
PKCS7_DIGEST* PKCS7_DIGEST_new();
uint32_t SSL_CIPHER_get_id(const SSL_CIPHER*);
const ASN1_TIME* X509_REVOKED_get0_revocationDate(const X509_REVOKED*);
stack_st_X509_INFO* PEM_X509_INFO_read_ex(FILE*, stack_st_X509_INFO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
X509* d2i_X509_fp(FILE*, X509**);
int EVP_PKEY_CTX_set_ecdh_kdf_outlen(EVP_PKEY_CTX*, int);
char* dlerror();
int DSA_sign_setup(DSA*, BN_CTX*, BIGNUM**, BIGNUM**);
int pthread_mutex_setprioceiling(restrict pthread_mutex_t*, int, restrict int*);
void* mempcpy(void*, const void*, unsigned long int);
IPAddressFamily* d2i_IPAddressFamily(IPAddressFamily**, const unsigned char**, long);
int* __h_errno_location();
int ENGINE_register_DSA(ENGINE*);
int remove(const char*);
int EVP_RAND_up_ref(EVP_RAND*);
__pid_t tcgetpgrp(int);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD*);
ENGINE* ENGINE_get_prev(ENGINE*);
int EVP_RAND_CTX_get_params(EVP_RAND_CTX*, OSSL_PARAM[]);
SSL_SESSION* PEM_read_bio_SSL_SESSION(BIO*, SSL_SESSION**, pem_password_cb*, void*);
pcre32_extra* pcre32_study(const pcre32*, int, const char**);
const char* OPENSSL_version_pre_release();
int __uflow(FILE*);
int EVP_PKEY_CTX_get_dh_kdf_md(EVP_PKEY_CTX*, const EVP_MD**);
int SSL_new_session_ticket(SSL*);
int pthread_mutex_destroy(pthread_mutex_t*);
POLICYQUALINFO* POLICYQUALINFO_new();
int OSSL_PARAM_set_ulong(OSSL_PARAM*, unsigned long int);
void SSL_trace(int, int, int, const void*, size_t, SSL*, void*);
int execve(const char*, const  char*[], const  char*[]);
EC_KEY* d2i_ECPrivateKey_bio(BIO*, EC_KEY**);
const ASN1_ITEM* IPAddressRange_it();
OSSL_PARAM OSSL_PARAM_construct_int(const char*, int*);
const ASN1_ITEM* NETSCAPE_CERT_SEQUENCE_it();
X509_STORE* SSL_CTX_get_cert_store(const SSL_CTX*);
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO*);
int X509_REQ_check_private_key(X509_REQ*, EVP_PKEY*);
int DSA_verify(int, const unsigned char*, int, const unsigned char*, int, DSA*);
const ASN1_ITEM* ADMISSIONS_it();
char* __strtok_r(restrict  char*, restrict const char*, restrict  char**);
_Float128 strtof128(restrict const char*, restrict  char**);
int SSL_get_sigalgs(SSL*, int, int*, int*, int*, unsigned char*, unsigned char*);
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO*, const NETSCAPE_CERT_SEQUENCE*);
int inet_aton(const char*, in_addr*);
int SSL_CTX_set_ssl_version(SSL_CTX*, const SSL_METHOD*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_dup(const ASN1_GENERALIZEDTIME*);
int BN_reciprocal(BIGNUM*, const BIGNUM*, int, BN_CTX*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE**, int, int, const void*, int);
int X509_cmp_current_time(const ASN1_TIME*);
int socketpair(int, int, int, int[2]);
BN_BLINDING* BN_BLINDING_create_param(BN_BLINDING*, const BIGNUM*, BIGNUM*, BN_CTX*, int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*, BN_MONT_CTX*);
void IPAddressFamily_free(IPAddressFamily*);
int isgraph_l(int, locale_t);
int futimes(int, const timeval[2]);
char* i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD*, const ASN1_ENUMERATED*);
EDIPARTYNAME* EDIPARTYNAME_new();
BN_MONT_CTX* EC_GROUP_get_mont_data(const EC_GROUP*);
unsigned long EVP_MD_meth_get_flags(const EVP_MD*);
int close(int);
const unsigned char* EVP_PKEY_get0_poly1305(const EVP_PKEY*, size_t*);
int EVP_PKEY_asn1_add_alias(int, int);
double drand48();
int X509_CRL_get_ext_by_NID(const X509_CRL*, int, int);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find(ENGINE**, int);
X509_ATTRIBUTE* X509_ATTRIBUTE_new();
int i2d_PKCS8_fp(FILE*, const X509_SIG*);
int pthread_setcancelstate(int, int*);
ASN1_TIME* ASN1_TIME_adj(ASN1_TIME*, time_t, int, long);
int DH_meth_set_finish(DH_METHOD*, int (DH*)*);
int setreuid(__uid_t, __uid_t);
int i2d_OCSP_SIGNATURE(const OCSP_SIGNATURE*, unsigned char**);
int EVP_PKEY_CTX_set_rsa_padding(EVP_PKEY_CTX*, int);
int lchmod(const char*, __mode_t);
int SSL_SESSION_set_cipher(SSL_SESSION*, const SSL_CIPHER*);
int OSSL_HTTP_close(OSSL_HTTP_REQ_CTX*, int);
EVP_PKEY_CTX* EVP_PKEY_CTX_dup(const EVP_PKEY_CTX*);
ASN1_NULL* ASN1_NULL_new();
void perror(const char*);
const BIGNUM* EC_GROUP_get0_order(const EC_GROUP*);
int EVP_PKEY_parameters_eq(const EVP_PKEY*, const EVP_PKEY*);
int PEM_write_ECPKParameters(FILE*, const EC_GROUP*);
int PKCS7_content_new(PKCS7*, int);
int BIO_set_tcp_ndelay(int, int);
void EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
int X509_REQ_add_extensions(X509_REQ*, const stack_st_X509_EXTENSION*);
void flockfile(FILE*);
int i2d_ASRange(const ASRange*, unsigned char**);
X509* X509_new_ex(OSSL_LIB_CTX*, const char*);
OCSP_CERTSTATUS* d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS**, const unsigned char**, long);
int posix_fallocate(int, __off64_t, __off64_t);
int BIO_parse_hostserv(const char*,  char**,  char**, BIO_hostserv_priorities);
OSSL_LIB_CTX* OSSL_LIB_CTX_get0_global_default();
const OSSL_PARAM* EVP_RAND_gettable_ctx_params(const EVP_RAND*);
int ASN1_INTEGER_get_uint64(uint64_t*, const ASN1_INTEGER*);
const ec_key_st* EVP_PKEY_get0_EC_KEY(const EVP_PKEY*);
int EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(EVP_PKEY_CTX*, const char*, const char*);
int i2d_IPAddressFamily(const IPAddressFamily*, unsigned char**);
int (const unsigned char*, int, DSA_SIG*, DSA*)* DSA_meth_get_verify(const DSA_METHOD*);
int BN_nist_mod_192(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const EVP_CIPHER* EVP_camellia_128_cfb8();
stack_st_X509_NAME* SSL_CTX_get_client_CA_list(const SSL_CTX*);
const char* SSL_SESSION_get0_hostname(const SSL_SESSION*);
unsigned long SSL_dane_set_flags(SSL*, unsigned long);
int X509V3_EXT_add_list(X509V3_EXT_METHOD*);
time_t timelocal(tm*);
int OBJ_create_objects(BIO*);
int EVP_PKEY_set_params(EVP_PKEY*, OSSL_PARAM[]);
int* __errno_location();
int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD*);
OCSP_ONEREQ* OCSP_request_onereq_get0(OCSP_REQUEST*, int);
EVP_PKEY* EVP_PKEY_new_CMAC_key(ENGINE*, const unsigned char*, size_t, const EVP_CIPHER*);
int UI_dup_error_string(UI*, const char*);
void X509_PURPOSE_cleanup();
pthread_t pthread_self();
RSA_METHOD* RSA_meth_new(const char*, int);
unsigned long EVP_CIPHER_get_flags(const EVP_CIPHER*);
void* OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP*, int, int*, int*);
void ECDSA_SIG_free(ECDSA_SIG*);
const BIGNUM* DH_get0_pub_key(const DH*);
int EC_KEY_up_ref(EC_KEY*);
char* strsep(restrict  char**, restrict const char*);
int name_to_handle_at(int, const char*, file_handle*, int*, int);
int statx(int, restrict const char*, int, unsigned int, restrict statx*);
const stack_st_X509_NAME* SSL_get0_CA_list(const SSL*);
int i2d_PKCS8_PRIV_KEY_INFO(const PKCS8_PRIV_KEY_INFO*, unsigned char**);
ASN1_TYPE* d2i_ASN1_TYPE(ASN1_TYPE**, const unsigned char**, long);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY*, const ASN1_OBJECT*, int);
int SSL_version(const SSL*);
int (RSA*)* RSA_meth_get_init(const RSA_METHOD*);
int execv(const char*, const  char*[]);
void* BIO_get_data(BIO*);
int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)* SSL_CTX_get_security_callback(const SSL_CTX*);
int X509_REQ_print_ex(BIO*, X509_REQ*, unsigned long, unsigned long);
int fdatasync(int);
int i2d_X509_ALGOR(const X509_ALGOR*, unsigned char**);
void DH_set_flags(DH*, int);
int ENGINE_set_default_RSA(ENGINE*);
DSA_SIG* (const unsigned char*, int, DSA*)* DSA_meth_get_sign(const DSA_METHOD*);
int rename(const char*, const char*);
void ASN1_PRINTABLE_free(ASN1_STRING*);
size_t SSL_get_num_tickets(const SSL*);
void* SSL_get_record_padding_callback_arg(const SSL*);
X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(const X509_STORE*);
unsigned long int strcspn(const  char*, const  char*);
AUTHORITY_INFO_ACCESS* d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS**, const unsigned char**, long);
int sethostid(long int);
int pthread_mutexattr_setprioceiling(pthread_mutexattr_t*, int);
int gzclose_w(gzFile);
void X509_PUBKEY_free(X509_PUBKEY*);
int BIO_meth_set_read_ex(BIO_METHOD*, int (BIO*,  char*, size_t, size_t*)*);
long int sysconf(int);
void OCSP_CRLID_free(OCSP_CRLID*);
int clock_getcpuclockid(pid_t, clockid_t*);
int BN_is_odd(const BIGNUM*);
void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int UI_get_result_minsize(UI_STRING*);
EC_GROUP* EC_GROUP_new_by_curve_name_ex(OSSL_LIB_CTX*, const char*, int);
int RSA_padding_check_none(unsigned char*, int, const unsigned char*, int, int);
int BIO_asn1_get_prefix(BIO*, asn1_ps_func**, asn1_ps_func**);
X509_EXTENSION* X509_CRL_get_ext(const X509_CRL*, int);
int X509_keyid_set1(X509*, const unsigned char*, int);
void DH_get0_pqg(const DH*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
char* mktemp( char*);
long ASN1_INTEGER_get(const ASN1_INTEGER*);
int RSA_padding_check_PKCS1_type_2(unsigned char*, int, const unsigned char*, int, int);
DSA_SIG* d2i_DSA_SIG(DSA_SIG**, const unsigned char**, long);
int tolower_l(int, locale_t);
int BIO_sock_error(int);
const RAND_METHOD* ENGINE_get_RAND(const ENGINE*);
int pcre32_pattern_to_host_byte_order(pcre32*, pcre32_extra*, const unsigned char*);
int PKCS7_add_signer(PKCS7*, PKCS7_SIGNER_INFO*);
int X509_REQ_get_signature_nid(const X509_REQ*);
int (DSA*)* DSA_meth_get_init(const DSA_METHOD*);
long double strtold(const  char*,  char**);
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX*);
int SSL_add1_to_CA_list(SSL*, const X509*);
void BN_set_negative(BIGNUM*, int);
int BN_pseudo_rand_range(BIGNUM*, const BIGNUM*);
NOTICEREF* d2i_NOTICEREF(NOTICEREF**, const unsigned char**, long);
void GENERAL_NAME_free(GENERAL_NAME*);
int ASN1_const_check_infinite_end(const unsigned char**, long);
int ASN1_item_sign_ex(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, const ASN1_OCTET_STRING*, EVP_PKEY*, const EVP_MD*, OSSL_LIB_CTX*, const char*);
int EVP_DecryptFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int inflateReset(z_streamp);
int EC_GROUP_set_curve(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME*, const char*);
const ASN1_ITEM* OCSP_RESPID_it();
int getitimer(__itimer_which_t, itimerval*);
const EVP_CIPHER* EVP_aes_256_ofb();
const char* UI_get0_result(UI*, int);
unsigned long ERR_peek_last_error_all(const char**, int*, const char**, const char**, int*);
const char* ENGINE_get_id(const ENGINE*);
void* dlsym(restrict void*, restrict const char*);
netent* getnetent();
int mlock2(const void*, size_t, unsigned int);
int sync_file_range(int, __off64_t, __off64_t, unsigned int);
int OCSP_request_sign(OCSP_REQUEST*, X509*, EVP_PKEY*, const EVP_MD*, stack_st_X509*, unsigned long);
int RAND_bytes_ex(OSSL_LIB_CTX*, unsigned char*, size_t, unsigned int);
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const PKCS8_PRIV_KEY_INFO*)*, int (PKCS8_PRIV_KEY_INFO*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*);
X509_CRL* d2i_X509_CRL(X509_CRL**, const unsigned char**, long);
int SSL_copy_session_id(SSL*, const SSL*);
int i2d_PKCS7_SIGNER_INFO(const PKCS7_SIGNER_INFO*, unsigned char**);
uLong adler32(uLong, const Bytef*, uInt);
EVP_PKEY* NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI*);
unsigned long ERR_peek_last_error_line_data(const char**, int*, const char**, int*);
int inflateSetDictionary(z_streamp, const Bytef*, uInt);
char* asctime_r(restrict const tm*, restrict  char*);
stack_st_CONF_VALUE* NCONF_get_section(const CONF*, const char*);
BIGNUM* EC_POINT_point2bn(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, BIGNUM*, BN_CTX*);
const BIO_ADDRINFO* BIO_ADDRINFO_next(const BIO_ADDRINFO*);
int SSL_get_verify_depth(const SSL*);
X509* X509_STORE_CTX_get_current_cert(const X509_STORE_CTX*);
void OPENSSL_load_builtin_modules();
void OPENSSL_LH_doall_arg(OPENSSL_LHASH*, OPENSSL_LH_DOALL_FUNCARG, void*);
int EVP_PKEY_get_default_digest_name(EVP_PKEY*,  char*, size_t);
int EVP_PKEY_set1_encoded_public_key(EVP_PKEY*, const unsigned char*, size_t);
int EVP_PKEY_public_check(EVP_PKEY_CTX*);
int SSL_CTX_use_certificate(SSL_CTX*, X509*);
const char* EVP_RAND_get0_name(const EVP_RAND*);
protoent* getprotoent();
int EVP_CipherInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int, const OSSL_PARAM[]);
__mode_t getumask();
const ASN1_ITEM* OCSP_SINGLERESP_it();
EC_GROUP* EC_GROUP_new_by_curve_name(int);
int isupper(int);
const EVP_CIPHER* EVP_aria_128_ofb();
int OBJ_sn2nid(const char*);
int (BIO*, const char*, int)* BIO_meth_get_write(const BIO_METHOD*);
_Float32 strtof32_l(restrict const char*, restrict  char**, locale_t);
unsigned long ASN1_STRING_get_default_mask();
uint64_t SSL_clear_options(SSL*, uint64_t);
void X509V3_EXT_cleanup();
int X509v3_addr_is_canonical(IPAddrBlocks*);
const EVP_CIPHER* EVP_des_ede3_cfb1();
int pthread_condattr_init(pthread_condattr_t*);
const EVP_MD* EVP_sha1();
X509_VERIFY_PARAM* X509_VERIFY_PARAM_new();
int gethostent_r(restrict hostent*, restrict  char*, size_t, restrict hostent**, restrict int*);
void* mmap(void*, size_t, int, int, int, __off64_t);
int pthread_attr_getstackaddr(restrict const pthread_attr_t*, restrict void**);
void OCSP_RESPBYTES_free(OCSP_RESPBYTES*);
void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD*, void (EVP_PKEY_CTX*)*);
int BN_abs_is_word(const BIGNUM*, const unsigned long);
const EVP_CIPHER* EVP_aria_256_ofb();
int ASN1_STRING_cmp(const ASN1_STRING*, const ASN1_STRING*);
void PROFESSION_INFO_free(PROFESSION_INFO*);
int i2d_DSAPrivateKey(const DSA*, unsigned char**);
int X509_PUBKEY_set(X509_PUBKEY**, EVP_PKEY*);
int OPENSSL_sk_find_all(OPENSSL_STACK*, const void*, int*);
unsigned long X509_NAME_hash_ex(const X509_NAME*, OSSL_LIB_CTX*, const char*, int*);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP*, unsigned int*, unsigned int*, unsigned int*);
ASN1_OBJECT* ASN1_OBJECT_create(int, unsigned char*, int, const char*, const char*);
int fseek(FILE*, long int, int);
int PEM_bytes_read_bio(unsigned char**, long*,  char**, const char*, BIO*, pem_password_cb*, void*);
group* fgetgrent(FILE*);
int SSL_in_init(const SSL*);
const EVP_CIPHER* EVP_aes_192_gcm();
int RAND_poll();
int SSL_get_all_async_fds(SSL*, int*, size_t*);
ENGINE* ENGINE_get_digest_engine(int);
void BN_CTX_end(BN_CTX*);
NETSCAPE_CERT_SEQUENCE* PEM_read_NETSCAPE_CERT_SEQUENCE(FILE*, NETSCAPE_CERT_SEQUENCE**, pem_password_cb*, void*);
unsigned long ERR_peek_error_all(const char**, int*, const char**, const char**, int*);
const SSL_METHOD* TLSv1_client_method();
int getnetbyaddr_r(uint32_t, int, restrict netent*, restrict  char*, size_t, restrict netent**, restrict int*);
void X509_STORE_CTX_set_cert(X509_STORE_CTX*, X509*);
int mincore(void*, size_t, unsigned char*);
mallinfo2 mallinfo2();
stack_st_SSL_CIPHER* SSL_get_ciphers(const SSL*);
const char* OPENSSL_info(int);
int getrpcbyname_r(const char*, rpcent*,  char*, size_t, rpcent**);
void pcre16_jit_stack_free(pcre16_jit_stack*);
const EVP_CIPHER* EVP_camellia_256_cfb128();
int ftruncate64(int, __off64_t);
int X509_CRL_get_ext_count(const X509_CRL*);
const char* SSL_alert_desc_string_long(int);
int SHA224_Final(unsigned char*, SHA256_CTX*);
void SSL_CTX_set_cert_verify_callback(SSL_CTX*, int (X509_STORE_CTX*, void*)*, void*);
X509_OBJECT* X509_OBJECT_retrieve_by_subject(stack_st_X509_OBJECT*, X509_LOOKUP_TYPE, const X509_NAME*);
int a2i_ASN1_INTEGER(BIO*, ASN1_INTEGER*,  char*, int);
int EVP_PKEY_encapsulate_init(EVP_PKEY_CTX*, const OSSL_PARAM[]);
HMAC_CTX* HMAC_CTX_new();
int EVP_PKEY_CTX_get_ecdh_kdf_type(EVP_PKEY_CTX*);
int SSL_set_ex_data(SSL*, int, void*);
void* OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP*, int, int*, int*);
char* BN_bn2hex(const BIGNUM*);
EVP_CIPHER* EVP_CIPHER_fetch(OSSL_LIB_CTX*, const char*, const char*);
int pthread_rwlock_trywrlock(pthread_rwlock_t*);
int BIO_snprintf( char*, size_t, const char*);
BIGNUM* BN_get_rfc3526_prime_2048(BIGNUM*);
void* alloca(unsigned long int);
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO*, const unsigned char*, int);
int ispunct_l(int, locale_t);
void SSL_CONF_CTX_free(SSL_CONF_CTX*);
unsigned long int strlen(const  char*);
int i2d_PKCS8PrivateKey_fp(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
int i2d_ECPrivateKey_fp(FILE*, const EC_KEY*);
int open(const char*, int);
uLong deflateBound(z_streamp, uLong);
int pthread_attr_setstackaddr(pthread_attr_t*, void*);
const ASN1_ITEM* OCSP_RESPDATA_it();
int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS*, const char*);
int SSL_CTX_set_srp_strength(SSL_CTX*, int);
void* X509_STORE_get_ex_data(const X509_STORE*, int);
int PEM_write_DSAparams(FILE*, const DSA*);
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_NID(stack_st_X509_ATTRIBUTE**, int, int, const unsigned char*, int);
int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX*, int, const char*);
int OCSP_request_add1_nonce(OCSP_REQUEST*, unsigned char*, int);
SSL_CTX* SSL_get_SSL_CTX(const SSL*);
int mrand48_r(restrict drand48_data*, restrict long int*);
int ecvt_r(double, int, restrict int*, restrict int*, restrict  char*, size_t);
int SCT_set_log_entry_type(SCT*, ct_log_entry_type_t);
X509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(const X509_STORE_CTX*);
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
int i2d_ASN1_PRINTABLESTRING(const ASN1_PRINTABLESTRING*, unsigned char**);
int EC_POINT_invert(const EC_GROUP*, EC_POINT*, BN_CTX*);
int inflateUndermine(z_streamp, int);
const SSL_METHOD* DTLSv1_method();
const stack_st_X509_NAME* SSL_CTX_get0_CA_list(const SSL_CTX*);
ASN1_BMPSTRING* d2i_ASN1_BMPSTRING(ASN1_BMPSTRING**, const unsigned char**, long);
int gethostbyname_r(restrict const char*, restrict hostent*, restrict  char*, size_t, restrict hostent**, restrict int*);
X509* PEM_read_bio_X509_AUX(BIO*, X509**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_des_ede_ecb();
int SSL_CTX_set_srp_password(SSL_CTX*,  char*);
RSA* d2i_RSAPublicKey(RSA**, const unsigned char**, long);
int SSL_SESSION_set1_hostname(SSL_SESSION*, const char*);
X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD*);
ASN1_STRING* ASN1_PRINTABLE_new();
int i2d_PKCS8PrivateKey_nid_fp(FILE*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
ASN1_UTF8STRING* d2i_ASN1_UTF8STRING(ASN1_UTF8STRING**, const unsigned char**, long);
int initstate_r(unsigned int, restrict  char*, size_t, restrict random_data*);
PKCS7* SMIME_read_PKCS7_ex(BIO*, BIO**, PKCS7**);
const ASN1_ITEM* X509_EXTENSION_it();
int i2d_RSAPrivateKey_fp(FILE*, const RSA*);
OSSL_PARAM OSSL_PARAM_construct_int64(const char*, int64_t*);
int BN_GF2m_arr2poly(const int[], BIGNUM*);
void pcre16_free_substring(const unsigned short*);
int ERR_set_mark();
const ASN1_ITEM* ECPARAMETERS_it();
int SMIME_crlf_copy(BIO*, BIO*, int);
int EC_GROUP_check_named_curve(const EC_GROUP*, int, BN_CTX*);
const EVP_CIPHER* EVP_aes_128_gcm();
COMP_METHOD* COMP_zlib();
OSSL_PARAM OSSL_PARAM_construct_octet_ptr(const char*, void**, size_t);
void ENGINE_register_all_DSA();
void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, EVP_MD_CTX*)**);
const OSSL_PARAM* EVP_CIPHER_CTX_gettable_params(EVP_CIPHER_CTX*);
ASN1_STRING* ASN1_STRING_dup(const ASN1_STRING*);
int X509_NAME_entry_count(const X509_NAME*);
stack_st_X509_NAME* SSL_dup_CA_list(const stack_st_X509_NAME*);
char* strncpy( char*, const  char*, unsigned long int);
int EVP_PKEY_sign_init(EVP_PKEY_CTX*);
int i2d_PBE2PARAM(const PBE2PARAM*, unsigned char**);
int i2d_PKCS8PrivateKey_bio(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
X509_ALGOR* PKCS5_pbe2_set_scrypt(const EVP_CIPHER*, const unsigned char*, int, unsigned char*, uint64_t, uint64_t, uint64_t);
void* SSL_get_ex_data(const SSL*, int);
int X509_NAME_get_index_by_NID(const X509_NAME*, int, int);
UI_METHOD* UI_UTIL_wrap_read_pem_callback(pem_password_cb*, int);
int EVP_PKEY_CTX_set_dh_kdf_outlen(EVP_PKEY_CTX*, int);
char* tmpnam( char[20]);
char* crypt_gensalt(const char*, unsigned long, const char*, int);
int pthread_attr_setstack(pthread_attr_t*, void*, size_t);
int DH_bits(const DH*);
int shm_open(const char*, int, mode_t);
int isalpha_l(int, locale_t);
const EVP_CIPHER* EVP_aria_128_cfb8();
int setsourcefilter(int, uint32_t, const sockaddr*, socklen_t, uint32_t, uint32_t, const sockaddr_storage*);
void SSL_set0_CA_list(SSL*, stack_st_X509_NAME*);
int SSL_SRP_CTX_free(SSL*);
void DSA_clear_flags(DSA*, int);
void PKCS7_DIGEST_free(PKCS7_DIGEST*);
const ASN1_ITEM* ASN1_ITEM_lookup(const char*);
void ADMISSIONS_set0_admissionAuthority(ADMISSIONS*, GENERAL_NAME*);
int inet6_opt_get_val(void*, int, void*, socklen_t);
int __toupper_l(int, locale_t);
int EVP_KEM_is_a(const EVP_KEM*, const char*);
int BN_nist_mod_256(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int gethostbyname2_r(restrict const char*, int, restrict hostent*, restrict  char*, size_t, restrict hostent**, restrict int*);
const DSA_METHOD* DSA_OpenSSL();
int ENGINE_set_DH(ENGINE*, const DH_METHOD*);
int SSL_CTX_up_ref(SSL_CTX*);
int BN_is_prime(const BIGNUM*, int, void (int, int, void*)*, BN_CTX*, void*);
ssize_t pwritev64(int, const iovec*, int, __off64_t);
const OSSL_PROVIDER* EVP_MD_get0_provider(const EVP_MD*);
int ASN1_BIT_STRING_name_print(BIO*, ASN1_BIT_STRING*, BIT_STRING_BITNAME*, int);
int inet6_option_append(cmsghdr*, const uint8_t*, int, int);
int X509_STORE_CTX_set_trust(X509_STORE_CTX*, int);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER*);
DSA* PEM_read_DSAPrivateKey(FILE*, DSA**, pem_password_cb*, void*);
void X509_REQ_set_extension_nids(int*);
stack_st_X509* X509_build_chain(X509*, stack_st_X509*, X509_STORE*, int, OSSL_LIB_CTX*, const char*);
int X509V3_EXT_REQ_add_nconf(CONF*, X509V3_CTX*, const char*, X509_REQ*);
int UI_dup_info_string(UI*, const char*);
stack_st_X509_NAME* SSL_load_client_CA_file_ex(const char*, OSSL_LIB_CTX*, const char*);
int ASN1_BIT_STRING_set(ASN1_BIT_STRING*, unsigned char*, int);
int SSL_set_num_tickets(SSL*, size_t);
const EVP_CIPHER* EVP_camellia_256_cbc();
int RSA_meth_get_flags(const RSA_METHOD*);
int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX*, const EVP_ENCODE_CTX*);
void USERNOTICE_free(USERNOTICE*);
int EVP_PKEY_assign(EVP_PKEY*, int, void*);
int SSL_in_before(const SSL*);
void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX*, void*);
OSSL_LIB_CTX* OSSL_LIB_CTX_new();
void pcre32_jit_stack_free(pcre32_jit_stack*);
int SSL_CTX_set_trust(SSL_CTX*, int);
const char* zlibVersion();
int scandirat64(int, restrict const char*, restrict dirent64***, int (const dirent64*)*, int (const dirent64**, const dirent64**)*);
EVP_MD* EVP_MD_CTX_get1_md(EVP_MD_CTX*);
int BIO_read(BIO*, void*, int);
EVP_PKEY* X509_PUBKEY_get(const X509_PUBKEY*);
X509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(const X509_STORE_CTX*);
int X509_EXTENSION_set_object(X509_EXTENSION*, const ASN1_OBJECT*);
X509_ATTRIBUTE* EVP_PKEY_delete_attr(EVP_PKEY*, int);
int inet6_opt_next(void*, socklen_t, int, uint8_t*, socklen_t*, void**);
void ASN1_BIT_STRING_free(ASN1_BIT_STRING*);
void OBJ_NAME_do_all_sorted(int, void (const OBJ_NAME*, void*)*, void*);
int ENGINE_set_load_ssl_client_cert_function(ENGINE*, ENGINE_SSL_CLIENT_CERT_PTR);
int getsockopt(int, int, int, restrict void*, restrict socklen_t*);
int strfromf64( char*, size_t, const char*, _Float64);
void SSL_CTX_set_security_level(SSL_CTX*, int);
int HMAC_Final(HMAC_CTX*, unsigned char*, unsigned int*);
int EC_KEY_set_ex_data(EC_KEY*, int, void*);
OSSL_PARAM OSSL_PARAM_construct_BN(const char*, unsigned char*, size_t);
ASN1_T61STRING* d2i_ASN1_T61STRING(ASN1_T61STRING**, const unsigned char**, long);
const EVP_CIPHER* EVP_camellia_128_ecb();
const char* SSL_COMP_get_name(const COMP_METHOD*);
const EVP_CIPHER* EVP_rc4_40();
int X509_CRL_get0_by_serial(X509_CRL*, X509_REVOKED**, const ASN1_INTEGER*);
int EVP_PKEY_cmp(const EVP_PKEY*, const EVP_PKEY*);
SSL_SESSION* SSL_get1_session(SSL*);
int i2d_OCSP_BASICRESP(const OCSP_BASICRESP*, unsigned char**);
int EVP_PKEY_set1_RSA(EVP_PKEY*, rsa_st*);
int SSL_add1_host(SSL*, const char*);
int X509_check_trust(X509*, int, int);
int pcre16_get_substring(const unsigned short*, int*, int, int, const unsigned short**);
void* CRYPTO_clear_realloc(void*, size_t, size_t, const char*, int);
void psignal(int, const char*);
int fstatfs(int, statfs*);
DH* DH_new_method(ENGINE*);
void* EC_KEY_get_ex_data(const EC_KEY*, int);
int inflateInit2_(z_streamp, int, const char*, int);
void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX*, SSL*);
DSA* DSA_new();
const char* SSL_get_cipher_list(const SSL*, int);
int ASN1_STRING_to_UTF8(unsigned char**, const ASN1_STRING*);
int setresgid(__gid_t, __gid_t, __gid_t);
z_size_t gzfread(voidp, z_size_t, z_size_t, gzFile);
int (DH*, int, int, BN_GENCB*)* DH_meth_get_generate_params(const DH_METHOD*);
int X509_CRL_cmp(const X509_CRL*, const X509_CRL*);
void EC_KEY_free(EC_KEY*);
ASN1_OCTET_STRING* a2i_IPADDRESS_NC(const char*);
int X509_load_cert_crl_file(X509_LOOKUP*, const char*, int);
void DH_get0_key(const DH*, const BIGNUM**, const BIGNUM**);
const EVP_CIPHER* EVP_rc2_ofb();
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST*, int, int);
int X509_REQ_set_pubkey(X509_REQ*, EVP_PKEY*);
int DSAparams_print_fp(FILE*, const DSA*);
const unsigned char* OBJ_get0_data(const ASN1_OBJECT*);
intmax_t strtoimax(restrict const char*, restrict  char**, int);
DH* PEM_read_bio_DHparams(BIO*, DH**, pem_password_cb*, void*);
int CRYPTO_atomic_load(uint64_t*, uint64_t*, CRYPTO_RWLOCK*);
int DH_test_flags(const DH*, int);
int RSA_size(const RSA*);
void X509_STORE_set_lookup_crls(X509_STORE*, X509_STORE_CTX_lookup_crls_fn);
EVP_PKEY* PEM_read_bio_PrivateKey(BIO*, EVP_PKEY**, pem_password_cb*, void*);
unsigned char* X509_alias_get0(X509*, int*);
const char* OCSP_crl_reason_str(long);
int NCONF_dump_fp(const CONF*, FILE*);
ASN1_TIME* d2i_ASN1_TIME(ASN1_TIME**, const unsigned char**, long);
ASN1_STRING* ASN1_STRING_type_new(int);
int SSL_CTX_set_max_early_data(SSL_CTX*, uint32_t);
const BIGNUM* RSA_get0_dmq1(const RSA*);
in6_addr* inet6_rth_getaddr(const void*, int);
void EC_KEY_set_flags(EC_KEY*, int);
int isdigit_l(int, locale_t);
int pcre_pattern_to_host_byte_order(pcre*, pcre_extra*, const unsigned char*);
int RSA_meth_set_keygen(RSA_METHOD*, int (RSA*, int, BIGNUM*, BN_GENCB*)*);
int (UI*, UI_STRING*)* UI_method_get_reader(const UI_METHOD*);
int sigwait(restrict const sigset_t*, restrict int*);
int DSA_bits(const DSA*);
int SSL_has_pending(const SSL*);
int fputs(restrict const char*, restrict FILE*);
void* UI_get_ex_data(const UI*, int);
int pthread_setattr_default_np(const pthread_attr_t*);
DH* d2i_DHxparams(DH**, const unsigned char**, long);
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP*);
int pthread_condattr_setpshared(pthread_condattr_t*, int);
unsigned char* SHA512(const unsigned char*, size_t, unsigned char*);
int inflateBack(z_streamp, in_func, void*, out_func, void*);
X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(const X509_STORE*);
int PEM_write_PKCS7(FILE*, const PKCS7*);
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO*, const PKCS8_PRIV_KEY_INFO*);
int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_fingerprint_fn);
BIGNUM* BN_dup(const BIGNUM*);
int gzclose_r(gzFile);
int i2d_ISSUER_SIGN_TOOL(const ISSUER_SIGN_TOOL*, unsigned char**);
int X509V3_EXT_add_nconf_sk(CONF*, X509V3_CTX*, const char*, stack_st_X509_EXTENSION**);
int SSL_set_generate_session_id(SSL*, GEN_SESSION_CB);
void __pthread_unregister_cancel_restore(__pthread_unwind_buf_t*);
int RSA_padding_add_PKCS1_type_2(unsigned char*, int, const unsigned char*, int);
int BN_priv_rand_range_ex(BIGNUM*, const BIGNUM*, unsigned int, BN_CTX*);
int X509_check_ip(X509*, const unsigned char*, size_t, unsigned int);
int SSL_extension_supported(unsigned int);
int X509_OBJECT_idx_by_subject(stack_st_X509_OBJECT*, X509_LOOKUP_TYPE, const X509_NAME*);
int OSSL_HTTP_proxy_connect(BIO*, const char*, const char*, const char*, const char*, int, BIO*, const char*);
int EVP_DecryptInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*);
void SSL_CTX_set_stateless_cookie_generate_cb(SSL_CTX*, int (SSL*, unsigned char*, size_t*)*);
const OSSL_PROVIDER* EVP_PKEY_get0_provider(const EVP_PKEY*);
const dsa_st* EVP_PKEY_get0_DSA(const EVP_PKEY*);
int EVP_CIPHER_meth_set_flags(EVP_CIPHER*, unsigned long);
int X509_CRL_add0_revoked(X509_CRL*, X509_REVOKED*);
int OSSL_PARAM_get_int32(const OSSL_PARAM*, int32_t*);
int SSL_write_early_data(SSL*, const void*, size_t, size_t*);
int ASN1_item_verify_ex(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, const ASN1_OCTET_STRING*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
DSA_METHOD* DSA_meth_new(const char*, int);
size_t SSL_client_hello_get0_session_id(SSL*, const unsigned char**);
int EVP_PKEY_CTX_set_ecdh_kdf_type(EVP_PKEY_CTX*, int);
void ASN1_item_free(ASN1_VALUE*, const ASN1_ITEM*);
int i2d_ASN1_NULL(const ASN1_NULL*, unsigned char**);
int kill(__pid_t, int);
int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t*, int);
int ASN1_INTEGER_get_int64(int64_t*, const ASN1_INTEGER*);
int profil(unsigned short int*, size_t, size_t, unsigned int);
int ASYNC_start_job(ASYNC_JOB**, ASYNC_WAIT_CTX*, int*, int (void*)*, void*, size_t);
int OBJ_txt2nid(const char*);
const EVP_CIPHER* EVP_rc4();
void EVP_EncodeFinal(EVP_ENCODE_CTX*, unsigned char*, int*);
int BIO_sock_init();
OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK*, OPENSSL_sk_compfunc);
const rsa_st* EVP_PKEY_get0_RSA(const EVP_PKEY*);
int getnetent_r(restrict netent*, restrict  char*, size_t, restrict netent**, restrict int*);
stack_st_X509_POLICY_NODE* X509_policy_tree_get0_user_policies(const X509_POLICY_TREE*);
const char* X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM*);
int fseeko64(FILE*, __off64_t, int);
CTLOG_STORE* CTLOG_STORE_new_ex(OSSL_LIB_CTX*, const char*);
pcre32_jit_stack* pcre32_jit_stack_alloc(int, int);
void EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD*, int (EC_KEY*)**);
int X509_CRL_sign_ctx(X509_CRL*, EVP_MD_CTX*);
int EC_POINT_cmp(const EC_GROUP*, const EC_POINT*, const EC_POINT*, BN_CTX*);
int SSL_do_handshake(SSL*);
char* crypt_r(const char*, const char*, restrict crypt_data*);
int i2d_PUBKEY(const EVP_PKEY*, unsigned char**);
int X509_CRL_add_ext(X509_CRL*, X509_EXTENSION*, int);
int OCSP_REQUEST_add_ext(OCSP_REQUEST*, X509_EXTENSION*, int);
const EVP_CIPHER* EVP_des_cfb64();
int (UI*)* UI_method_get_closer(const UI_METHOD*);
char* BIO_get_callback_arg(const BIO*);
int setgroups(size_t, const __gid_t*);
int X509_print_ex_fp(FILE*, X509*, unsigned long, unsigned long);
int X509_CRL_up_ref(X509_CRL*);
ASN1_TIME* X509_CRL_get_nextUpdate(X509_CRL*);
OCSP_RESPDATA* OCSP_RESPDATA_new();
EVP_KEM* EVP_KEM_fetch(OSSL_LIB_CTX*, const char*, const char*);
void exit(int);
int pthread_atfork(void ()*, void ()*, void ()*);
int EVP_PKEY_private_check(EVP_PKEY_CTX*);
const EC_METHOD* EC_GFp_nist_method();
CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id();
passwd* getpwnam(const char*);
int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX*, int*, size_t*, int*, size_t*);
int ASN1_mbstring_copy(ASN1_STRING**, const unsigned char*, int, int, unsigned long);
const BIGNUM* RSA_get0_iqmp(const RSA*);
size_t EVP_MAC_CTX_get_block_size(EVP_MAC_CTX*);
void BN_MONT_CTX_free(BN_MONT_CTX*);
int bindresvport(int, sockaddr_in*);
int prlimit(__pid_t, __rlimit_resource, const rlimit*, rlimit*);
int CRYPTO_alloc_ex_data(int, void*, CRYPTO_EX_DATA*, int);
void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, int, int, void*)**, int (EVP_PKEY_CTX*, const char*, const char*)**);
BIO* OSSL_HTTP_exchange(OSSL_HTTP_REQ_CTX*,  char**);
int EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(EVP_PKEY_CTX*, int);
const ASN1_ITEM* AUTHORITY_INFO_ACCESS_it();
const ASN1_ITEM* PKCS7_ATTR_SIGN_it();
int EVP_PKEY_print_private_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
int BIO_nread0(BIO*,  char**);
const ASN1_ITEM* ASN1_BIT_STRING_it();
int CONF_dump_bio(lhash_st_CONF_VALUE*, BIO*);
int isblank(int);
int SSL_check_private_key(const SSL*);
int PEM_write_NETSCAPE_CERT_SEQUENCE(FILE*, const NETSCAPE_CERT_SEQUENCE*);
int lstat64(restrict const char*, restrict stat64*);
int lrand48_r(restrict drand48_data*, restrict long int*);
int RAND_set_DRBG_type(OSSL_LIB_CTX*, const char*, const char*, const char*, const char*);
const EVP_CIPHER* EVP_camellia_256_ofb();
int ERR_load_KDF_strings();
ASN1_UNIVERSALSTRING* ASN1_UNIVERSALSTRING_new();
PKCS7_SIGN_ENVELOPE* d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE**, const unsigned char**, long);
int X509_STORE_CTX_set_default(X509_STORE_CTX*, const char*);
_Float32 strtof32(restrict const char*, restrict  char**);
unsigned long BN_div_word(BIGNUM*, unsigned long);
const unsigned char* SSL_SESSION_get_id(const SSL_SESSION*, unsigned int*);
void X509_INFO_free(X509_INFO*);
size_t SCT_get0_extensions(const SCT*, unsigned char**);
size_t SSL_get_client_random(const SSL*, unsigned char*, size_t);
int BN_set_word(BIGNUM*, unsigned long);
const char* EVP_KEYEXCH_get0_name(const EVP_KEYEXCH*);
void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*, int (EVP_PKEY_CTX*, const unsigned char*, int, EVP_MD_CTX*)*);
int RSA_verify_PKCS1_PSS(RSA*, const unsigned char*, const EVP_MD*, const unsigned char*, int);
const ASN1_ITEM* PKCS7_SIGNED_it();
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn, CRYPTO_realloc_fn, CRYPTO_free_fn);
int X509_get_ext_count(const X509*);
const BIO_METHOD* BIO_s_log();
int CONF_dump_fp(lhash_st_CONF_VALUE*, FILE*);
const ASN1_ITEM* X509_ALGORS_it();
const char* SCT_validation_status_string(const SCT*);
void ASN1_SCTX_set_app_data(ASN1_SCTX*, void*);
const ASN1_INTEGER* X509_get0_serialNumber(const X509*);
const stack_st_ASN1_OBJECT* PROFESSION_INFO_get0_professionOIDs(const PROFESSION_INFO*);
void OPENSSL_sk_zero(OPENSSL_STACK*);
int pthread_mutexattr_setrobust(pthread_mutexattr_t*, int);
const char* SSL_alert_desc_string(int);
void qsort_r(void*, size_t, size_t, __compar_d_fn_t, void*);
const EVP_CIPHER* EVP_camellia_128_cfb128();
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM*, int);
const EVP_CIPHER* EVP_aria_128_ecb();
const EVP_CIPHER* EVP_aria_192_gcm();
void EVP_MAC_do_all_provided(OSSL_LIB_CTX*, void (EVP_MAC*, void*)*, void*);
X509_VAL* d2i_X509_VAL(X509_VAL**, const unsigned char**, long);
int sigorset(sigset_t*, const sigset_t*, const sigset_t*);
ECPARAMETERS* EC_GROUP_get_ecparameters(const EC_GROUP*, ECPARAMETERS*);
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ*, int, void*, int, unsigned long);
int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD*);
uLong crc32(uLong, const Bytef*, uInt);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t*);
int EVP_PKEY_can_sign(const EVP_PKEY*);
void* CRYPTO_realloc(void*, size_t, const char*, int);
int EC_POINT_dbl(const EC_GROUP*, EC_POINT*, const EC_POINT*, BN_CTX*);
NETSCAPE_CERT_SEQUENCE* d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE**, const unsigned char**, long);
int EVP_PKEY_pairwise_check(EVP_PKEY_CTX*);
int X509_LOOKUP_ctrl(X509_LOOKUP*, int, const char*, long,  char**);
void PEM_proc_type( char*, int);
int BIO_do_connect_retry(BIO*, int, int);
EVP_PKEY* b2i_PVK_bio_ex(BIO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
int BN_MONT_CTX_set(BN_MONT_CTX*, const BIGNUM*, BN_CTX*);
void EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
int X509_CRL_get_ext_by_critical(const X509_CRL*, int, int);
int BIO_listen(int, const BIO_ADDR*, int);
int __sigsetjmp_cancel(__cancel_jmp_buf_tag[1], int);
int PKCS5_v2_PBE_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
const ASN1_ITEM* OCSP_SERVICELOC_it();
int isgraph(int);
__gid_t getegid();
int BN_num_bits_word(unsigned long);
void RSA_get0_key(const RSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
const ASN1_ITEM* ASIdOrRange_it();
const ASN1_ITEM* OCSP_RESPONSE_it();
RSA_PSS_PARAMS* d2i_RSA_PSS_PARAMS(RSA_PSS_PARAMS**, const unsigned char**, long);
const ASN1_ITEM* GENERAL_NAMES_it();
int X509_CRL_get_ext_by_OBJ(const X509_CRL*, const ASN1_OBJECT*, int);
unsigned long ERR_peek_error_data(const char**, int*);
stack_st_SSL_COMP* SSL_COMP_set0_compression_methods(stack_st_SSL_COMP*);
void BN_swap(BIGNUM*, BIGNUM*);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK*);
const ASN1_ITEM* POLICY_MAPPING_it();
const char* X509_get_default_private_dir();
const EVP_MD* EVP_sha3_512();
int EVP_PKEY_set_type(EVP_PKEY*, int);
int i2d_IPAddressRange(const IPAddressRange*, unsigned char**);
int SHA1_Update(SHA_CTX*, const void*, size_t);
int OSSL_PARAM_set_int(OSSL_PARAM*, int);
int EC_KEY_set_group(EC_KEY*, const EC_GROUP*);
__sighandler_t sigset(int, __sighandler_t);
OCSP_SERVICELOC* d2i_OCSP_SERVICELOC(OCSP_SERVICELOC**, const unsigned char**, long);
ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE*);
void OPENSSL_LH_set_down_load(OPENSSL_LHASH*, unsigned long);
void RSA_set_flags(RSA*, int);
const BIO_METHOD* BIO_f_prefix();
void PBE2PARAM_free(PBE2PARAM*);
char* tempnam(const char*, const char*);
const BIO_METHOD* BIO_f_reliable();
int X509_STORE_load_path(X509_STORE*, const char*);
int X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int i2d_OCSP_RESPONSE(const OCSP_RESPONSE*, unsigned char**);
EVP_RAND_CTX* EVP_RAND_CTX_new(EVP_RAND*, EVP_RAND_CTX*);
int isblank_l(int, locale_t);
int DH_meth_set_generate_key(DH_METHOD*, int (DH*)*);
const EVP_MD* EVP_shake128();
const SSL_METHOD* DTLS_client_method();
int ASYNC_pause_job();
int SSL_CTX_set_default_verify_dir(SSL_CTX*);
void freeaddrinfo(addrinfo*);
int i2d_PKCS7_RECIP_INFO(const PKCS7_RECIP_INFO*, unsigned char**);
int X509_LOOKUP_ctrl_ex(X509_LOOKUP*, int, const char*, long,  char**, OSSL_LIB_CTX*, const char*);
int i2d_ASN1_UNIVERSALSTRING(const ASN1_UNIVERSALSTRING*, unsigned char**);
int EVP_PKEY_set_ex_data(EVP_PKEY*, int, void*);
OPENSSL_STACK* OPENSSL_sk_dup(const OPENSSL_STACK*);
int i2d_X509_NAME_ENTRY(const X509_NAME_ENTRY*, unsigned char**);
int iscntrl(int);
GENERAL_NAMES* GENERAL_NAMES_new();
int OSSL_HTTP_set1_request(OSSL_HTTP_REQ_CTX*, const char*, const stack_st_CONF_VALUE*, const char*, BIO*, const char*, int, size_t, int, int);
void SSL_set_bio(SSL*, BIO*, BIO*);
int ECDSA_verify(int, const unsigned char*, int, const unsigned char*, int, EC_KEY*);
int BN_generate_dsa_nonce(BIGNUM*, const BIGNUM*, const BIGNUM*, const unsigned char*, size_t, BN_CTX*);
int EVP_PKEY_derive_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int i2d_PKCS7_SIGNED(const PKCS7_SIGNED*, unsigned char**);
int pthread_detach(pthread_t);
int X509V3_get_value_int(const CONF_VALUE*, ASN1_INTEGER**);
const ASN1_ITEM* ASN1_OCTET_STRING_it();
int inflateBackInit_(z_streamp, int, unsigned char*, const char*, int);
EVP_PKEY* d2i_PUBKEY_fp(FILE*, EVP_PKEY**);
int PKCS7_final(PKCS7*, BIO*, int);
EVP_MD* EVP_MD_meth_new(int, int);
int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK*);
int isxdigit(int);
PROXY_CERT_INFO_EXTENSION* PROXY_CERT_INFO_EXTENSION_new();
int EVP_PKEY_check(EVP_PKEY_CTX*);
void GENERAL_NAME_set0_value(GENERAL_NAME*, int, void*);
const EVP_CIPHER* EVP_aes_192_ccm();
void ERR_error_string_n(unsigned long,  char*, size_t);
uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION*);
void endusershell();
int ERR_load_UI_strings();
unsigned long CONF_imodule_get_flags(const CONF_IMODULE*);
const unsigned char* EVP_PKEY_get0_siphash(const EVP_PKEY*, size_t*);
int HMAC_Init_ex(HMAC_CTX*, const void*, int, const EVP_MD*, ENGINE*);
void ASN1_STRING_clear_free(ASN1_STRING*);
OTHERNAME* d2i_OTHERNAME(OTHERNAME**, const unsigned char**, long);
int SCT_set1_signature(SCT*, const unsigned char*, size_t);
int EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX*, int);
dsa_st* EVP_PKEY_get1_DSA(EVP_PKEY*);
int putw(int, FILE*);
void pcre32_free_substring(const unsigned int*);
const NAMING_AUTHORITY* PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO*);
int X509_NAME_get_index_by_OBJ(const X509_NAME*, const ASN1_OBJECT*, int);
long BIO_callback_ctrl(BIO*, int, BIO_info_cb*);
int getopt(int, const  char**, const char*);
const EVP_CIPHER* EVP_aes_192_ofb();
stack_st_SCT* d2i_SCT_LIST(stack_st_SCT**, const unsigned char**, long);
CT_POLICY_EVAL_CTX* CT_POLICY_EVAL_CTX_new();
int pthread_cond_signal(pthread_cond_t*);
int i2d_PKCS7_NDEF(const PKCS7*, unsigned char**);
int RSA_padding_add_none(unsigned char*, int, const unsigned char*, int);
X509_NAME* X509_CRL_get_issuer(const X509_CRL*);
int getsockname(int, __SOCKADDR_ARG, restrict socklen_t*);
size_t EVP_MAC_CTX_get_mac_size(EVP_MAC_CTX*);
BIO* OSSL_HTTP_transfer(OSSL_HTTP_REQ_CTX**, const char*, const char*, const char*, int, const char*, const char*, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, const stack_st_CONF_VALUE*, const char*, BIO*, const char*, int, size_t, int, int);
PKCS7_SIGN_ENVELOPE* PKCS7_SIGN_ENVELOPE_new();
void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX*, uint64_t);
int pthread_mutex_consistent(pthread_mutex_t*);
X509_ALGOR* PKCS5_pbe2_set_iv(const EVP_CIPHER*, int, unsigned char*, int, unsigned char*, int);
ASN1_TIME* X509_time_adj(ASN1_TIME*, long, time_t*);
int DSA_meth_set_sign_setup(DSA_METHOD*, int (DSA*, BN_CTX*, BIGNUM**, BIGNUM**)*);
SSL* SSL_dup(SSL*);
time_t mktime(tm*);
const EVP_CIPHER* EVP_aes_192_ocb();
void X509_STORE_set_check_revocation(X509_STORE*, X509_STORE_CTX_check_revocation_fn);
AUTHORITY_KEYID* AUTHORITY_KEYID_new();
int BN_bn2bin(const BIGNUM*, unsigned char*);
int pcre32_jit_exec(const pcre32*, const pcre32_extra*, const unsigned int*, int, int, int, int*, int, pcre32_jit_stack*);
void OBJ_NAME_do_all(int, void (const OBJ_NAME*, void*)*, void*);
int X509_STORE_add_cert(X509_STORE*, X509*);
unsigned char* X509_keyid_get0(X509*, int*);
int RSA_meth_set_priv_dec(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
int BN_nist_mod_384(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
unsigned long ERR_get_error_line_data(const char**, int*, const char**, int*);
X509* SSL_get1_peer_certificate(const SSL*);
void OCSP_SERVICELOC_free(OCSP_SERVICELOC*);
DSA* DSA_generate_parameters(int, unsigned char*, int, int*, unsigned long*, void (int, int, void*)*, void*);
int BIO_fd_should_retry(int);
CONF* NCONF_new_ex(OSSL_LIB_CTX*, CONF_METHOD*);
char* BN_bn2dec(const BIGNUM*);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO*, const PKCS8_PRIV_KEY_INFO*);
const BIGNUM* DH_get0_g(const DH*);
void BN_set_flags(BIGNUM*, int);
const BIGNUM* ECDSA_SIG_get0_r(const ECDSA_SIG*);
X509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(const X509_STORE_CTX*);
int BIO_dump_indent_cb(int (const void*, size_t, void*)*, void*, const void*, int, int);
int initgroups(const char*, __gid_t);
int mblen(const char*, size_t);
void* pthread_getspecific(pthread_key_t);
char* X509_NAME_oneline(const X509_NAME*,  char*, int);
int ASN1_STRING_length(const ASN1_STRING*);
int mbtowc(restrict wchar_t*, restrict const char*, size_t);
const char* BIO_method_name(const BIO*);
int OBJ_find_sigid_algs(int, int*, int*);
int BN_is_prime_ex(const BIGNUM*, int, BN_CTX*, BN_GENCB*);
const EVP_CIPHER* EVP_camellia_256_cfb1();
char* stpncpy( char*, const  char*, unsigned long int);
int pthread_barrierattr_getpshared(restrict const pthread_barrierattr_t*, restrict int*);
void SSL_CTX_set0_ctlog_store(SSL_CTX*, CTLOG_STORE*);
int X509_REVOKED_set_revocationDate(X509_REVOKED*, ASN1_TIME*);
int PKCS8_pkey_add1_attr_by_OBJ(PKCS8_PRIV_KEY_INFO*, const ASN1_OBJECT*, int, const unsigned char*, int);
int memcmp(const void*, const void*, unsigned long int);
void SSL_set_psk_client_callback(SSL*, SSL_psk_client_cb_func);
void ASN1_PCTX_set_str_flags(ASN1_PCTX*, unsigned long);
int pthread_attr_getschedpolicy(restrict const pthread_attr_t*, restrict int*);
int OPENSSL_sk_find_ex(OPENSSL_STACK*, const void*);
const OSSL_PROVIDER* EVP_KEYMGMT_get0_provider(const EVP_KEYMGMT*);
void EVP_PKEY_meth_get_digestverify(const EVP_PKEY_METHOD*, int (EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)**);
int DH_check(const DH*, int*);
FILE* popen(const char*, const char*);
ASN1_BIT_STRING* d2i_ASN1_BIT_STRING(ASN1_BIT_STRING**, const unsigned char**, long);
X509_EXTENSION* OCSP_archive_cutoff_new( char*);
int ENGINE_set_default_ciphers(ENGINE*);
int i2d_X509_bio(BIO*, const X509*);
int isatty(int);
void SSL_CTX_set_psk_server_callback(SSL_CTX*, SSL_psk_server_cb_func);
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX*, const char*);
const ASN1_ITEM* OCSP_REQINFO_it();
int EVP_DigestInit(EVP_MD_CTX*, const EVP_MD*);
stack_st_OPENSSL_CSTRING* NCONF_get_section_names(const CONF*);
void BN_set_params(int, int, int, int);
const stack_st_ADMISSIONS* ADMISSION_SYNTAX_get0_contentsOfAdmissions(const ADMISSION_SYNTAX*);
EC_KEY* d2i_EC_PUBKEY(EC_KEY**, const unsigned char**, long);
void OPENSSL_LH_flush(OPENSSL_LHASH*);
int fcntl64(int, int);
int pthread_condattr_getpshared(restrict const pthread_condattr_t*, restrict int*);
int CTLOG_new_from_base64(CTLOG**, const char*, const char*);
int ERR_load_PKCS7_strings();
int UI_get_input_flags(UI_STRING*);
int gzbuffer(gzFile, unsigned);
int sethostname(const char*, size_t);
PBE2PARAM* PBE2PARAM_new();
int gzwrite(gzFile, voidpc, unsigned);
int OSSL_HTTP_REQ_CTX_nbio(OSSL_HTTP_REQ_CTX*);
void (X509_LOOKUP*)* X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD*);
BN_GENCB* BN_GENCB_new();
int EVP_PKEY_CTX_md(EVP_PKEY_CTX*, int, int, const char*);
int BIO_fd_non_fatal_error(int);
const ASN1_ITEM* GENERAL_NAME_it();
unsigned long OpenSSL_version_num();
int BN_GF2m_mod_inv_arr(BIGNUM*, const BIGNUM*, const int[], BN_CTX*);
void X509_CRL_INFO_free(X509_CRL_INFO*);
int EVP_PKEY_CTX_set_dh_paramgen_prime_len(EVP_PKEY_CTX*, int);
ASYNC_WAIT_CTX* ASYNC_get_wait_ctx(ASYNC_JOB*);
int X509_PUBKEY_get0_param(ASN1_OBJECT**, const unsigned char**, int*, X509_ALGOR**, const X509_PUBKEY*);
int inet6_opt_set_val(void*, int, void*, socklen_t);
ASN1_STRING* d2i_DIRECTORYSTRING(ASN1_STRING**, const unsigned char**, long);
X509_LOOKUP_METHOD* X509_LOOKUP_hash_dir();
char* CONF_get1_default_config_file();
int X509V3_add_value_uchar(const char*, const unsigned char*, stack_st_CONF_VALUE**);
void EVP_SIGNATURE_do_all_provided(OSSL_LIB_CTX*, void (EVP_SIGNATURE*, void*)*, void*);
int EVP_PKEY_set_size_t_param(EVP_PKEY*, const char*, size_t);
int PEM_write_X509_AUX(FILE*, const X509*);
int DH_meth_set_compute_key(DH_METHOD*, int (unsigned char*, const BIGNUM*, DH*)*);
char* OPENSSL_buf2hexstr(const unsigned char*, long);
int OBJ_NAME_add(const char*, int, const char*);
const ASN1_ITEM* CERTIFICATEPOLICIES_it();
servent* getservbyname(const char*, const char*);
int clone(int (void*)*, void*, int, void*);
int X509_LOOKUP_by_subject(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, X509_OBJECT*);
const SSL_METHOD* DTLSv1_2_client_method();
ASN1_PRINTABLESTRING* ASN1_PRINTABLESTRING_new();
const ASN1_ITEM* ASN1_OBJECT_it();
int X509_get_signature_type(const X509*);
void OCSP_SINGLERESP_free(OCSP_SINGLERESP*);
const OSSL_PARAM* EVP_CIPHER_CTX_settable_params(EVP_CIPHER_CTX*);
void OCSP_RESPID_free(OCSP_RESPID*);
int inet6_opt_find(void*, socklen_t, int, uint8_t, socklen_t*, void**);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX*);
int inet6_option_space(int);
EVP_PKEY* d2i_PrivateKey_ex(int, EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
int inet6_rth_reverse(const void*, void*);
int PEM_write_bio_DHxparams(BIO*, const DH*);
const X509_VERIFY_PARAM* X509_VERIFY_PARAM_lookup(const char*);
int SSL_set_srp_server_param_pw(SSL*, const char*, const char*, const char*);
void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS*);
ASN1_TIME* X509_getm_notAfter(const X509*);
int PKCS5_v2_scrypt_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
int i2d_NETSCAPE_SPKI(const NETSCAPE_SPKI*, unsigned char**);
size_t fwrite_unlocked(restrict const void*, size_t, size_t, restrict FILE*);
ASN1_VALUE* ASN1_item_new(const ASN1_ITEM*);
ECPKPARAMETERS* ECPKPARAMETERS_new();
EC_KEY* PEM_read_bio_EC_PUBKEY(BIO*, EC_KEY**, pem_password_cb*, void*);
int EVP_PKEY_CTX_set_rsa_mgf1_md(EVP_PKEY_CTX*, const EVP_MD*);
char* asctime(const tm*);
in_addr_t inet_addr(const char*);
void ERR_set_error_data( char*, int);
ASN1_UTCTIME* ASN1_UTCTIME_adj(ASN1_UTCTIME*, time_t, int, long);
void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD*);
OCSP_CERTID* OCSP_cert_id_new(const EVP_MD*, const X509_NAME*, const ASN1_BIT_STRING*, const ASN1_INTEGER*);
int posix_fadvise(int, __off64_t, __off64_t, int);
int SSL_set0_tmp_dh_pkey(SSL*, EVP_PKEY*);
PKCS7_RECIP_INFO* PKCS7_add_recipient(PKCS7*, X509*);
stack_st_X509_INFO* PEM_X509_INFO_read(FILE*, stack_st_X509_INFO*, pem_password_cb*, void*);
__pid_t getppid();
int rmdir(const char*);
void EC_KEY_METHOD_set_verify(EC_KEY_METHOD*, int (int, const unsigned char*, int, const unsigned char*, int, EC_KEY*)*, int (const unsigned char*, int, const ECDSA_SIG*, EC_KEY*)*);
int ENGINE_register_digests(ENGINE*);
int pcre_get_stringnumber(const pcre*, const char*);
void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX*);
OSSL_PARAM OSSL_PARAM_construct_double(const char*, double*);
ASN1_OCTET_STRING* ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING*);
int EVP_PKEY_CTX_set_rsa_keygen_pubexp(EVP_PKEY_CTX*, BIGNUM*);
const X509_ALGOR* X509_get0_tbs_sigalg(const X509*);
int HMAC_CTX_reset(HMAC_CTX*);
OCSP_SERVICELOC* OCSP_SERVICELOC_new();
int X509_STORE_set_depth(X509_STORE*, int);
int ENGINE_set_load_privkey_function(ENGINE*, ENGINE_LOAD_KEY_PTR);
PKCS7* SMIME_read_PKCS7(BIO*, BIO**);
int i2d_IPAddressChoice(const IPAddressChoice*, unsigned char**);
const EVP_CIPHER* EVP_chacha20();
int toupper_l(int, locale_t);
int pthread_mutex_lock(pthread_mutex_t*);
void* X509V3_get_d2i(const stack_st_X509_EXTENSION*, int, int*, int*);
int EC_GROUP_get_basis_type(const EC_GROUP*);
int BIO_set_cipher(BIO*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int);
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD*);
int EVP_PKEY_set_utf8_string_param(EVP_PKEY*, const char*, const char*);
int DH_meth_get_flags(const DH_METHOD*);
size_t SCT_get0_signature(const SCT*, unsigned char**);
int OCSP_id_cmp(const OCSP_CERTID*, const OCSP_CERTID*);
void RAND_add(const void*, int, double);
int PEM_write_PKCS8PrivateKey_nid(FILE*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
int X509V3_add_value(const char*, const char*, stack_st_CONF_VALUE**);
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO*, ASN1_TIME*);
int setresuid(__uid_t, __uid_t, __uid_t);
int OCSP_request_verify(OCSP_REQUEST*, stack_st_X509*, X509_STORE*, unsigned long);
uLong adler32_combine64(uLong, uLong, off64_t);
__pid_t wait4(__pid_t, int*, int, rusage*);
X509_SIG* PEM_read_bio_PKCS8(BIO*, X509_SIG**, pem_password_cb*, void*);
void EVP_PKEY_meth_get_digestsign(const EVP_PKEY_METHOD*, int (EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
int ECParameters_print(BIO*, const EC_KEY*);
const ASN1_ITEM* PKEY_USAGE_PERIOD_it();
int EVP_PKEY_CTX_set_ecdh_cofactor_mode(EVP_PKEY_CTX*, int);
void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*)*);
void EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*, unsigned char*, size_t*)*);
int EVP_PKEY_CTX_set_mac_key(EVP_PKEY_CTX*, const unsigned char*, int);
int i2d_DHparams(const DH*, unsigned char**);
void X509V3_section_free(X509V3_CTX*, stack_st_CONF_VALUE*);
RSA* d2i_RSA_PUBKEY_fp(FILE*, RSA**);
const EVP_CIPHER* EVP_camellia_256_ctr();
void OTHERNAME_free(OTHERNAME*);
int ENGINE_set_default_string(ENGINE*, const char*);
int BN_mul(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509_CRL_match(const X509_CRL*, const X509_CRL*);
int SSL_get_ex_data_X509_STORE_CTX_idx();
DSA* d2i_DSAPrivateKey_bio(BIO*, DSA**);
int ffsl(long int);
int EVP_PKEY_type_names_do_all(const EVP_PKEY*, void (const char*, void*)*, void*);
intmax_t wcstoimax(restrict const __gwchar_t*, restrict __gwchar_t**, int);
int i2d_DSAPrivateKey_fp(FILE*, const DSA*);
time_t time(time_t*);
int atexit(void ()*);
size_t OPENSSL_strnlen(const char*, size_t);
void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int PEM_write_RSAPrivateKey(FILE*, const RSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
pem_password_cb* SSL_CTX_get_default_passwd_cb(SSL_CTX*);
const ASN1_ITEM* POLICY_MAPPINGS_it();
int grantpt(int);
int pthread_mutex_clocklock(restrict pthread_mutex_t*, clockid_t, restrict const timespec*);
int BIO_gets(BIO*,  char*, int);
int getipv4sourcefilter(int, in_addr, in_addr, uint32_t*, uint32_t*, in_addr*);
unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX*);
const EC_KEY_METHOD* ENGINE_get_EC(const ENGINE*);
int i2d_AUTHORITY_KEYID(const AUTHORITY_KEYID*, unsigned char**);
int sem_timedwait(restrict sem_t*, restrict const timespec*);
const ASN1_ITEM* PKCS7_ISSUER_AND_SERIAL_it();
int ASN1_item_print(BIO*, const ASN1_VALUE*, int, const ASN1_ITEM*, const ASN1_PCTX*);
size_t EC_GROUP_get_seed_len(const EC_GROUP*);
int isspace(int);
AUTHORITY_KEYID* d2i_AUTHORITY_KEYID(AUTHORITY_KEYID**, const unsigned char**, long);
int isalpha(int);
int getaddrinfo(restrict const char*, restrict const char*, restrict const addrinfo*, restrict addrinfo**);
_Float64x strtof64x(restrict const char*, restrict  char**);
int X509v3_asid_is_canonical(ASIdentifiers*);
const EVP_CIPHER* EVP_bf_cbc();
unsigned char* EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX*);
X509* SSL_get0_peer_certificate(const SSL*);
int pcre16_dfa_exec(const pcre16*, const pcre16_extra*, const unsigned short*, int, int, int, int*, int, int*, int);
const ASN1_ITEM* NAME_CONSTRAINTS_it();
X509_PUBKEY* d2i_X509_PUBKEY_fp(FILE*, X509_PUBKEY**);
int SSL_waiting_for_async(SSL*);
void X509_STORE_CTX_cleanup(X509_STORE_CTX*);
const BIGNUM* DH_get0_priv_key(const DH*);
const EVP_CIPHER* EVP_aria_256_ctr();
BIO* OSSL_HTTP_get(const char*, const char*, const char*, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, const stack_st_CONF_VALUE*, const char*, int, size_t, int);
hostent* gethostent();
int EVP_DecodeBlock(unsigned char*, const unsigned char*, int);
int PEM_write_DSAPrivateKey(FILE*, const DSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
const ASN1_ITEM* RSAPublicKey_it();
int OSSL_PARAM_set_utf8_string(OSSL_PARAM*, const char*);
int EVP_CipherUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
int fflush(FILE*);
void OCSP_ONEREQ_free(OCSP_ONEREQ*);
int EVP_PBE_alg_add_type(int, int, int, int, EVP_PBE_KEYGEN*);
const EVP_CIPHER* EVP_aes_192_wrap();
char* tmpnam_r( char[20]);
int SSL_client_hello_get1_extensions_present(SSL*, int**, size_t*);
int BIO_meth_set_read(BIO_METHOD*, int (BIO*,  char*, int)*);
int OSSL_PARAM_get_octet_string(const OSSL_PARAM*, void**, size_t, size_t*);
int EVP_Digest(const void*, size_t, unsigned char*, unsigned int*, const EVP_MD*, ENGINE*);
int setregid(__gid_t, __gid_t);
void OCSP_RESPONSE_free(OCSP_RESPONSE*);
int PKCS7_set_content(PKCS7*, PKCS7*);
int ENGINE_set_flags(ENGINE*, int);
void* ENGINE_get_ex_data(const ENGINE*, int);
BIGNUM* ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED*, BIGNUM*);
int OPENSSL_hexstr2buf_ex(unsigned char*, size_t, size_t*, const char*, const char);
const char* OSSL_default_ciphersuites();
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
long SSL_get_verify_result(const SSL*);
int EVP_PKEY_param_check(EVP_PKEY_CTX*);
void IPAddressRange_free(IPAddressRange*);
pcre16_jit_stack* pcre16_jit_stack_alloc(int, int);
int X509_STORE_CTX_get_num_untrusted(const X509_STORE_CTX*);
void RSA_set_default_method(const RSA_METHOD*);
const EVP_CIPHER* EVP_aria_192_ecb();
const OSSL_PROVIDER* EVP_CIPHER_get0_provider(const EVP_CIPHER*);
void DSA_SIG_get0(const DSA_SIG*, const BIGNUM**, const BIGNUM**);
stack_st_X509* SSL_get_peer_cert_chain(const SSL*);
X509* d2i_X509_bio(BIO*, X509**);
int DSA_meth_set_flags(DSA_METHOD*, int);
EVP_PKEY* b2i_PrivateKey(const unsigned char**, long);
const EVP_CIPHER* EVP_aria_192_cfb1();
const EVP_CIPHER* EVP_des_ede3_wrap();
int OSSL_PARAM_set_octet_string(OSSL_PARAM*, const void*, size_t);
int X509V3_EXT_REQ_add_conf(lhash_st_CONF_VALUE*, X509V3_CTX*, const char*, X509_REQ*);
int DSA_meth_set_bn_mod_exp(DSA_METHOD*, int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int EC_KEY_set_method(EC_KEY*, const EC_KEY_METHOD*);
void SSL_CTX_set_cookie_generate_cb(SSL_CTX*, int (SSL*, unsigned char*, unsigned int*)*);
int RSA_padding_check_X931(unsigned char*, int, const unsigned char*, int, int);
int SSL_write_ex(SSL*, const void*, size_t, size_t*);
NAME_CONSTRAINTS* NAME_CONSTRAINTS_new();
imaxdiv_t imaxdiv(intmax_t, intmax_t);
int SSL_CTX_use_PrivateKey_ASN1(int, SSL_CTX*, const unsigned char*, long);
int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER*, int (EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, size_t)*);
int SSL_CTX_set_ctlog_list_file(SSL_CTX*, const char*);
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX*, int);
RAND_METHOD* RAND_OpenSSL();
int EVP_KEYEXCH_names_do_all(const EVP_KEYEXCH*, void (const char*, void*)*, void*);
int connect(int, __CONST_SOCKADDR_ARG, socklen_t);
OCSP_BASICRESP* OCSP_response_get1_basic(OCSP_RESPONSE*);
int getrlimit64(__rlimit_resource_t, rlimit64*);
unsigned long BN_BLINDING_get_flags(const BN_BLINDING*);
const ASN1_ITEM* X509_SIG_it();
const EVP_CIPHER* EVP_enc_null();
int recvmmsg(int, mmsghdr*, unsigned int, int, timespec*);
const ASN1_ITEM* ASN1_NULL_it();
X509_CRL* X509_CRL_dup(const X509_CRL*);
size_t malloc_usable_size(void*);
int EC_POINTs_make_affine(const EC_GROUP*, size_t, EC_POINT*[], BN_CTX*);
int i2d_X509_REQ(const X509_REQ*, unsigned char**);
void closefrom(int);
PBKDF2PARAM* PBKDF2PARAM_new();
int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME*);
const dh_st* EVP_PKEY_get0_DH(const EVP_PKEY*);
const SSL_METHOD* TLSv1_2_server_method();
int X509_set_serialNumber(X509*, ASN1_INTEGER*);
__off64_t lseek64(int, __off64_t, int);
int i2d_PKCS7_ENCRYPT(const PKCS7_ENCRYPT*, unsigned char**);
int X509_print_ex(BIO*, X509*, unsigned long, unsigned long);
int seteuid(__uid_t);
int X509_alias_set1(X509*, const unsigned char*, int);
unsigned int alarm(unsigned int);
int ERR_load_strings_const(const ERR_STRING_DATA*);
void X509_STORE_free(X509_STORE*);
X509_REQ_INFO* d2i_X509_REQ_INFO(X509_REQ_INFO**, const unsigned char**, long);
unsigned char* SHA224(const unsigned char*, size_t, unsigned char*);
BIO* BIO_next(BIO*);
int readdir64_r(restrict DIR*, restrict dirent64*, restrict dirent64**);
int EVP_SIGNATURE_is_a(const EVP_SIGNATURE*, const char*);
ENGINE* ENGINE_get_pkey_asn1_meth_engine(int);
int rexec(restrict  char**, int, restrict const char*, restrict const char*, restrict const char*, restrict int*);
int PEM_write_bio_PrivateKey_ex(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
int sem_clockwait(restrict sem_t*, clockid_t, restrict const timespec*);
int inflateReset2(z_streamp, int);
const EVP_CIPHER* EVP_aes_256_cfb128();
int BN_lshift(BIGNUM*, const BIGNUM*, int);
void EVP_KEYEXCH_free(EVP_KEYEXCH*);
int BIO_get_init(BIO*);
DH* DH_new();
ASN1_STRING* DIRECTORYSTRING_new();
void PROXY_POLICY_free(PROXY_POLICY*);
int EVP_PKEY_param_check_quick(EVP_PKEY_CTX*);
int i2d_PUBKEY_bio(BIO*, const EVP_PKEY*);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING*, const unsigned char*, int);
int ERR_load_RSA_strings();
int PKCS7_set_type(PKCS7*, int);
void EC_KEY_METHOD_set_init(EC_KEY_METHOD*, int (EC_KEY*)*, void (EC_KEY*)*, int (EC_KEY*, const EC_KEY*)*, int (EC_KEY*, const EC_GROUP*)*, int (EC_KEY*, const BIGNUM*)*, int (EC_KEY*, const EC_POINT*)*);
int BN_is_one(const BIGNUM*);
int SHA256_Final(unsigned char*, SHA256_CTX*);
int (DSA*)* DSA_meth_get_keygen(const DSA_METHOD*);
void EVP_PKEY_meth_set_digestsign(EVP_PKEY_METHOD*, int (EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
void X509_STORE_set_verify(X509_STORE*, X509_STORE_CTX_verify_fn);
void SSL_set_read_ahead(SSL*, int);
stack_st_SSL_CIPHER* SSL_get_client_ciphers(const SSL*);
int SSL_use_PrivateKey(SSL*, EVP_PKEY*);
void* memfrob(void*, size_t);
int getpeername(int, __SOCKADDR_ARG, restrict socklen_t*);
int EVP_PKEY_get_size(const EVP_PKEY*);
int PEM_SignUpdate(EVP_MD_CTX*, const unsigned char*, unsigned int);
int SSL_client_hello_isv2(SSL*);
void SHA256_Transform(SHA256_CTX*, const unsigned char*);
int inet6_opt_init(void*, socklen_t);
int X509_STORE_lock(X509_STORE*);
int pcre16_refcount(pcre16*, int);
const OSSL_PARAM* EVP_RAND_CTX_gettable_params(EVP_RAND_CTX*);
const SSL_CIPHER* SSL_SESSION_get0_cipher(const SSL_SESSION*);
const EVP_CIPHER* EVP_aes_256_ocb();
int EVP_PKEY_derive_set_peer_ex(EVP_PKEY_CTX*, EVP_PKEY*, int);
ASN1_OBJECT* X509_EXTENSION_get_object(X509_EXTENSION*);
const char* EVP_CIPHER_get0_description(const EVP_CIPHER*);
RSA* d2i_RSAPrivateKey_bio(BIO*, RSA**);
int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM*);
char* getcwd( char*, size_t);
void EC_KEY_clear_flags(EC_KEY*, int);
void CRYPTO_free_ex_data(int, void*, CRYPTO_EX_DATA*);
group* getgrent();
OCSP_CERTID* OCSP_cert_to_id(const EVP_MD*, const X509*, const X509*);
protoent* getprotobyname(const char*);
const ASN1_ITEM* PKCS7_ATTR_VERIFY_it();
long X509_get_pathlen(X509*);
int RSA_security_bits(const RSA*);
const ASN1_ITEM* X509_NAME_ENTRY_it();
int inflateResetKeep(z_streamp);
GENERAL_NAMES* d2i_GENERAL_NAMES(GENERAL_NAMES**, const unsigned char**, long);
int EVP_DigestFinalXOF(EVP_MD_CTX*, unsigned char*, size_t);
void X509_STORE_CTX_set_time(X509_STORE_CTX*, unsigned long, time_t);
int X509_STORE_load_locations(X509_STORE*, const char*, const char*);
ENGINE* EC_KEY_get0_engine(const EC_KEY*);
X509_NAME_ENTRY* X509_NAME_ENTRY_new();
int clock_adjtime(__clockid_t, timex*);
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX*, int, void*);
int ASN1_item_i2d_bio(const ASN1_ITEM*, BIO*, const void*);
const ASN1_ITEM* ASN1_PRINTABLESTRING_it();
ASN1_PCTX* ASN1_PCTX_new();
intmax_t imaxabs(intmax_t);
int OCSP_request_is_signed(OCSP_REQUEST*);
void SSL_CTX_set_quiet_shutdown(SSL_CTX*, int);
void ERR_set_error(int, int, const char*);
int setpriority(__priority_which_t, id_t, int);
DH* PEM_read_DHparams(FILE*, DH**, pem_password_cb*, void*);
int i2d_X509_AUX(const X509*, unsigned char**);
void ENGINE_unregister_pkey_asn1_meths(ENGINE*);
X509_ALGOR* X509_ALGOR_new();
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO*);
int SSL_CTX_set_block_padding(SSL_CTX*, size_t);
int X509_CRL_sort(X509_CRL*);
int SSL_SESSION_set_max_early_data(SSL_SESSION*, uint32_t);
const EVP_PKEY_ASN1_METHOD* ENGINE_pkey_asn1_find_str(ENGINE**, const char*, int);
gzFile gzdopen(int, const char*);
int pthread_rwlockattr_getkind_np(restrict const pthread_rwlockattr_t*, restrict int*);
int CRYPTO_set_ex_data(CRYPTO_EX_DATA*, int, void*);
int BN_mod_exp_mont_consttime(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
const char* OCSP_response_status_str(long);
int ENGINE_set_default_RAND(ENGINE*);
int rpmatch(const char*);
const ASN1_ITEM* SXNETID_it();
int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void SSL_CTX_set_allow_early_data_cb(SSL_CTX*, SSL_allow_early_data_cb_fn, void*);
int EVP_VerifyFinal_ex(EVP_MD_CTX*, const unsigned char*, unsigned int, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
DIST_POINT* DIST_POINT_new();
int statfs64(const char*, statfs64*);
BN_CTX* BN_CTX_new();
int X509v3_addr_inherits(IPAddrBlocks*);
int PEM_write_PKCS8_PRIV_KEY_INFO(FILE*, const PKCS8_PRIV_KEY_INFO*);
int EVP_CIPHER_up_ref(EVP_CIPHER*);
unsigned long X509_issuer_name_hash_old(X509*);
int X509_check_private_key(const X509*, const EVP_PKEY*);
int X509_PURPOSE_get_count();
int BIO_bind(int, const BIO_ADDR*, int);
int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM*, const char*, size_t);
int EVP_PKEY_encrypt_old(unsigned char*, const unsigned char*, int, EVP_PKEY*);
int i2d_PKCS7_DIGEST(const PKCS7_DIGEST*, unsigned char**);
int EC_GROUP_get_degree(const EC_GROUP*);
int PEM_write_X509_PUBKEY(FILE*, const X509_PUBKEY*);
void X509_REQ_get0_signature(const X509_REQ*, const ASN1_BIT_STRING**, const X509_ALGOR**);
void rewind(FILE*);
int inflateValidate(z_streamp, int);
int SSL_CTX_load_verify_dir(SSL_CTX*, const char*);
int X509_ALGOR_copy(X509_ALGOR*, const X509_ALGOR*);
int EVP_PKEY_CTX_set_ec_param_enc(EVP_PKEY_CTX*, int);
void EVP_MD_do_all_provided(OSSL_LIB_CTX*, void (EVP_MD*, void*)*, void*);
void SSL_CTX_set_msg_callback(SSL_CTX*, void (int, int, int, const void*, size_t, SSL*, void*)*);
int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* RSA_meth_get_bn_mod_exp(const RSA_METHOD*);
EVP_PKEY* EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX*);
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP*, const ASN1_OBJECT*, int);
void GENERAL_NAMES_free(GENERAL_NAMES*);
void ASN1_TYPE_free(ASN1_TYPE*);
void DH_meth_free(DH_METHOD*);
OCSP_ONEREQ* OCSP_request_add0_id(OCSP_REQUEST*, OCSP_CERTID*);
void DH_free(DH*);
int ASN1_TYPE_get_octetstring(const ASN1_TYPE*, unsigned char*, int);
int EVP_CIPHER_CTX_get_updated_iv(EVP_CIPHER_CTX*, void*, size_t);
const EVP_CIPHER* EVP_des_ede3_cfb8();
DSA* d2i_DSAPrivateKey(DSA**, const unsigned char**, long);
stack_st_X509_NAME* SSL_get_client_CA_list(const SSL*);
int EVP_PKEY_print_private(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
rsa_st* EVP_PKEY_get1_RSA(EVP_PKEY*);
void ASN1_IA5STRING_free(ASN1_IA5STRING*);
int BN_mod_mul_reciprocal(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_RECP_CTX*, BN_CTX*);
void* inet6_rth_init(void*, socklen_t, int, int);
X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT*);
int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER*, int);
int sigaction(int, restrict const sigaction*, restrict sigaction*);
int pcre16_get_stringtable_entries(const pcre16*, const unsigned short*, unsigned short**, unsigned short**);
int printf(const  char*);
int asprintf(restrict  char**, restrict const char*);
int i2o_SCT(const SCT*, unsigned char**);
int SSL_want(const SSL*);
void OBJ_sigid_free();
void* X509_get_ext_d2i(const X509*, int, int*, int*);
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO_fp(FILE*, PKCS8_PRIV_KEY_INFO**);
X509_ALGOR* PKCS5_pbkdf2_set_ex(int, unsigned char*, int, int, int, OSSL_LIB_CTX*);
int i2o_ECPublicKey(const EC_KEY*, unsigned char**);
int X509_CRL_verify(X509_CRL*, EVP_PKEY*);
int madvise(void*, size_t, int);
void X509_STORE_set_lookup_certs(X509_STORE*, X509_STORE_CTX_lookup_certs_fn);
OSSL_LIB_CTX* OSSL_LIB_CTX_set0_default(OSSL_LIB_CTX*);
int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX*, const void*);
char* fgets(restrict  char*, int, restrict FILE*);
int SSL_CTX_use_PrivateKey(SSL_CTX*, EVP_PKEY*);
void* mremap(void*, size_t, size_t, int);
char* strerror(int);
int gzclose(gzFile);
int ASN1_UTCTIME_check(const ASN1_UTCTIME*);
ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE*);
int EVP_PKEY_generate(EVP_PKEY_CTX*, EVP_PKEY**);
int deflateGetDictionary(z_streamp, Bytef*, uInt*);
PKCS7* d2i_PKCS7_bio(BIO*, PKCS7**);
int getresgid(__gid_t*, __gid_t*, __gid_t*);
int ENGINE_set_digests(ENGINE*, ENGINE_DIGESTS_PTR);
int ERR_load_ASYNC_strings();
size_t strftime_l(restrict  char*, size_t, restrict const char*, restrict const tm*, locale_t);
const ASN1_ITEM* DIST_POINT_it();
int CRYPTO_THREAD_run_once(CRYPTO_ONCE*, void ()*);
X509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_camellia_192_cfb128();
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(EVP_PKEY_CTX*, const EVP_MD*);
int ECDSA_do_verify(const unsigned char*, int, const ECDSA_SIG*, EC_KEY*);
void OPENSSL_LH_stats(const OPENSSL_LHASH*, FILE*);
int futimens(int, const timespec[2]);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX*, ASN1_TYPE*);
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char**, int)*, int (const EVP_PKEY*, unsigned char**)*, int (const EVP_PKEY*)*, int (EVP_PKEY*, const EVP_PKEY*)*, int (const EVP_PKEY*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*);
const ASN1_ITEM* RSA_PSS_PARAMS_it();
int ERR_load_OCSP_strings();
long int nrand48(unsigned short int[3]);
char* SSL_CIPHER_description(const SSL_CIPHER*,  char*, int);
int linkat(int, const char*, int, const char*, int);
int BIO_get_port(const char*, unsigned short*);
long DH_get_length(const DH*);
int UI_process(UI*);
int DSA_meth_get_flags(const DSA_METHOD*);
int SSL_CTX_use_serverinfo_ex(SSL_CTX*, unsigned int, const unsigned char*, size_t);
void SSL_set_psk_use_session_callback(SSL*, SSL_psk_use_session_cb_func);
int PEM_bytes_read_bio_secmem(unsigned char**, long*,  char**, const char*, BIO*, pem_password_cb*, void*);
void BN_zero_ex(BIGNUM*);
int OSSL_PARAM_get_uint32(const OSSL_PARAM*, uint32_t*);
__pid_t getpid();
const char* ERR_lib_error_string(unsigned long);
int X509v3_asid_subset(ASIdentifiers*, ASIdentifiers*);
GENERAL_NAME* GENERAL_NAME_dup(const GENERAL_NAME*);
int pthread_attr_setscope(pthread_attr_t*, int);
OSSL_PARAM OSSL_PARAM_construct_end();
void ERR_new();
int EVP_MD_CTX_copy(EVP_MD_CTX*, const EVP_MD_CTX*);
const EVP_MD* EVP_sha512_256();
stack_st_OPENSSL_STRING* X509_REQ_get1_email(X509_REQ*);
const DH_METHOD* DH_get_default_method();
int X509_STORE_CTX_get1_issuer(X509**, X509_STORE_CTX*, X509*);
void POLICYINFO_free(POLICYINFO*);
int i2d_AUTHORITY_INFO_ACCESS(const AUTHORITY_INFO_ACCESS*, unsigned char**);
BIGNUM* BN_get_rfc2409_prime_1024(BIGNUM*);
void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY*, ASN1_IA5STRING*);
char* NCONF_get_string(const CONF*, const char*, const char*);
void OPENSSL_fork_parent();
DSA* PEM_read_bio_DSAparams(BIO*, DSA**, pem_password_cb*, void*);
int pthread_attr_setschedparam(restrict pthread_attr_t*, restrict const sched_param*);
void X509_STORE_set_verify_cb(X509_STORE*, X509_STORE_CTX_verify_cb);
off64_t gztell64(gzFile);
int i2d_PKCS7_bio_stream(BIO*, PKCS7*, BIO*, int);
int RSA_X931_hash_id(int);
int X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int BIO_get_new_index();
void ENGINE_register_all_pkey_asn1_meths();
size_t EVP_PKEY_get1_encoded_public_key(EVP_PKEY*, unsigned char**);
int setvbuf(restrict FILE*, restrict  char*, int, size_t);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM*, int);
int ASN1_BIT_STRING_check(const ASN1_BIT_STRING*, const unsigned char*, int);
int UTF8_putc(unsigned char*, int, unsigned long);
void EC_KEY_METHOD_set_keygen(EC_KEY_METHOD*, int (EC_KEY*)*);
const EVP_MD* EVP_whirlpool();
int (DH*)* DH_meth_get_init(const DH_METHOD*);
unsigned EC_KEY_get_enc_flags(const EC_KEY*);
int pcre_get_substring(const char*, int*, int, int, const char**);
const ASN1_ITEM* X509_CRL_INFO_it();
int pcre32_refcount(pcre32*, int);
OSSL_LIB_CTX* NCONF_get0_libctx(const CONF*);
const EVP_CIPHER* EVP_aes_192_ctr();
int X509V3_EXT_add_conf(lhash_st_CONF_VALUE*, X509V3_CTX*, const char*, X509*);
int EVP_EncryptUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
int BN_GF2m_mod_inv(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const EVP_MD* SSL_CIPHER_get_handshake_digest(const SSL_CIPHER*);
int RSA_set0_multi_prime_params(RSA*, BIGNUM*[], BIGNUM*[], BIGNUM*[], int);
lhash_st_CONF_VALUE* CONF_load_fp(lhash_st_CONF_VALUE*, FILE*, long*);
X509_EXTENSION* X509v3_get_ext(const stack_st_X509_EXTENSION*, int);
void SSL_CTX_set_post_handshake_auth(SSL_CTX*, int);
X509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(const X509_STORE_CTX*);
int SSL_get_servername_type(const SSL*);
int EVP_CipherFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int isdigit(int);
X509* X509_find_by_issuer_and_serial(stack_st_X509*, const X509_NAME*, const ASN1_INTEGER*);
PKCS7_ENC_CONTENT* PKCS7_ENC_CONTENT_new();
int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)* SSL_get_security_callback(const SSL*);
long int a64l(const char*);
PKCS8_PRIV_KEY_INFO* PKCS8_PRIV_KEY_INFO_new();
const EVP_CIPHER* EVP_aes_256_ctr();
IPAddressChoice* d2i_IPAddressChoice(IPAddressChoice**, const unsigned char**, long);
int SSL_use_RSAPrivateKey(SSL*, RSA*);
long SSL_callback_ctrl(SSL*, int, void ()*);
off64_t gzoffset64(gzFile);
int DSA_meth_set_mod_exp(DSA_METHOD*, int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE*, int, const void*, int);
char* NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI*);
void SSL_CTX_set_security_callback(SSL_CTX*, int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)*);
const EVP_CIPHER* EVP_camellia_192_cfb8();
int timer_delete(timer_t);
BIO_callback_fn BIO_get_callback(const BIO*);
const BIGNUM* BN_value_one();
int DH_meth_set_bn_mod_exp(DH_METHOD*, int (const DH*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int pthread_setschedprio(pthread_t, int);
int ASN1_BIT_STRING_num_asc(const char*, BIT_STRING_BITNAME*);
int EVP_MD_get_pkey_type(const EVP_MD*);
int dup3(int, int, int);
const ASN1_ITEM* SXNET_it();
EVP_RAND* EVP_RAND_fetch(OSSL_LIB_CTX*, const char*, const char*);
int PKCS7_add_recipient_info(PKCS7*, PKCS7_RECIP_INFO*);
PKCS7_DIGEST* d2i_PKCS7_DIGEST(PKCS7_DIGEST**, const unsigned char**, long);
int ERR_load_CRYPTO_strings();
const BIO_METHOD* BIO_s_accept();
const EVP_CIPHER* EVP_camellia_192_ofb();
__ssize_t splice(int, __off64_t*, int, __off64_t*, size_t, unsigned int);
int qecvt_r(long double, int, restrict int*, restrict int*, restrict  char*, size_t);
int PEM_write_PrivateKey(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
void* DSA_meth_get0_app_data(const DSA_METHOD*);
int SSL_SESSION_set1_alpn_selected(SSL_SESSION*, const unsigned char*, size_t);
void EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char*, size_t)*);
long int labs(long int);
int i2d_NETSCAPE_CERT_SEQUENCE(const NETSCAPE_CERT_SEQUENCE*, unsigned char**);
int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX*, int, int, int, uint64_t);
ENGINE* ENGINE_get_next(ENGINE*);
OCSP_CERTID* OCSP_CERTID_dup(const OCSP_CERTID*);
const EVP_CIPHER* EVP_aes_128_cbc_hmac_sha1();
int X509V3_add_value_int(const char*, const ASN1_INTEGER*, stack_st_CONF_VALUE**);
int ERR_load_DSA_strings();
int OSSL_PARAM_get_int(const OSSL_PARAM*, int*);
BN_CTX* BN_CTX_secure_new();
void DH_clear_flags(DH*, int);
char* realpath(restrict const char*, restrict  char*);
ISSUING_DIST_POINT* ISSUING_DIST_POINT_new();
ASN1_VALUE* SMIME_read_ASN1(BIO*, BIO**, const ASN1_ITEM*);
CERTIFICATEPOLICIES* CERTIFICATEPOLICIES_new();
int strcoll_l(const char*, const char*, locale_t);
dirent* readdir(DIR*);
long int fpathconf(int, int);
int inet6_opt_finish(void*, socklen_t, int);
void BN_GENCB_set(BN_GENCB*, int (int, int, BN_GENCB*)*, void*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_new();
int SSL_set_max_early_data(SSL*, uint32_t);
int X509_LOOKUP_set_method_data(X509_LOOKUP*, void*);
void EC_KEY_set_enc_flags(EC_KEY*, unsigned int);
int EVP_PKEY_keygen_init(EVP_PKEY_CTX*);
ssize_t sendfile(int, int, __off64_t*, size_t);
EVP_PKEY* d2i_PUBKEY(EVP_PKEY**, const unsigned char**, long);
int BIO_get_shutdown(BIO*);
void NAME_CONSTRAINTS_free(NAME_CONSTRAINTS*);
EC_KEY* d2i_EC_PUBKEY_fp(FILE*, EC_KEY**);
int DSA_meth_set1_name(DSA_METHOD*, const char*);
int BIO_meth_set_ctrl(BIO_METHOD*, long (BIO*, int, long, void*)*);
int toascii(int);
int ENGINE_set_load_pubkey_function(ENGINE*, ENGINE_LOAD_KEY_PTR);
int ASN1_item_i2d(const ASN1_VALUE*, unsigned char**, const ASN1_ITEM*);
void* dlmopen(Lmid_t, const char*, int);
int X509v3_asid_inherits(ASIdentifiers*);
int X509V3_NAME_from_section(X509_NAME*, stack_st_CONF_VALUE*, unsigned long);
const EVP_CIPHER* EVP_aria_192_ctr();
void UI_destroy_method(UI_METHOD*);
unsigned long OPENSSL_LH_strhash(const char*);
int EVP_CipherInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*, int);
char* strpbrk(const  char*, const  char*);
int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX*);
void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION*);
ssize_t read(int, void*, size_t);
int RSA_meth_set_verify(RSA_METHOD*, int (int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, const RSA*)*);
void clearerr_unlocked(FILE*);
BIO* BIO_new_socket(int, int);
int i2d_X509_CRL_bio(BIO*, const X509_CRL*);
int i2d_KeyParams(const EVP_PKEY*, unsigned char**);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY*, const ASN1_OBJECT*);
uint32_t SSL_CTX_get_max_early_data(const SSL_CTX*);
__sighandler_t __sysv_signal(int, __sighandler_t);
const BIGNUM* DSA_get0_p(const DSA*);
X509_CINF* X509_CINF_new();
int pthread_cond_timedwait(restrict pthread_cond_t*, restrict pthread_mutex_t*, restrict const timespec*);
ASYNC_JOB* ASYNC_get_current_job();
int EVP_MD_meth_set_init(EVP_MD*, int (EVP_MD_CTX*)*);
long (BIO*, int, long, void*)* BIO_meth_get_ctrl(const BIO_METHOD*);
ASN1_UTF8STRING* s2i_ASN1_UTF8STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
const EVP_CIPHER* EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX*);
size_t OPENSSL_strlcpy( char*, const char*, size_t);
void SSL_CTX_sess_set_get_cb(SSL_CTX*, SSL_SESSION* (ssl_st*, const unsigned char*, int, int*)*);
IPAddressChoice* IPAddressChoice_new();
void* X509V3_EXT_d2i(X509_EXTENSION*);
unsigned char* HMAC(const EVP_MD*, const void*, int, const unsigned char*, size_t, unsigned char*, unsigned int*);
long SSL_CTX_callback_ctrl(SSL_CTX*, int, void ()*);
void EVP_CIPHER_do_all(void (const EVP_CIPHER*, const char*, const char*, void*)*, void*);
int RSA_sign_ASN1_OCTET_STRING(int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, RSA*);
BIO* BIO_new_NDEF(BIO*, ASN1_VALUE*, const ASN1_ITEM*);
X509_PUBKEY* PEM_read_bio_X509_PUBKEY(BIO*, X509_PUBKEY**, pem_password_cb*, void*);
int OSSL_HTTP_REQ_CTX_nbio_d2i(OSSL_HTTP_REQ_CTX*, ASN1_VALUE**, const ASN1_ITEM*);
const char* CTLOG_get0_name(const CTLOG*);
const EVP_PKEY_METHOD* EVP_PKEY_meth_get0(size_t);
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM*, time_t);
void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, EVP_PKEY*)**);
int __overflow(FILE*, int);
int PKCS1_MGF1(unsigned char*, long, const unsigned char*, long, const EVP_MD*);
void NAMING_AUTHORITY_free(NAMING_AUTHORITY*);
X509* X509_load_http(const char*, BIO*, BIO*, int);
void X509_STORE_set_check_crl(X509_STORE*, X509_STORE_CTX_check_crl_fn);
unsigned int OPENSSL_version_minor();
int X509_issuer_name_cmp(const X509*, const X509*);
void BIO_ADDR_free(BIO_ADDR*);
int setdomainname(const char*, size_t);
void CONF_modules_unload(int);
int X509_check_akid(const X509*, const AUTHORITY_KEYID*);
void ENGINE_register_all_digests();
int DH_security_bits(const DH*);
int PEM_ASN1_write(i2d_of_void*, const char*, FILE*, const void*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int NCONF_dump_bio(const CONF*, BIO*);
int ASN1_STRING_type(const ASN1_STRING*);
void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)**);
const unsigned char* pcre16_maketables();
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ*, const ASN1_OBJECT*, int);
void SSL_CTX_set0_security_ex_data(SSL_CTX*, void*);
void BIO_set_callback_arg(BIO*,  char*);
void* EVP_PKEY_CTX_get_data(const EVP_PKEY_CTX*);
ASN1_OCTET_STRING* a2i_IPADDRESS(const char*);
int SSL_get_async_status(SSL*, int*);
int X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD*, void (X509_LOOKUP*)*);
int PEM_write_bio_DSAPrivateKey(BIO*, const DSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int i2d_KeyParams_bio(BIO*, const EVP_PKEY*);
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE*);
void X509_set_proxy_pathlen(X509*, long);
int CONF_modules_load_file_ex(OSSL_LIB_CTX*, const char*, const char*, unsigned long);
int EC_curve_nist2nid(const char*);
int X509v3_get_ext_by_OBJ(const stack_st_X509_EXTENSION*, const ASN1_OBJECT*, int);
int pcre16_copy_named_substring(const pcre16*, const unsigned short*, int*, int, const unsigned short*, unsigned short*, int);
int PEM_write_bio_ECPKParameters(BIO*, const EC_GROUP*);
int BIO_ADDR_rawaddress(const BIO_ADDR*, void*, size_t*);
int deflateTune(z_streamp, int, int, int, int);
const BIGNUM* DH_get0_q(const DH*);
uint32_t SSL_get_max_early_data(const SSL*);
int X509V3_EXT_add(X509V3_EXT_METHOD*);
unsigned long ERR_peek_last_error_func(const char**);
int wctomb( char*, wchar_t);
void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING*);
NETSCAPE_CERT_SEQUENCE* PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO*, NETSCAPE_CERT_SEQUENCE**, pem_password_cb*, void*);
int SSL_get_fd(const SSL*);
int EVP_CIPHER_CTX_get_tag_length(const EVP_CIPHER_CTX*);
int ECParameters_print_fp(FILE*, const EC_KEY*);
ASN1_UTCTIME* ASN1_UTCTIME_set(ASN1_UTCTIME*, time_t);
X509_LOOKUP_METHOD* X509_LOOKUP_meth_new(const char*);
int UI_set_result_ex(UI*, UI_STRING*, const char*, int);
int X509_PUBKEY_eq(const X509_PUBKEY*, const X509_PUBKEY*);
int i2d_X509_NAME(const X509_NAME*, unsigned char**);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM*, unsigned long);
EC_POINT* EC_POINT_bn2point(const EC_GROUP*, const BIGNUM*, EC_POINT*, BN_CTX*);
EVP_PKEY* EVP_PKEY_dup(EVP_PKEY*);
X509_OBJECT* X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX*, X509_LOOKUP_TYPE, const X509_NAME*);
void* DH_get_ex_data(const DH*, int);
int RAND_set_rand_method(const RAND_METHOD*);
int pcre16_pattern_to_host_byte_order(pcre16*, pcre16_extra*, const unsigned char*);
ASN1_TIME* ASN1_TIME_set(ASN1_TIME*, time_t);
size_t EC_POINT_point2oct(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, unsigned char*, size_t, BN_CTX*);
int pthread_setconcurrency(int);
void SSL_set0_rbio(SSL*, BIO*);
int RSA_set0_key(RSA*, BIGNUM*, BIGNUM*, BIGNUM*);
void funlockfile(FILE*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME*, time_t, int, long);
int ASN1_TYPE_set1(ASN1_TYPE*, int, const void*);
const BIGNUM* BN_get0_nist_prime_521();
int ASN1_sign(i2d_of_void*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*,  char*, EVP_PKEY*, const EVP_MD*);
const ASN1_ITEM* ASN1_UTCTIME_it();
stack_st_X509* X509_STORE_CTX_get0_untrusted(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_aes_192_cfb8();
int X509_NAME_add_entry_by_NID(X509_NAME*, int, int, const unsigned char*, int, int, int);
void __pthread_unregister_cancel(__pthread_unwind_buf_t*);
int pthread_barrierattr_setpshared(pthread_barrierattr_t*, int);
void* ASN1_item_unpack(const ASN1_STRING*, const ASN1_ITEM*);
int PKCS7_dataVerify(X509_STORE*, X509_STORE_CTX*, BIO*, PKCS7*, PKCS7_SIGNER_INFO*);
PKCS8_PRIV_KEY_INFO* PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO*, PKCS8_PRIV_KEY_INFO**, pem_password_cb*, void*);
int pthread_setaffinity_np(pthread_t, size_t, const cpu_set_t*);
const ASN1_ITEM* PKCS7_ENC_CONTENT_it();
const char* EVP_ASYM_CIPHER_get0_description(const EVP_ASYM_CIPHER*);
int BIO_meth_set_destroy(BIO_METHOD*, int (BIO*)*);
EVP_MAC_CTX* EVP_MAC_CTX_new(EVP_MAC*);
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
int EC_POINT_get_affine_coordinates(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
int pthread_attr_getguardsize(const pthread_attr_t*, size_t*);
void X509_STORE_set_cleanup(X509_STORE*, X509_STORE_CTX_cleanup_fn);
ECDSA_SIG* ECDSA_do_sign(const unsigned char*, int, EC_KEY*);
void OPENSSL_cleanup();
int CONF_parse_list(const char*, int, int, int (const char*, int, void*)*, void*);
int RSA_flags(const RSA*);
void EC_KEY_METHOD_get_verify(const EC_KEY_METHOD*, int (int, const unsigned char*, int, const unsigned char*, int, EC_KEY*)**, int (const unsigned char*, int, const ECDSA_SIG*, EC_KEY*)**);
void EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*, unsigned char*, size_t*)*);
void* PEM_ASN1_read_bio(d2i_of_void*, const char*, BIO*, void**, pem_password_cb*, void*);
void BN_CTX_free(BN_CTX*);
ssize_t writev(int, const iovec*, int);
void* CONF_imodule_get_usr_data(const CONF_IMODULE*);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE*);
void X509_STORE_CTX_set0_crls(X509_STORE_CTX*, stack_st_X509_CRL*);
int BIO_meth_set_write(BIO_METHOD*, int (BIO*, const char*, int)*);
void X509_STORE_CTX_set_error_depth(X509_STORE_CTX*, int);
const OSSL_PROVIDER* EVP_RAND_get0_provider(const EVP_RAND*);
void DIST_POINT_free(DIST_POINT*);
int UI_get_result_length(UI*, int);
const char* EVP_PKEY_get0_type_name(const EVP_PKEY*);
void X509_policy_tree_free(X509_POLICY_TREE*);
int (UI*)* UI_method_get_flusher(const UI_METHOD*);
in_addr_t inet_network(const char*);
int PEM_write_bio_RSA_PUBKEY(BIO*, const RSA*);
unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX*);
int ASN1_PRINTABLE_type(const unsigned char*, int);
int GENERAL_NAME_print(BIO*, GENERAL_NAME*);
char* EC_POINT_point2hex(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, BN_CTX*);
int SSL_CTX_add_session(SSL_CTX*, SSL_SESSION*);
int EVP_DigestSignInit(EVP_MD_CTX*, EVP_PKEY_CTX**, const EVP_MD*, ENGINE*, EVP_PKEY*);
stack_st_SCT* o2i_SCT_LIST(stack_st_SCT**, const unsigned char**, size_t);
int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DSA_meth_get_mod_exp(const DSA_METHOD*);
int sched_rr_get_interval(__pid_t, timespec*);
int X509_REQ_verify_ex(X509_REQ*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
int UI_dup_user_data(UI*, void*);
X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(const X509_STORE*);
int PEM_write_X509_REQ_NEW(FILE*, const X509_REQ*);
const ASN1_ITEM* ASN1_SET_ANY_it();
int EVP_KEYMGMT_is_a(const EVP_KEYMGMT*, const char*);
const char* crypt_preferred_method();
void* ASN1_item_d2i_fp_ex(const ASN1_ITEM*, FILE*, void*, OSSL_LIB_CTX*, const char*);
int DSA_set_ex_data(DSA*, int, void*);
int OBJ_new_nid(int);
int EVP_PKEY_CTX_get_group_name(EVP_PKEY_CTX*,  char*, size_t);
int RSA_private_decrypt(int, const unsigned char*, unsigned char*, RSA*, int);
int clock_settime(clockid_t, const timespec*);
NAMING_AUTHORITY* d2i_NAMING_AUTHORITY(NAMING_AUTHORITY**, const unsigned char**, long);
void EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
int pthread_setcanceltype(int, int*);
int setnetgrent(const char*);
DSA* d2i_DSAparams(DSA**, const unsigned char**, long);
pcre32* pcre32_compile(const unsigned int*, int, const char**, int*, const unsigned char*);
X509_LOOKUP_METHOD* X509_LOOKUP_store();
ENGINE* ENGINE_get_default_RSA();
PKCS7* PKCS7_encrypt(stack_st_X509*, BIO*, const EVP_CIPHER*, int);
int SSL_SESSION_get0_ticket_appdata(SSL_SESSION*, void**, size_t*);
int i2d_DSAPrivateKey_bio(BIO*, const DSA*);
int EVP_KEYMGMT_up_ref(EVP_KEYMGMT*);
ASN1_TYPE* ASN1_TYPE_pack_sequence(const ASN1_ITEM*, void*, ASN1_TYPE**);
void* EVP_PKEY_get0(const EVP_PKEY*);
void DSA_set_default_method(const DSA_METHOD*);
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX*, const char*, const char*);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX*, int);
int glob_pattern_p(const char*, int);
void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH*, FILE*);
int* X509_REQ_get_extension_nids();
ASN1_ENUMERATED* d2i_ASN1_ENUMERATED(ASN1_ENUMERATED**, const unsigned char**, long);
void ENGINE_register_all_RAND();
int inet6_option_find(const cmsghdr*, uint8_t**, int);
BIO* BIO_new_buffer_ssl_connect(SSL_CTX*);
int ENGINE_set_default(ENGINE*, unsigned int);
int ECDSA_sign_setup(EC_KEY*, BN_CTX*, BIGNUM**, BIGNUM**);
int getdomainname( char*, size_t);
unsigned long ERR_peek_error_func(const char**);
const OSSL_PARAM* EVP_PKEY_CTX_settable_params(const EVP_PKEY_CTX*);
BIO* SSL_get_wbio(const SSL*);
int RSA_print_fp(FILE*, const RSA*, int);
int EVP_PKEY_verify_recover_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
DSA* PEM_read_bio_DSAPrivateKey(BIO*, DSA**, pem_password_cb*, void*);
int ASN1_bn_print(BIO*, const char*, const BIGNUM*, unsigned char*, int);
int EVP_PKEY_CTX_set_dsa_paramgen_gindex(EVP_PKEY_CTX*, int);
int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX*, const void*, int, void*, void (ASYNC_WAIT_CTX*, const void*, int, void*)*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create(int, int, void*);
int EVP_MAC_final(EVP_MAC_CTX*, unsigned char*, size_t*, size_t);
int i2b_PublicKey_bio(BIO*, const EVP_PKEY*);
void DSA_meth_free(DSA_METHOD*);
int i2d_X509_REQ_bio(BIO*, const X509_REQ*);
int BN_mod_exp_simple(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL*);
int RSA_meth_set_mod_exp(RSA_METHOD*, int (BIGNUM*, const BIGNUM*, RSA*, BN_CTX*)*);
int pthread_barrierattr_destroy(pthread_barrierattr_t*);
ASN1_VALUE* ASN1_item_d2i(ASN1_VALUE**, const unsigned char**, long, const ASN1_ITEM*);
void X509_ALGOR_set_md(X509_ALGOR*, const EVP_MD*);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED*, int, void*, int, unsigned long);
int i2d_GENERAL_NAMES(const GENERAL_NAMES*, unsigned char**);
EVP_PKEY* EVP_PKEY_new_raw_private_key(int, ENGINE*, const unsigned char*, size_t);
const char* inet_ntop(int, restrict const void*, restrict  char*, socklen_t);
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD*, const EVP_PKEY_ASN1_METHOD*);
PBEPARAM* d2i_PBEPARAM(PBEPARAM**, const unsigned char**, long);
const char* gai_strerror(int);
const EC_METHOD* EC_GFp_mont_method();
void* memcpy(void*, const void*, unsigned long int);
int i2d_SXNET(const SXNET*, unsigned char**);
void SSL_CTX_set_psk_use_session_callback(SSL_CTX*, SSL_psk_use_session_cb_func);
int CONF_modules_load_file(const char*, const char*, unsigned long);
void SSL_set_hostflags(SSL*, unsigned int);
int i2b_PrivateKey_bio(BIO*, const EVP_PKEY*);
int EVP_PKEY_get_bits(const EVP_PKEY*);
const ASN1_ITEM* ASRange_it();
const ASN1_ITEM* ASN1_ITEM_get(size_t);
int BN_add(BIGNUM*, const BIGNUM*, const BIGNUM*);
const EVP_CIPHER* EVP_camellia_128_ofb();
int X509_REQ_set1_signature_algo(X509_REQ*, X509_ALGOR*);
int EVP_EncryptInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, const OSSL_PARAM[]);
int CRYPTO_get_ex_new_index(int, long, void*, CRYPTO_EX_new*, CRYPTO_EX_dup*, CRYPTO_EX_free*);
int SSL_get_shared_sigalgs(SSL*, int, int*, int*, int*, unsigned char*, unsigned char*);
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX*, int);
ASRange* d2i_ASRange(ASRange**, const unsigned char**, long);
int SSL_set_async_callback(SSL*, SSL_async_callback_fn);
BIGNUM* BN_get_rfc3526_prime_1536(BIGNUM*);
EC_KEY* d2i_ECPrivateKey(EC_KEY**, const unsigned char**, long);
int SSL_set_fd(SSL*, int);
int sigwaitinfo(restrict const sigset_t*, restrict siginfo_t*);
EVP_PKEY* EVP_PKEY_new_raw_public_key(int, ENGINE*, const unsigned char*, size_t);
int EVP_RAND_uninstantiate(EVP_RAND_CTX*);
size_t DTLS_get_data_mtu(const SSL*);
const ASN1_TIME* X509_get0_notBefore(const X509*);
void SSL_get0_next_proto_negotiated(const SSL*, const unsigned char**, unsigned*);
int openat(int, const char*, int);
void EVP_KEM_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEM*, void*)*, void*);
int X509_load_cert_file(X509_LOOKUP*, const char*, int);
uint64_t SSL_set_options(SSL*, uint64_t);
int sockatmark(int);
void pcre16_jit_free_unused_memory();
int (BIO*,  char*, int)* BIO_meth_get_read(const BIO_METHOD*);
OCSP_REVOKEDINFO* OCSP_REVOKEDINFO_new();
X509_REVOKED* X509_REVOKED_dup(const X509_REVOKED*);
int sigaddset(sigset_t*, int);
RSA* RSAPublicKey_dup(const RSA*);
int i2d_DIST_POINT_NAME(const DIST_POINT_NAME*, unsigned char**);
RSA_OAEP_PARAMS* RSA_OAEP_PARAMS_new();
int getprotobyname_r(restrict const char*, restrict protoent*, restrict  char*, size_t, restrict protoent**);
ASYNC_WAIT_CTX* ASYNC_WAIT_CTX_new();
int (EVP_MD_CTX*, int, int, void*)* EVP_MD_meth_get_ctrl(const EVP_MD*);
int X509_add_certs(stack_st_X509*, stack_st_X509*, int);
int ENGINE_set_finish_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
BIGNUM* BN_get_rfc2409_prime_768(BIGNUM*);
int PEM_write_bio_PUBKEY_ex(BIO*, const EVP_PKEY*, OSSL_LIB_CTX*, const char*);
tm* gmtime(const time_t*);
int CTLOG_STORE_load_default_file(CTLOG_STORE*);
int i2d_NOTICEREF(const NOTICEREF*, unsigned char**);
in_addr inet_makeaddr(in_addr_t, in_addr_t);
ASN1_VISIBLESTRING* d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING**, const unsigned char**, long);
int SSL_CTX_set_recv_max_early_data(SSL_CTX*, uint32_t);
void SSL_CTX_set_verify(SSL_CTX*, int, SSL_verify_cb);
mallinfo mallinfo();
SSL_SESSION* SSL_SESSION_dup(const SSL_SESSION*);
void SSL_CTX_flush_sessions(SSL_CTX*, long);
void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char*, size_t)*);
int ASN1_GENERALIZEDTIME_print(BIO*, const ASN1_GENERALIZEDTIME*);
int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX*);
unsigned long inflateCodesUsed(z_streamp);
BIO* BIO_new(const BIO_METHOD*);
int isascii(int);
EVP_PKEY* EVP_PKEY_new_raw_private_key_ex(OSSL_LIB_CTX*, const char*, const char*, const unsigned char*, size_t);
__ssize_t getdents64(int, void*, size_t);
X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(const X509_STORE*);
const ASN1_ITEM* X509_REQ_INFO_it();
AUTHORITY_INFO_ACCESS* AUTHORITY_INFO_ACCESS_new();
int PEM_write_bio_PKCS8(BIO*, const X509_SIG*);
int pthread_attr_getstacksize(restrict const pthread_attr_t*, restrict size_t*);
int SSL_set_session(SSL*, SSL_SESSION*);
int EVP_PKEY_set_bn_param(EVP_PKEY*, const char*, const BIGNUM*);
int ERR_clear_last_mark();
const EVP_CIPHER* EVP_des_ofb();
int ASN1_TIME_print_ex(BIO*, const ASN1_TIME*, unsigned long);
int i2d_X509_PUBKEY_bio(BIO*, const X509_PUBKEY*);
ASN1_TYPE* PKCS7_get_attribute(const PKCS7_SIGNER_INFO*, int);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX*, unsigned long);
const EC_KEY_METHOD* EC_KEY_get_method(const EC_KEY*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_id(int, ENGINE*);
int sigaltstack(restrict const stack_t*, restrict stack_t*);
int EVP_PKEY_missing_parameters(const EVP_PKEY*);
void SCT_set_timestamp(SCT*, uint64_t);
pcre* pcre_compile2(const char*, int, int*, const char**, int*, const unsigned char*);
int SSL_SRP_CTX_init(SSL*);
int PEM_write_bio_RSAPublicKey(BIO*, const RSA*);
void OCSP_REQINFO_free(OCSP_REQINFO*);
int SHA256_Init(SHA256_CTX*);
ASN1_BMPSTRING* ASN1_BMPSTRING_new();
int X509V3_EXT_add_nconf(CONF*, X509V3_CTX*, const char*, X509*);
const void* OBJ_bsearch_ex_(const void*, const void*, int, int, int (const void*, const void*)*, int);
int creat64(const char*, mode_t);
const char* SSL_get_psk_identity(const SSL*);
int PEM_write_bio_X509_CRL(BIO*, const X509_CRL*);
int i2d_OCSP_REQUEST(const OCSP_REQUEST*, unsigned char**);
int memfd_create(const char*, unsigned int);
int gzsetparams(gzFile, int, int);
int SCT_set_signature_nid(SCT*, int);
int EVP_Q_digest(OSSL_LIB_CTX*, const char*, const char*, const void*, size_t, unsigned char*, size_t*);
X509* X509_OBJECT_get0_X509(const X509_OBJECT*);
int (EVP_CIPHER_CTX*)* EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER*);
unsigned long ERR_peek_last_error_data(const char**, int*);
const EVP_CIPHER* EVP_aes_128_ocb();
int dlinfo(restrict void*, int, restrict void*);
const unsigned short int** __ctype_b_loc();
int BN_GF2m_mod_exp(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
ECDSA_SIG* ECDSA_SIG_new();
int BIO_free(BIO*);
ENGINE* RSA_get0_engine(const RSA*);
OSSL_HTTP_REQ_CTX* OSSL_HTTP_REQ_CTX_new(BIO*, BIO*, int);
const SSL_METHOD* DTLSv1_2_method();
X509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(const X509_STORE_CTX*);
int X509_pubkey_digest(const X509*, const EVP_MD*, unsigned char*, unsigned int*);
const SSL_METHOD* TLSv1_server_method();
int setsockopt(int, int, int, const void*, socklen_t);
int EVP_MD_meth_set_input_blocksize(EVP_MD*, int);
const ASN1_ITEM* IPAddressFamily_it();
int EVP_PKEY_CTX_get0_ecdh_kdf_ukm(EVP_PKEY_CTX*, unsigned char**);
void setbuf(restrict FILE*, restrict  char*);
const EVP_CIPHER* EVP_aria_128_ctr();
int UI_add_input_string(UI*, const char*, int,  char*, int, int);
EVP_PKEY* X509_REQ_get_pubkey(X509_REQ*);
char* getpass(const char*);
void SSL_CTX_set_cert_store(SSL_CTX*, X509_STORE*);
const EVP_CIPHER* EVP_aes_128_ofb();
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP*, X509_EXTENSION*, int);
int getdtablesize();
int SSL_CTX_config(SSL_CTX*, const char*);
BN_MONT_CTX* BN_MONT_CTX_new();
int X509_set1_notBefore(X509*, const ASN1_TIME*);
int EVP_DecryptInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, const OSSL_PARAM[]);
void explicit_bzero(void*, size_t);
time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM*);
int BN_mul_word(BIGNUM*, unsigned long);
int fputs_unlocked(restrict const char*, restrict FILE*);
void EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
OSSL_HTTP_REQ_CTX* OCSP_sendreq_new(BIO*, const char*, const OCSP_REQUEST*, int);
int sigdelset(sigset_t*, int);
int pclose(FILE*);
void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS*, unsigned long);
int X509_STORE_set_flags(X509_STORE*, unsigned long);
int pcre_copy_substring(const char*, int*, int, int,  char*, int);
int ENGINE_up_ref(ENGINE*);
int pthread_spin_init(pthread_spinlock_t*, int);
int SSL_read_ex(SSL*, void*, size_t, size_t*);
const EVP_CIPHER* EVP_aes_128_wrap();
void ASN1_add_oid_module();
int pcre32_copy_substring(const unsigned int*, int*, int, int, unsigned int*, int);
SSL_CONF_CTX* SSL_CONF_CTX_new();
int EVP_PKEY_paramgen(EVP_PKEY_CTX*, EVP_PKEY**);
PROXY_POLICY* PROXY_POLICY_new();
int CRYPTO_atomic_or(uint64_t*, uint64_t, uint64_t*, CRYPTO_RWLOCK*);
int RSA_meth_set_init(RSA_METHOD*, int (RSA*)*);
int gzputs(gzFile, const char*);
int BIO_dump_indent(BIO*, const void*, int, int);
int X509_REQ_print(BIO*, X509_REQ*);
ENGINE* ENGINE_get_first();
ASN1_BIT_STRING* ASN1_BIT_STRING_new();
char* X509_VERIFY_PARAM_get1_ip_asc(X509_VERIFY_PARAM*);
int __sched_cpucount(size_t, const cpu_set_t*);
int vsscanf(restrict const  char*, restrict const  char*, __va_list_tag*);
int ASN1_STRING_set_default_mask_asc(const char*);
void BN_RECP_CTX_free(BN_RECP_CTX*);
const ASN1_ITEM* X509_CRL_it();
void ENGINE_add_conf_module();
int NAME_CONSTRAINTS_check_CN(X509*, NAME_CONSTRAINTS*);
int rresvport_af(int*, sa_family_t);
int setgid(__gid_t);
const ASN1_ITEM* X509_it();
char* __stpncpy(restrict  char*, restrict const char*, size_t);
X509_NAME_ENTRY* X509_NAME_delete_entry(X509_NAME*, int);
int PKCS7_add_crl(PKCS7*, X509_CRL*);
const SSL_CIPHER* SSL_CIPHER_find(SSL*, const unsigned char*);
void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
void EC_GROUP_set_asn1_flag(EC_GROUP*, int);
int EC_POINTs_mul(const EC_GROUP*, EC_POINT*, const BIGNUM*, size_t, const EC_POINT*[], const BIGNUM*[], BN_CTX*);
int inet6_opt_append(void*, socklen_t, int, uint8_t, socklen_t, uint8_t, void**);
void SCT_set0_signature(SCT*, unsigned char*, size_t);
int fstatat(int, restrict const char*, restrict stat*, int);
void* EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX*);
void NCONF_free(CONF*);
int BN_is_zero(const BIGNUM*);
const UI_METHOD* UI_set_method(UI*, const UI_METHOD*);
int sched_yield();
int RSA_pkey_ctx_ctrl(EVP_PKEY_CTX*, int, int, int, void*);
passwd* fgetpwent(FILE*);
void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX*);
int pthread_attr_getschedparam(restrict const pthread_attr_t*, restrict sched_param*);
int i2d_SCRYPT_PARAMS(const SCRYPT_PARAMS*, unsigned char**);
void EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD*, int (unsigned char**, size_t*, const EC_POINT*, const EC_KEY*)*);
int EVP_PKEY_derive_init(EVP_PKEY_CTX*);
int (SSL*, X509**, EVP_PKEY**)* SSL_CTX_get_client_cert_cb(SSL_CTX*);
servent* getservbyport(int, const char*);
const char* strerrorname_np(int);
pcre32* pcre32_compile2(const unsigned int*, int, int*, const char**, int*, const unsigned char*);
const BIO_ADDR* BIO_ADDRINFO_address(const BIO_ADDRINFO*);
int PEM_write_bio_PKCS7(BIO*, const PKCS7*);
int OPENSSL_sk_is_sorted(const OPENSSL_STACK*);
int EVP_CIPHER_get_key_length(const EVP_CIPHER*);
GENERAL_SUBTREE* GENERAL_SUBTREE_new();
EVP_PKEY* EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX*);
POLICYINFO* d2i_POLICYINFO(POLICYINFO**, const unsigned char**, long);
int DH_check_ex(const DH*);
int EVP_CIPHER_get_iv_length(const EVP_CIPHER*);
void BUF_MEM_free(BUF_MEM*);
int versionsort(const dirent**, const dirent**);
int (DH*)* DH_meth_get_finish(const DH_METHOD*);
X509_REQ* d2i_X509_REQ_fp(FILE*, X509_REQ**);
const EVP_CIPHER* EVP_sm4_cbc();
int SSL_set_async_callback_arg(SSL*, void*);
int DH_set_ex_data(DH*, int, void*);
void EVP_MD_CTX_set_update_fn(EVP_MD_CTX*, int (EVP_MD_CTX*, const void*, size_t)*);
const ASN1_ITEM* X509_EXTENSIONS_it();
sct_version_t SCT_get_version(const SCT*);
int EC_GROUP_get_trinomial_basis(const EC_GROUP*, unsigned int*);
const EVP_CIPHER* EVP_rc2_cbc();
void SSL_set_security_level(SSL*, int);
int EVP_MD_get_block_size(const EVP_MD*);
const CTLOG_STORE* CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX*);
int OSSL_PARAM_get_time_t(const OSSL_PARAM*, time_t*);
DSA_SIG* DSA_do_sign(const unsigned char*, int, DSA*);
EVP_PKEY* PEM_read_PUBKEY_ex(FILE*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void TLS_FEATURE_free(TLS_FEATURE*);
int deflateReset(z_streamp);
const EVP_CIPHER* EVP_camellia_192_ecb();
const EVP_CIPHER* EVP_des_ede_ofb();
void PKCS5_PBE_add();
const BIO_METHOD* BIO_f_ssl();
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
size_t SCT_get0_log_id(const SCT*, unsigned char**);
int syncfs(int);
int OSSL_PARAM_allocate_from_text(OSSL_PARAM*, const OSSL_PARAM*, const char*, const char*, size_t, int*);
int RSA_sign(int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, RSA*);
void OPENSSL_thread_stop();
const SSL_METHOD* DTLS_method();
int DH_up_ref(DH*);
int OCSP_basic_add1_cert(OCSP_BASICRESP*, X509*);
__mode_t umask(__mode_t);
int BN_hex2bn(BIGNUM**, const char*);
X509_NAME* X509_REQ_get_subject_name(const X509_REQ*);
char* SSL_get_shared_ciphers(const SSL*,  char*, int);
int OSSL_PARAM_get_ulong(const OSSL_PARAM*, unsigned long int*);
void X509_set_proxy_flag(X509*);
void SSL_set0_security_ex_data(SSL*, void*);
void X509_STORE_CTX_set0_param(X509_STORE_CTX*, X509_VERIFY_PARAM*);
int X509_verify(X509*, EVP_PKEY*);
void SSL_set_verify(SSL*, int, SSL_verify_cb);
int ECDSA_sign_ex(int, const unsigned char*, int, unsigned char*, unsigned int*, const BIGNUM*, const BIGNUM*, EC_KEY*);
int SSL_CTX_enable_ct(SSL_CTX*, int);
int (BIO*, const char*, size_t, size_t*)* BIO_meth_get_write_ex(const BIO_METHOD*);
int EVP_set_default_properties(OSSL_LIB_CTX*, const char*);
EC_GROUP* PEM_read_ECPKParameters(FILE*, EC_GROUP**, pem_password_cb*, void*);
int BN_generate_prime_ex2(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, BN_GENCB*, BN_CTX*);
ACCESS_DESCRIPTION* d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION**, const unsigned char**, long);
int getrlimit(__rlimit_resource_t, rlimit*);
int CRYPTO_free_ex_index(int, int);
int ttyname_r(int,  char*, size_t);
int on_exit(void (int, void*)*, void*);
const EC_METHOD* EC_GFp_nistp256_method();
int EVP_PKEY_CTX_get_dh_kdf_outlen(EVP_PKEY_CTX*, int*);
void SSL_CTX_set_client_CA_list(SSL_CTX*, stack_st_X509_NAME*);
int i2d_RSAPublicKey_fp(FILE*, const RSA*);
const char* ERR_func_error_string(unsigned long);
int BN_generate_prime_ex(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, BN_GENCB*);
EC_POINT* EC_POINT_new(const EC_GROUP*);
ASN1_OCTET_STRING* X509_REQ_get0_distinguishing_id(X509_REQ*);
int BN_gcd(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
char* crypt_ra(const char*, const char*, void**, int*);
ASN1_STRING* DISPLAYTEXT_new();
int BIO_ADDR_family(const BIO_ADDR*);
void EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*);
OCSP_RESPID* OCSP_RESPID_new();
const EVP_CIPHER* EVP_bf_cfb64();
int ASN1_str2mask(const char*, unsigned long*);
int ECPKParameters_print_fp(FILE*, const EC_GROUP*, int);
void ERR_clear_error();
void ASN1_OBJECT_free(ASN1_OBJECT*);
int EVP_RAND_CTX_set_params(EVP_RAND_CTX*, const OSSL_PARAM[]);
int X509_ALGOR_set0(X509_ALGOR*, ASN1_OBJECT*, int, void*);
EVP_PKEY* PEM_read_bio_Parameters_ex(BIO*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
long long int strtoll(const  char*,  char**, int);
int EC_KEY_decoded_from_explicit_params(const EC_KEY*);
ADMISSIONS* ADMISSIONS_new();
EC_KEY* d2i_EC_PUBKEY_bio(BIO*, EC_KEY**);
char* index(const  char*, int);
int obstack_vprintf(restrict obstack*, restrict const char*, __gnuc_va_list);
int RSA_meth_set_flags(RSA_METHOD*, int);
int shm_unlink(const char*);
ASIdOrRange* d2i_ASIdOrRange(ASIdOrRange**, const unsigned char**, long);
int __asprintf(restrict  char**, restrict const char*);
int OSSL_PARAM_set_octet_ptr(OSSL_PARAM*, const void*, size_t);
int UI_UTIL_read_pw_string( char*, int, const char*, int);
int EVP_PKEY_get_group_name(const EVP_PKEY*,  char*, size_t, size_t*);
const BIGNUM* BN_get0_nist_prime_224();
__pid_t getpgid(__pid_t);
int fgetpos(restrict FILE*, restrict fpos_t*);
ASRange* ASRange_new();
EVP_SIGNATURE* EVP_SIGNATURE_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_DigestVerifyInit_ex(EVP_MD_CTX*, EVP_PKEY_CTX**, const char*, OSSL_LIB_CTX*, const char*, EVP_PKEY*, const OSSL_PARAM[]);
const EVP_CIPHER* EVP_aes_128_cfb1();
int X509_STORE_CTX_print_verify_cb(int, X509_STORE_CTX*);
const GENERAL_NAMES* X509_get0_authority_issuer(X509*);
int i2d_OCSP_RESPID(const OCSP_RESPID*, unsigned char**);
int SSL_SESSION_has_ticket(const SSL_SESSION*);
const BIO_METHOD* BIO_f_asn1();
ASIdentifierChoice* ASIdentifierChoice_new();
int DSA_meth_set0_app_data(DSA_METHOD*, void*);
void OPENSSL_init();
int EVP_DigestSignUpdate(EVP_MD_CTX*, const void*, size_t);
int fallocate(int, int, __off64_t, __off64_t);
ASN1_OBJECT* X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY*);
size_t BIO_ctrl_wpending(BIO*);
DH* DH_get_2048_256();
void OPENSSL_fork_child();
const OSSL_PROVIDER* EVP_MAC_get0_provider(const EVP_MAC*);
int lockf(int, int, __off64_t);
void CTLOG_free(CTLOG*);
int fstat64(int, stat64*);
pcre_extra* pcre_study(const pcre*, int, const char**);
int BIO_dump_indent_fp(FILE*, const void*, int, int);
ssize_t pwrite(int, const void*, size_t, __off64_t);
char* ctermid( char*);
int ENGINE_ctrl(ENGINE*, int, long, void*, void ()*);
ssize_t preadv64(int, const iovec*, int, __off64_t);
int pthread_rwlock_timedwrlock(restrict pthread_rwlock_t*, restrict const timespec*);
const BIGNUM* RSA_get0_d(const RSA*);
int X509_NAME_cmp(const X509_NAME*, const X509_NAME*);
int posix_fadvise64(int, off64_t, off64_t, int);
int SSL_bytes_to_cipher_list(SSL*, const unsigned char*, size_t, int, stack_st_SSL_CIPHER**, stack_st_SSL_CIPHER**);
int inflateSyncPoint(z_streamp);
int PEM_X509_INFO_write_bio(BIO*, const X509_INFO*, EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
OSSL_PARAM* OSSL_PARAM_locate(OSSL_PARAM*, const char*);
const DSA_METHOD* ENGINE_get_DSA(const ENGINE*);
SCT* o2i_SCT(SCT**, const unsigned char**, size_t);
int pthread_mutex_timedlock(restrict pthread_mutex_t*, restrict const timespec*);
int EC_GROUP_copy(EC_GROUP*, const EC_GROUP*);
OSSL_HANDSHAKE_STATE SSL_get_state(const SSL*);
int BN_lshift1(BIGNUM*, const BIGNUM*);
int (EVP_CIPHER_CTX*, ASN1_TYPE*)* EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER*);
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX*, int, int, int, int, void*);
const ASN1_ITEM* DIRECTORYSTRING_it();
SCT* SCT_new();
const OSSL_PARAM* EVP_MD_gettable_ctx_params(const EVP_MD*);
int fcvt_r(double, int, restrict int*, restrict int*, restrict  char*, size_t);
int OBJ_NAME_new_index(unsigned long (const char*)*, int (const char*, const char*)*, void (const char*, int, const char*)*);
ENGINE* ENGINE_new();
int EVP_CIPHER_is_a(const EVP_CIPHER*, const char*);
int BN_rand_range(BIGNUM*, const BIGNUM*);
unsigned long long int strtoull_l(restrict const char*, restrict  char**, int, locale_t);
const BIO_METHOD* BIO_s_secmem();
int crypt_checksalt(const char*);
int SSL_CTX_use_cert_and_key(SSL_CTX*, X509*, EVP_PKEY*, stack_st_X509*, int);
void PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO*, stack_st_ASN1_OBJECT*);
int pkey_alloc(unsigned int, unsigned int);
int EVP_PKEY_up_ref(EVP_PKEY*);
void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, EVP_PKEY*)*);
void ENGINE_unregister_ciphers(ENGINE*);
void X509_PKEY_free(X509_PKEY*);
int SSL_CTX_add_client_CA(SSL_CTX*, X509*);
int i2d_X509_CRL(const X509_CRL*, unsigned char**);
void SSL_set_post_handshake_auth(SSL*, int);
int unlink(const char*);
long double strtold_l(restrict const char*, restrict  char**, locale_t);
int i2d_ECPrivateKey(const EC_KEY*, unsigned char**);
int X509_PUBKEY_set0_param(X509_PUBKEY*, ASN1_OBJECT*, int, void*, unsigned char*, int);
in_addr_t inet_lnaof(in_addr);
void CONF_module_set_usr_data(CONF_MODULE*, void*);
int X509v3_get_ext_by_critical(const stack_st_X509_EXTENSION*, int, int);
int SHA1_Init(SHA_CTX*);
int ASN1_digest(i2d_of_void*, const EVP_MD*,  char*, unsigned char*, unsigned int*);
int pthread_rwlockattr_init(pthread_rwlockattr_t*);
size_t SSL_client_hello_get0_random(SSL*, const unsigned char**);
int X509_issuer_and_serial_cmp(const X509*, const X509*);
X509_EXTENSION* OCSP_ONEREQ_get_ext(OCSP_ONEREQ*, int);
siginfo_t::<anonymous>::<anonymous>::<anonymous>::<anonymous>;
siginfo_t::<anonymous>::<anonymous>::<anonymous>::<anonymous>::_lower;
siginfo_t::<anonymous>::<anonymous>::<anonymous>::<anonymous>::_upper;
bpf_link_info::<anonymous>::<anonymous>;
bpf_link_info::<anonymous>::<anonymous>::attach_type;
bpf_link_info::<anonymous>::<anonymous>::netns_ino;
DIST_POINT_NAME_st::<anonymous>;
DIST_POINT_NAME_st::<anonymous>::fullname;
DIST_POINT_NAME_st::<anonymous>::relativename;
mallinfo2;
mallinfo2::ordblks;
mallinfo2::usmblks;
mallinfo2::fsmblks;
mallinfo2::hblks;
mallinfo2::uordblks;
mallinfo2::arena;
mallinfo2::fordblks;
mallinfo2::smblks;
mallinfo2::hblkhd;
mallinfo2::keepcost;
tm;
tm::tm_year;
tm::tm_gmtoff;
tm::tm_min;
tm::tm_wday;
tm::tm_yday;
tm::tm_isdst;
tm::tm_mon;
tm::tm_mday;
tm::tm_sec;
tm::tm_zone;
tm::tm_hour;
bpf_attr::<anonymous>;
bpf_attr::<anonymous>::ctx_size_out;
bpf_attr::<anonymous>::prog_fd;
bpf_attr::<anonymous>::repeat;
bpf_attr::<anonymous>::ctx_in;
bpf_attr::<anonymous>::duration;
bpf_attr::<anonymous>::ctx_out;
bpf_attr::<anonymous>::cpu;
bpf_attr::<anonymous>::data_size_in;
bpf_attr::<anonymous>::data_size_out;
bpf_attr::<anonymous>::flags;
bpf_attr::<anonymous>::retval;
bpf_attr::<anonymous>::data_in;
bpf_attr::<anonymous>::data_out;
bpf_attr::<anonymous>::ctx_size_in;
BIT_STRING_BITNAME_st;
BIT_STRING_BITNAME_st::sname;
BIT_STRING_BITNAME_st::lname;
BIT_STRING_BITNAME_st::bitnum;
bpf_insn;
bpf_insn::imm;
bpf_insn::src_reg;
bpf_insn::dst_reg;
bpf_insn::code;
bpf_insn::off;
ucontext_t;
ucontext_t::__fpregs_mem;
ucontext_t::uc_flags;
ucontext_t::uc_link;
ucontext_t::uc_sigmask;
ucontext_t::__ssp;
ucontext_t::uc_mcontext;
ucontext_t::uc_stack;
EDIPartyName_st;
EDIPartyName_st::partyName;
EDIPartyName_st::nameAssigner;
__pthread_unwind_buf_t;
__pthread_unwind_buf_t::__pad;
__pthread_unwind_buf_t::__cancel_jmp_buf;
rusage::<anonymous>;
rusage::<anonymous>::ru_minflt;
rusage::<anonymous>::__ru_minflt_word;
group_filter;
group_filter::gf_numsrc;
group_filter::gf_fmode;
group_filter::gf_group;
group_filter::gf_slist;
group_filter::gf_interface;
bpf_flow_keys::<anonymous>;
ip_mreq;
ip_mreq::imr_interface;
ip_mreq::imr_multiaddr;
sk_msg_md::<anonymous>;
sk_msg_md::<anonymous>::<anonymous>;
sk_msg_md::<anonymous>::sk;
__sk_buff::<anonymous>;
__sk_buff::<anonymous>::<anonymous>;
__sk_buff::<anonymous>::sk;
pthread_rwlock_t;
pthread_rwlock_t::__data;
pthread_rwlock_t::__size;
pthread_rwlock_t::__align;
sk_msg_md::<anonymous>::data;
bpf_sock_tuple::<anonymous>;
bpf_sock_tuple::<anonymous>::ipv4;
bpf_sock_tuple::<anonymous>::ipv6;
bpf_attr::<anonymous>::bpf_fd;
bpf_attr::<anonymous>::info_len;
bpf_attr::<anonymous>::info;
bpf_redir_neigh;
bpf_redir_neigh::nh_family;
rand_meth_st;
rand_meth_st::seed;
rand_meth_st::status;
rand_meth_st::pseudorand;
rand_meth_st::bytes;
rand_meth_st::cleanup;
rand_meth_st::add;
bpf_link_info::<anonymous>::<anonymous>::cgroup_id;
_G_fpos64_t;
_G_fpos64_t::__pos;
_G_fpos64_t::__state;
pthread_condattr_t;
pthread_condattr_t::__size;
pthread_condattr_t::__align;
pthread_barrierattr_t;
pthread_barrierattr_t::__size;
pthread_barrierattr_t::__align;
rusage::<anonymous>::__ru_inblock_word;
rusage::<anonymous>::ru_inblock;
ASIdOrRange_st::<anonymous>;
ASIdOrRange_st::<anonymous>::id;
ASIdOrRange_st::<anonymous>::range;
AUTHORITY_KEYID_st;
AUTHORITY_KEYID_st::serial;
AUTHORITY_KEYID_st::keyid;
AUTHORITY_KEYID_st::issuer;
timezone;
timezone::tz_minuteswest;
timezone::tz_dsttime;
bpf_prog_info;
bpf_prog_info::<anonymous>;
bpf_prog_info::name;
bpf_prog_info::type;
bpf_prog_info::nr_jited_line_info;
bpf_prog_info::jited_ksyms;
bpf_prog_info::ifindex;
bpf_prog_info::btf_id;
bpf_prog_info::prog_tags;
bpf_prog_info::jited_func_lens;
bpf_prog_info::netns_ino;
bpf_prog_info::line_info;
bpf_prog_info::jited_line_info_rec_size;
bpf_prog_info::xlated_prog_len;
bpf_prog_info::func_info;
bpf_prog_info::tag;
bpf_prog_info::map_ids;
bpf_prog_info::gpl_compatible;
bpf_prog_info::xlated_prog_insns;
bpf_prog_info::run_time_ns;
bpf_prog_info::jited_prog_len;
bpf_prog_info::nr_jited_ksyms;
bpf_prog_info::netns_dev;
bpf_prog_info::jited_line_info;
bpf_prog_info::line_info_rec_size;
bpf_prog_info::func_info_rec_size;
bpf_prog_info::nr_jited_func_lens;
bpf_prog_info::id;
bpf_prog_info::load_time;
bpf_prog_info::nr_prog_tags;
bpf_prog_info::recursion_misses;
bpf_prog_info::jited_prog_insns;
bpf_prog_info::nr_line_info;
bpf_prog_info::created_by_uid;
bpf_prog_info::nr_func_info;
bpf_prog_info::run_cnt;
bpf_prog_info::nr_map_ids;
sigaction;
sigaction::sa_flags;
sigaction::sa_restorer;
sigaction::__sigaction_handler;
sigaction::sa_mask;
POLICY_MAPPING_st;
POLICY_MAPPING_st::issuerDomainPolicy;
POLICY_MAPPING_st::subjectDomainPolicy;
bpf_attr::<anonymous>::<anonymous>;
bpf_attr::<anonymous>::<anonymous>::target_fd;
bpf_attr::<anonymous>::<anonymous>::target_ifindex;
sigaction::<anonymous>;
sigaction::<anonymous>::sa_handler;
sigaction::<anonymous>::sa_sigaction;
ip_msfilter;
ip_msfilter::imsf_multiaddr;
ip_msfilter::imsf_numsrc;
ip_msfilter::imsf_fmode;
ip_msfilter::imsf_slist;
ip_msfilter::imsf_interface;
rusage::<anonymous>::__ru_isrss_word;
rusage::<anonymous>::ru_isrss;
pcre16_callout_block;
pcre16_callout_block::capture_top;
pcre16_callout_block::version;
pcre16_callout_block::capture_last;
pcre16_callout_block::mark;
pcre16_callout_block::callout_data;
pcre16_callout_block::next_item_length;
pcre16_callout_block::subject;
pcre16_callout_block::subject_length;
pcre16_callout_block::pattern_position;
pcre16_callout_block::current_position;
pcre16_callout_block::offset_vector;
pcre16_callout_block::start_match;
pcre16_callout_block::callout_number;
bpf_lpm_trie_key;
bpf_lpm_trie_key::data;
bpf_lpm_trie_key::prefixlen;
_xstate;
_xstate::xstate_hdr;
_xstate::fpstate;
_xstate::ymmh;
sockaddr_in6;
sockaddr_in6::sin6_family;
sockaddr_in6::sin6_flowinfo;
sockaddr_in6::sin6_port;
sockaddr_in6::sin6_scope_id;
sockaddr_in6::sin6_addr;
sem_t;
sem_t::__size;
sem_t::__align;
__user_cap_data_struct;
__user_cap_data_struct::effective;
__user_cap_data_struct::inheritable;
__user_cap_data_struct::permitted;
POLICY_CONSTRAINTS_st;
POLICY_CONSTRAINTS_st::inhibitPolicyMapping;
POLICY_CONSTRAINTS_st::requireExplicitPolicy;
bpf_sock_ops::<anonymous>;
bpf_sock_ops::<anonymous>::<anonymous>;
bpf_sock_ops::<anonymous>::skb_data_end;
glob_t;
glob_t::gl_offs;
glob_t::gl_pathc;
glob_t::gl_opendir;
glob_t::gl_pathv;
glob_t::gl_closedir;
glob_t::gl_lstat;
glob_t::gl_readdir;
glob_t::gl_stat;
glob_t::gl_flags;
gz_header_s;
gz_header_s::hcrc;
gz_header_s::name;
gz_header_s::os;
gz_header_s::extra_len;
gz_header_s::extra;
gz_header_s::text;
gz_header_s::xflags;
gz_header_s::name_max;
gz_header_s::extra_max;
gz_header_s::done;
gz_header_s::time;
gz_header_s::comm_max;
gz_header_s::comment;
bpf_iter_link_info;
bpf_iter_link_info::map;
termio;
termio::c_iflag;
termio::c_lflag;
termio::c_cc;
termio::c_line;
termio::c_oflag;
termio::c_cflag;
iovec;
iovec::iov_base;
iovec::iov_len;
st_dynamic_fns;
st_dynamic_fns::mem_fns;
st_dynamic_fns::static_state;
ASRange_st;
ASRange_st::min;
ASRange_st::max;
sigevent::<anonymous>;
sigevent::<anonymous>::_tid;
sigevent::<anonymous>::_pad;
sigevent::<anonymous>::_sigev_thread;
gaicb;
gaicb::ar_result;
gaicb::ar_name;
gaicb::ar_service;
gaicb::ar_request;
gaicb::__return;
gaicb::__glibc_reserved;
bpf_fib_lookup::<anonymous>;
bpf_fib_lookup::<anonymous>::ipv4_src;
bpf_fib_lookup::<anonymous>::ipv6_src;
bpf_attr::<anonymous>::probe_addr;
bpf_attr::<anonymous>::prog_id;
bpf_attr::<anonymous>::fd;
bpf_attr::<anonymous>::buf_len;
bpf_attr::<anonymous>::fd_type;
bpf_attr::<anonymous>::buf;
bpf_attr::<anonymous>::pid;
bpf_attr::<anonymous>::probe_offset;
rsa_oaep_params_st;
rsa_oaep_params_st::hashFunc;
rsa_oaep_params_st::maskHash;
rsa_oaep_params_st::maskGenFunc;
rsa_oaep_params_st::pSourceFunc;
PKEY_USAGE_PERIOD_st;
PKEY_USAGE_PERIOD_st::notAfter;
PKEY_USAGE_PERIOD_st::notBefore;
ISSUER_SIGN_TOOL_st;
ISSUER_SIGN_TOOL_st::cAToolCert;
ISSUER_SIGN_TOOL_st::cATool;
ISSUER_SIGN_TOOL_st::signToolCert;
ISSUER_SIGN_TOOL_st::signTool;
itimerval;
itimerval::it_interval;
itimerval::it_value;
ISSUING_DIST_POINT_st;
ISSUING_DIST_POINT_st::onlyuser;
ISSUING_DIST_POINT_st::onlysomereasons;
ISSUING_DIST_POINT_st::indirectCRL;
ISSUING_DIST_POINT_st::onlyCA;
ISSUING_DIST_POINT_st::onlyattr;
ISSUING_DIST_POINT_st::distpoint;
PROXY_CERT_INFO_EXTENSION_st;
PROXY_CERT_INFO_EXTENSION_st::proxyPolicy;
PROXY_CERT_INFO_EXTENSION_st::pcPathLengthConstraint;
hostent;
hostent::h_addrtype;
hostent::h_name;
hostent::h_aliases;
hostent::h_length;
hostent::h_addr_list;
BASIC_CONSTRAINTS_st;
BASIC_CONSTRAINTS_st::ca;
BASIC_CONSTRAINTS_st::pathlen;
st_dynamic_MEM_fns;
st_dynamic_MEM_fns::realloc_fn;
st_dynamic_MEM_fns::free_fn;
st_dynamic_MEM_fns::malloc_fn;
rlimit;
rlimit::rlim_max;
rlimit::rlim_cur;
mcontext_t;
mcontext_t::fpregs;
mcontext_t::gregs;
mcontext_t::__reserved1;
bpf_fib_lookup::<anonymous>::mtu_result;
bpf_fib_lookup::<anonymous>::tot_len;
rusage::<anonymous>::ru_msgsnd;
rusage::<anonymous>::__ru_msgsnd_word;
POLICYQUALINFO_st::<anonymous>;
POLICYQUALINFO_st::<anonymous>::usernotice;
POLICYQUALINFO_st::<anonymous>::other;
POLICYQUALINFO_st::<anonymous>::cpsuri;
bpf_fib_lookup::<anonymous>::flowinfo;
bpf_fib_lookup::<anonymous>::tos;
bpf_fib_lookup::<anonymous>::rt_metric;
xdp_md;
xdp_md::data_end;
xdp_md::data_meta;
xdp_md::ingress_ifindex;
xdp_md::rx_queue_index;
xdp_md::data;
xdp_md::egress_ifindex;
pcre_callout_block;
pcre_callout_block::capture_top;
pcre_callout_block::version;
pcre_callout_block::capture_last;
pcre_callout_block::mark;
pcre_callout_block::callout_data;
pcre_callout_block::next_item_length;
pcre_callout_block::subject;
pcre_callout_block::subject_length;
pcre_callout_block::pattern_position;
pcre_callout_block::current_position;
pcre_callout_block::offset_vector;
pcre_callout_block::start_match;
pcre_callout_block::callout_number;
bpf_pidns_info;
bpf_pidns_info::tgid;
bpf_pidns_info::pid;
_fpxreg;
_fpxreg::significand;
_fpxreg::exponent;
_fpxreg::__glibc_reserved1;
IPAddressOrRange_st;
IPAddressOrRange_st::type;
IPAddressOrRange_st::u;
lhash_st_CONF_VALUE;
lhash_st_CONF_VALUE::dummy;
siginfo_t::<anonymous>::<anonymous>;
siginfo_t::<anonymous>::<anonymous>::si_band;
siginfo_t::<anonymous>::<anonymous>::si_fd;
otherName_st;
otherName_st::value;
otherName_st::type_id;
z_stream_s;
z_stream_s::reserved;
z_stream_s::state;
z_stream_s::avail_in;
z_stream_s::avail_out;
z_stream_s::zalloc;
z_stream_s::msg;
z_stream_s::adler;
z_stream_s::opaque;
z_stream_s::next_in;
z_stream_s::next_out;
z_stream_s::total_in;
z_stream_s::total_out;
z_stream_s::zfree;
z_stream_s::data_type;
pcre32_extra;
pcre32_extra::callout_data;
pcre32_extra::study_data;
pcre32_extra::match_limit_recursion;
pcre32_extra::executable_jit;
pcre32_extra::mark;
pcre32_extra::match_limit;
pcre32_extra::flags;
pcre32_extra::tables;
__kernel_fd_set;
__kernel_fd_set::fds_bits;
bpf_sock_tuple;
sockaddr_un;
sockaddr_un::sun_path;
sockaddr_un::sun_family;
group_req;
group_req::gr_group;
group_req::gr_interface;
__sk_buff;
__sk_buff::data_meta;
__sk_buff::gso_size;
__sk_buff::vlan_proto;
__sk_buff::hash;
__sk_buff::ifindex;
__sk_buff::mark;
__sk_buff::tc_index;
__sk_buff::local_port;
__sk_buff::remote_port;
__sk_buff::data_end;
__sk_buff::protocol;
__sk_buff::local_ip4;
__sk_buff::local_ip6;
__sk_buff::data;
__sk_buff::gso_segs;
__sk_buff::len;
__sk_buff::ingress_ifindex;
__sk_buff::priority;
__sk_buff::family;
__sk_buff::cb;
__sk_buff::pkt_type;
__sk_buff::vlan_present;
__sk_buff::queue_mapping;
__sk_buff::napi_id;
__sk_buff::wire_len;
__sk_buff::vlan_tci;
__sk_buff::remote_ip4;
__sk_buff::tc_classid;
__sk_buff::remote_ip6;
__sk_buff::tstamp;
bpf_attr::<anonymous>::link_fd;
f_owner_ex;
f_owner_ex::type;
f_owner_ex::pid;
SCRYPT_PARAMS_st;
SCRYPT_PARAMS_st::salt;
SCRYPT_PARAMS_st::blockSize;
SCRYPT_PARAMS_st::costParameter;
SCRYPT_PARAMS_st::keyLength;
SCRYPT_PARAMS_st::parallelizationParameter;
_IO_FILE;
_IO_FILE::_vtable_offset;
_IO_FILE::_freeres_list;
_IO_FILE::_freeres_buf;
_IO_FILE::_IO_read_end;
_IO_FILE::__pad5;
_IO_FILE::_IO_write_ptr;
_IO_FILE::_IO_save_end;
_IO_FILE::_fileno;
_IO_FILE::_flags2;
_IO_FILE::_IO_save_base;
_IO_FILE::_wide_data;
_IO_FILE::_chain;
_IO_FILE::_old_offset;
_IO_FILE::_mode;
_IO_FILE::_IO_backup_base;
_IO_FILE::_IO_read_ptr;
_IO_FILE::_lock;
_IO_FILE::_IO_buf_end;
_IO_FILE::_codecvt;
_IO_FILE::_unused2;
_IO_FILE::_flags;
_IO_FILE::_IO_buf_base;
_IO_FILE::_IO_read_base;
_IO_FILE::_offset;
_IO_FILE::_shortbuf;
_IO_FILE::_markers;
_IO_FILE::_cur_column;
_IO_FILE::_IO_write_end;
_IO_FILE::_IO_write_base;
crypt_data;
crypt_data::input;
crypt_data::output;
crypt_data::reserved;
crypt_data::initialized;
crypt_data::internal;
crypt_data::setting;
sk_msg_md::<anonymous>::data_end;
USERNOTICE_st;
USERNOTICE_st::exptext;
USERNOTICE_st::noticeref;
SHA512state_st::<anonymous>;
SHA512state_st::<anonymous>::p;
SHA512state_st::<anonymous>::d;
X509V3_CONF_METHOD_st;
X509V3_CONF_METHOD_st::get_section;
X509V3_CONF_METHOD_st::get_string;
X509V3_CONF_METHOD_st::free_section;
X509V3_CONF_METHOD_st::free_string;
lldiv_t;
lldiv_t::rem;
lldiv_t::quot;
siginfo_t::<anonymous>::<anonymous>::si_pid;
siginfo_t::<anonymous>::<anonymous>::si_uid;
bpf_tcp_sock;
bpf_tcp_sock::ecn_flags;
bpf_tcp_sock::total_retrans;
bpf_tcp_sock::rcv_nxt;
bpf_tcp_sock::sacked_out;
bpf_tcp_sock::mss_cache;
bpf_tcp_sock::snd_una;
bpf_tcp_sock::segs_in;
bpf_tcp_sock::bytes_received;
bpf_tcp_sock::snd_cwnd;
bpf_tcp_sock::retrans_out;
bpf_tcp_sock::rate_interval_us;
bpf_tcp_sock::lost_out;
bpf_tcp_sock::bytes_acked;
bpf_tcp_sock::rate_delivered;
bpf_tcp_sock::data_segs_in;
bpf_tcp_sock::dsack_dups;
bpf_tcp_sock::packets_out;
bpf_tcp_sock::snd_nxt;
bpf_tcp_sock::icsk_retransmits;
bpf_tcp_sock::data_segs_out;
bpf_tcp_sock::segs_out;
bpf_tcp_sock::srtt_us;
bpf_tcp_sock::delivered;
bpf_tcp_sock::snd_ssthresh;
bpf_tcp_sock::delivered_ce;
bpf_tcp_sock::rtt_min;
bpf_attr::<anonymous>::new_prog_fd;
bpf_attr::<anonymous>::old_prog_fd;
_fpx_sw_bytes;
_fpx_sw_bytes::xstate_bv;
_fpx_sw_bytes::magic1;
_fpx_sw_bytes::xstate_size;
_fpx_sw_bytes::extended_size;
_fpx_sw_bytes::__glibc_reserved1;
bpf_sock_tuple::<anonymous>::<anonymous>;
bpf_sock_tuple::<anonymous>::<anonymous>::sport;
bpf_sock_tuple::<anonymous>::<anonymous>::dport;
bpf_sock_tuple::<anonymous>::<anonymous>::saddr;
bpf_sock_tuple::<anonymous>::<anonymous>::daddr;
evp_cipher_info_st;
evp_cipher_info_st::cipher;
evp_cipher_info_st::iv;
tcphdr::<anonymous>::<anonymous>;
tcphdr::<anonymous>::<anonymous>::th_sum;
tcphdr::<anonymous>::<anonymous>::th_urp;
tcphdr::<anonymous>::<anonymous>::th_sport;
tcphdr::<anonymous>::<anonymous>::th_dport;
tcphdr::<anonymous>::<anonymous>::th_seq;
tcphdr::<anonymous>::<anonymous>::th_x2;
tcphdr::<anonymous>::<anonymous>::th_off;
tcphdr::<anonymous>::<anonymous>::th_flags;
tcphdr::<anonymous>::<anonymous>::th_win;
tcphdr::<anonymous>::<anonymous>::th_ack;
_IO_cookie_io_functions_t;
_IO_cookie_io_functions_t::close;
_IO_cookie_io_functions_t::seek;
_IO_cookie_io_functions_t::write;
_IO_cookie_io_functions_t::read;
pcre32_callout_block;
pcre32_callout_block::capture_top;
pcre32_callout_block::version;
pcre32_callout_block::capture_last;
pcre32_callout_block::mark;
pcre32_callout_block::callout_data;
pcre32_callout_block::next_item_length;
pcre32_callout_block::subject;
pcre32_callout_block::subject_length;
pcre32_callout_block::pattern_position;
pcre32_callout_block::current_position;
pcre32_callout_block::offset_vector;
pcre32_callout_block::start_match;
pcre32_callout_block::callout_number;
ASIdentifiers_st;
ASIdentifiers_st::asnum;
ASIdentifiers_st::rdi;
bpf_flow_keys;
bpf_flow_keys::n_proto;
bpf_flow_keys::is_first_frag;
bpf_flow_keys::is_encap;
bpf_flow_keys::dport;
bpf_flow_keys::ip_proto;
bpf_flow_keys::flags;
bpf_flow_keys::addr_proto;
bpf_flow_keys::nhoff;
bpf_flow_keys::thoff;
bpf_flow_keys::sport;
bpf_flow_keys::flow_label;
bpf_flow_keys::is_frag;
bpf_attr::<anonymous>::target_fd;
bpf_attr::<anonymous>::attach_flags;
bpf_attr::<anonymous>::attach_bpf_fd;
bpf_attr::<anonymous>::attach_type;
bpf_attr::<anonymous>::replace_bpf_fd;
bpf_attr::<anonymous>::map_fd;
mmsghdr;
mmsghdr::msg_hdr;
mmsghdr::msg_len;
sched_param;
sched_param::sched_priority;
lhash_st_OPENSSL_STRING;
lhash_st_OPENSSL_STRING::dummy;
bpf_attr::<anonymous>::type;
sockaddr;
sockaddr::sa_family;
sockaddr::sa_data;
sk_reuseport_md::<anonymous>;
sk_reuseport_md::<anonymous>::<anonymous>;
sk_reuseport_md::<anonymous>::migrating_sk;
rusage::<anonymous>::ru_maxrss;
rusage::<anonymous>::__ru_maxrss_word;
POLICYINFO_st;
POLICYINFO_st::qualifiers;
POLICYINFO_st::policyid;
PBE2PARAM_st;
PBE2PARAM_st::keyfunc;
PBE2PARAM_st::encryption;
siginfo_t::<anonymous>::<anonymous>::<anonymous>;
siginfo_t::<anonymous>::<anonymous>::<anonymous>::_pkey;
siginfo_t::<anonymous>::<anonymous>::<anonymous>::_addr_bnd;
Netscape_certificate_sequence;
Netscape_certificate_sequence::certs;
Netscape_certificate_sequence::type;
x509_purpose_st;
x509_purpose_st::name;
x509_purpose_st::trust;
x509_purpose_st::usr_data;
x509_purpose_st::sname;
x509_purpose_st::check_purpose;
x509_purpose_st::flags;
x509_purpose_st::purpose;
linger;
linger::l_onoff;
linger::l_linger;
rpcent;
rpcent::r_name;
rpcent::r_aliases;
rpcent::r_number;
netent;
netent::n_net;
netent::n_addrtype;
netent::n_name;
netent::n_aliases;
CONF_VALUE;
CONF_VALUE::name;
CONF_VALUE::section;
CONF_VALUE::value;
bpf_link_info::<anonymous>;
bpf_link_info::<anonymous>::cgroup;
bpf_link_info::<anonymous>::raw_tracepoint;
bpf_link_info::<anonymous>::iter;
bpf_link_info::<anonymous>::tracing;
bpf_link_info::<anonymous>::netns;
bpf_link_info::<anonymous>::xdp;
in6_pktinfo;
in6_pktinfo::ipi6_addr;
in6_pktinfo::ipi6_ifindex;
__mbstate_t;
__mbstate_t::__count;
__mbstate_t::__value;
stat;
stat::st_size;
stat::st_nlink;
stat::__pad0;
stat::st_blocks;
stat::st_dev;
stat::st_uid;
stat::st_mode;
stat::st_ino;
stat::st_atim;
stat::st_ctim;
stat::st_rdev;
stat::st_blksize;
stat::st_gid;
stat::st_mtim;
stat::__glibc_reserved;
__jmp_buf_tag;
__jmp_buf_tag::__jmpbuf;
__jmp_buf_tag::__mask_was_saved;
__jmp_buf_tag::__saved_mask;
bpf_attr::<anonymous>::<anonymous>::attach_btf_obj_fd;
bpf_attr::<anonymous>::<anonymous>::attach_prog_fd;
lh_CONF_VALUE_dummy;
lh_CONF_VALUE_dummy::d1;
lh_CONF_VALUE_dummy::d2;
lh_CONF_VALUE_dummy::d3;
statfs;
statfs::f_spare;
statfs::f_bsize;
statfs::f_blocks;
statfs::f_bavail;
statfs::f_namelen;
statfs::f_type;
statfs::f_files;
statfs::f_bfree;
statfs::f_fsid;
statfs::f_flags;
statfs::f_ffree;
statfs::f_frsize;
asn1_string_table_st;
asn1_string_table_st::maxsize;
asn1_string_table_st::nid;
asn1_string_table_st::mask;
asn1_string_table_st::flags;
asn1_string_table_st::minsize;
pcre_extra;
pcre_extra::callout_data;
pcre_extra::study_data;
pcre_extra::match_limit_recursion;
pcre_extra::executable_jit;
pcre_extra::mark;
pcre_extra::match_limit;
pcre_extra::flags;
pcre_extra::tables;
siginfo_t;
siginfo_t::si_errno;
siginfo_t::_sifields;
siginfo_t::__pad0;
siginfo_t::si_code;
siginfo_t::si_signo;
random_data;
random_data::state;
random_data::rand_deg;
random_data::rand_type;
random_data::rptr;
random_data::fptr;
random_data::rand_sep;
random_data::end_ptr;
bpf_sk_lookup;
bpf_sk_lookup::remote_port;
bpf_sk_lookup::family;
bpf_sk_lookup::protocol;
bpf_sk_lookup::local_ip4;
bpf_sk_lookup::remote_ip4;
bpf_sk_lookup::local_ip6;
bpf_sk_lookup::remote_ip6;
bpf_sk_lookup::local_port;
bpf_flow_keys::<anonymous>::<anonymous>;
bpf_flow_keys::<anonymous>::<anonymous>::ipv4_src;
bpf_flow_keys::<anonymous>::<anonymous>::ipv4_dst;
bpf_link_info::<anonymous>::<anonymous>::target_obj_id;
bpf_link_info::<anonymous>::<anonymous>::target_btf_id;
crypto_threadid_st;
crypto_threadid_st::dummy;
sockaddr_storage;
sockaddr_storage::ss_family;
sockaddr_storage::__ss_padding;
sockaddr_storage::__ss_align;
sk_reuseport_md::<anonymous>::sk;
bpf_link_info::<anonymous>::<anonymous>::ifindex;
bpf_sock_ops::<anonymous>::skb_data;
ucred;
ucred::uid;
ucred::gid;
ucred::pid;
pkcs7_signed_st;
pkcs7_signed_st::crl;
pkcs7_signed_st::signer_info;
pkcs7_signed_st::version;
pkcs7_signed_st::md_algs;
pkcs7_signed_st::cert;
pkcs7_signed_st::contents;
bpf_xfrm_state;
bpf_xfrm_state::ext;
bpf_xfrm_state::family;
bpf_xfrm_state::reqid;
bpf_xfrm_state::spi;
bpf_sock_addr;
bpf_sock_addr::user_family;
bpf_sock_addr::family;
bpf_sock_addr::user_port;
bpf_sock_addr::type;
bpf_sock_addr::protocol;
bpf_sock_addr::msg_src_ip4;
bpf_sock_addr::user_ip4;
bpf_sock_addr::msg_src_ip6;
bpf_sock_addr::user_ip6;
timeval;
timeval::tv_sec;
timeval::tv_usec;
siginfo_t::<anonymous>::<anonymous>::si_status;
siginfo_t::<anonymous>::<anonymous>::si_stime;
siginfo_t::<anonymous>::<anonymous>::si_utime;
srtp_protection_profile_st;
srtp_protection_profile_st::name;
srtp_protection_profile_st::id;
__user_cap_header_struct;
__user_cap_header_struct::version;
__user_cap_header_struct::pid;
Netscape_spki_st;
Netscape_spki_st::spkac;
Netscape_spki_st::signature;
Netscape_spki_st::sig_algor;
ip_mreq_source;
ip_mreq_source::imr_sourceaddr;
ip_mreq_source::imr_interface;
ip_mreq_source::imr_multiaddr;
__pthread_internal_list;
__pthread_internal_list::__prev;
__pthread_internal_list::__next;
X509_val_st;
X509_val_st::notAfter;
X509_val_st::notBefore;
PROXY_POLICY_st;
PROXY_POLICY_st::policy;
PROXY_POLICY_st::policyLanguage;
bpf_stack_build_id;
bpf_stack_build_id::status;
bpf_stack_build_id::build_id;
__locale_struct;
__locale_struct::__locales;
__locale_struct::__ctype_toupper;
__locale_struct::__names;
__locale_struct::__ctype_b;
__locale_struct::__ctype_tolower;
conf_st;
conf_st::includedir;
conf_st::flag_dollarid;
conf_st::libctx;
conf_st::meth_data;
conf_st::data;
conf_st::flag_abspath;
conf_st::meth;
__pthread_cond_s;
__pthread_cond_s::__g1_orig_size;
__pthread_cond_s::__g1_start;
__pthread_cond_s::__g_refs;
__pthread_cond_s::__wrefs;
__pthread_cond_s::__g_signals;
__pthread_cond_s::__wseq;
__pthread_cond_s::__g_size;
bpf_devmap_val::<anonymous>;
bpf_devmap_val::<anonymous>::fd;
bpf_devmap_val::<anonymous>::id;
pkcs7_issuer_and_serial_st;
pkcs7_issuer_and_serial_st::serial;
pkcs7_issuer_and_serial_st::issuer;
bpf_cpumap_val;
bpf_cpumap_val::qsize;
bpf_cpumap_val::bpf_prog;
bpf_sockopt::<anonymous>;
bpf_sockopt::<anonymous>::<anonymous>;
bpf_sockopt::<anonymous>::sk;
X509_algor_st;
X509_algor_st::parameter;
X509_algor_st::algorithm;
max_align_t;
max_align_t::__clang_max_align_nonce1;
max_align_t::__clang_max_align_nonce2;
rusage::<anonymous>::__ru_msgrcv_word;
rusage::<anonymous>::ru_msgrcv;
bpf_sockopt::<anonymous>::optval_end;
ossl_algorithm_st;
ossl_algorithm_st::implementation;
ossl_algorithm_st::algorithm_names;
ossl_algorithm_st::algorithm_description;
ossl_algorithm_st::property_definition;
v3_ext_method;
v3_ext_method::i2d;
v3_ext_method::ext_nid;
v3_ext_method::r2i;
v3_ext_method::s2i;
v3_ext_method::i2s;
v3_ext_method::i2r;
v3_ext_method::v2i;
v3_ext_method::ext_free;
v3_ext_method::usr_data;
v3_ext_method::i2v;
v3_ext_method::ext_new;
v3_ext_method::it;
v3_ext_method::ext_flags;
v3_ext_method::d2i;
itimerspec;
itimerspec::it_interval;
itimerspec::it_value;
Dl_serpath;
Dl_serpath::dls_name;
Dl_serpath::dls_flags;
bpf_link_info;
bpf_link_info::type;
bpf_link_info::prog_id;
bpf_link_info::id;
bpf_map_info;
bpf_map_info::name;
bpf_map_info::type;
bpf_map_info::key_size;
bpf_map_info::btf_value_type_id;
bpf_map_info::netns_dev;
bpf_map_info::ifindex;
bpf_map_info::btf_id;
bpf_map_info::map_flags;
bpf_map_info::id;
bpf_map_info::netns_ino;
bpf_map_info::btf_key_type_id;
bpf_map_info::value_size;
bpf_map_info::btf_vmlinux_value_type_id;
bpf_map_info::max_entries;
in6_addr::<anonymous>;
in6_addr::<anonymous>::__u6_addr32;
in6_addr::<anonymous>::__u6_addr16;
in6_addr::<anonymous>::__u6_addr8;
bpf_attr::<anonymous>::func_info_cnt;
bpf_attr::<anonymous>::log_size;
bpf_attr::<anonymous>::license;
bpf_attr::<anonymous>::prog_flags;
bpf_attr::<anonymous>::line_info_rec_size;
bpf_attr::<anonymous>::expected_attach_type;
bpf_attr::<anonymous>::fd_array;
bpf_attr::<anonymous>::func_info_rec_size;
bpf_attr::<anonymous>::insns;
bpf_attr::<anonymous>::log_buf;
bpf_attr::<anonymous>::line_info;
bpf_attr::<anonymous>::kern_version;
bpf_attr::<anonymous>::line_info_cnt;
bpf_attr::<anonymous>::func_info;
bpf_attr::<anonymous>::prog_type;
bpf_attr::<anonymous>::log_level;
bpf_attr::<anonymous>::prog_name;
bpf_attr::<anonymous>::insn_cnt;
bpf_attr::<anonymous>::attach_btf_id;
bpf_attr::<anonymous>::prog_ifindex;
bpf_attr::<anonymous>::prog_btf_fd;
asn1_type_st::<anonymous>;
asn1_type_st::<anonymous>::boolean;
asn1_type_st::<anonymous>::utctime;
asn1_type_st::<anonymous>::generalstring;
asn1_type_st::<anonymous>::visiblestring;
asn1_type_st::<anonymous>::asn1_string;
asn1_type_st::<anonymous>::enumerated;
asn1_type_st::<anonymous>::set;
asn1_type_st::<anonymous>::integer;
asn1_type_st::<anonymous>::asn1_value;
asn1_type_st::<anonymous>::universalstring;
asn1_type_st::<anonymous>::t61string;
asn1_type_st::<anonymous>::bit_string;
asn1_type_st::<anonymous>::bmpstring;
asn1_type_st::<anonymous>::ptr;
asn1_type_st::<anonymous>::object;
asn1_type_st::<anonymous>::sequence;
asn1_type_st::<anonymous>::generalizedtime;
asn1_type_st::<anonymous>::printablestring;
asn1_type_st::<anonymous>::ia5string;
asn1_type_st::<anonymous>::utf8string;
asn1_type_st::<anonymous>::octet_string;
sigevent::<anonymous>::<anonymous>;
sigevent::<anonymous>::<anonymous>::_attribute;
sigevent::<anonymous>::<anonymous>::_function;
SXNET_st;
SXNET_st::ids;
SXNET_st::version;
cpu_set_t;
cpu_set_t::__bits;
__fsid_t;
__fsid_t::__val;
bpf_cpumap_val::<anonymous>;
bpf_cpumap_val::<anonymous>::fd;
bpf_cpumap_val::<anonymous>::id;
ASN1_ENCODING_st;
ASN1_ENCODING_st::modified;
ASN1_ENCODING_st::enc;
ASN1_ENCODING_st::len;
pthread_barrier_t;
pthread_barrier_t::__size;
pthread_barrier_t::__align;
timex;
timex::<anonymous>;
timex::ppsfreq;
timex::stabil;
timex::status;
timex::offset;
timex::constant;
timex::tick;
timex::precision;
timex::jitcnt;
timex::errcnt;
timex::time;
timex::maxerror;
timex::freq;
timex::jitter;
timex::stbcnt;
timex::calcnt;
timex::esterror;
timex::modes;
timex::tolerance;
timex::tai;
timex::shift;
tcphdr::<anonymous>;
__kernel_fsid_t;
__kernel_fsid_t::val;
_xsave_hdr;
_xsave_hdr::xstate_bv;
_xsave_hdr::__glibc_reserved2;
_xsave_hdr::__glibc_reserved1;
_G_fpos_t;
_G_fpos_t::__pos;
_G_fpos_t::__state;
rusage::<anonymous>::ru_majflt;
rusage::<anonymous>::__ru_majflt_word;
rusage::<anonymous>::ru_oublock;
rusage::<anonymous>::__ru_oublock_word;
sk_reuseport_md::<anonymous>::data_end;
bpf_attr::<anonymous>::values;
bpf_attr::<anonymous>::in_batch;
bpf_attr::<anonymous>::out_batch;
bpf_attr::<anonymous>::count;
bpf_attr::<anonymous>::keys;
bpf_attr::<anonymous>::elem_flags;
ossl_item_st;
ossl_item_st::ptr;
ossl_item_st::id;
epoll_event;
epoll_event::events;
epoll_event::data;
winsize;
winsize::ws_row;
winsize::ws_xpixel;
winsize::ws_ypixel;
winsize::ws_col;
__atomic_wide_counter::<anonymous>;
__atomic_wide_counter::<anonymous>::__low;
__atomic_wide_counter::<anonymous>::__high;
bpf_attr::<anonymous>::<anonymous>::next_key;
bpf_attr::<anonymous>::<anonymous>::value;
rusage::<anonymous>::ru_nivcsw;
rusage::<anonymous>::__ru_nivcsw_word;
tcp_zerocopy_receive;
tcp_zerocopy_receive::length;
tcp_zerocopy_receive::address;
tcp_zerocopy_receive::recv_skip_hint;
Dl_serinfo;
Dl_serinfo::dls_cnt;
Dl_serinfo::dls_size;
buf_mem_st;
buf_mem_st::length;
buf_mem_st::max;
buf_mem_st::data;
buf_mem_st::flags;
bpf_xdp_sock;
bpf_xdp_sock::queue_id;
pthread_rwlockattr_t;
pthread_rwlockattr_t::__size;
pthread_rwlockattr_t::__align;
tcp_repair_window;
tcp_repair_window::rcv_wnd;
tcp_repair_window::rcv_wup;
tcp_repair_window::snd_wl1;
tcp_repair_window::snd_wnd;
tcp_repair_window::max_window;
DIST_POINT_st;
DIST_POINT_st::reasons;
DIST_POINT_st::CRLissuer;
DIST_POINT_st::distpoint;
DIST_POINT_st::dp_reasons;
sk_reuseport_md::<anonymous>::data;
bpf_sk_lookup::<anonymous>;
bpf_sk_lookup::<anonymous>::cookie;
stack_t;
stack_t::ss_size;
stack_t::ss_flags;
stack_t::ss_sp;
bpf_sock_addr::<anonymous>;
bpf_sock_addr::<anonymous>::<anonymous>;
bpf_sock_addr::<anonymous>::sk;
pkcs7_st;
pkcs7_st::state;
pkcs7_st::length;
pkcs7_st::asn1;
pkcs7_st::d;
pkcs7_st::detached;
pkcs7_st::type;
pkcs7_st::ctx;
sockaddr_in;
sockaddr_in::sin_addr;
sockaddr_in::sin_zero;
sockaddr_in::sin_family;
sockaddr_in::sin_port;
rlimit64;
rlimit64::rlim_max;
rlimit64::rlim_cur;
err_state_st;
err_state_st::err_line;
err_state_st::err_buffer;
err_state_st::err_data;
err_state_st::err_func;
err_state_st::err_flags;
err_state_st::err_marks;
err_state_st::err_file;
err_state_st::top;
err_state_st::bottom;
err_state_st::err_data_size;
err_state_st::err_data_flags;
statx_timestamp;
statx_timestamp::tv_nsec;
statx_timestamp::tv_sec;
statx_timestamp::__reserved;
udphdr;
ERR_string_data_st;
ERR_string_data_st::string;
ERR_string_data_st::error;
sigval;
sigval::sival_ptr;
sigval::sival_int;
siginfo_t::<anonymous>::<anonymous>::_call_addr;
siginfo_t::<anonymous>::<anonymous>::_syscall;
siginfo_t::<anonymous>::<anonymous>::_arch;
fd_set;
fd_set::fds_bits;
group;
group::gr_mem;
group::gr_name;
group::gr_passwd;
group::gr_gid;
IPAddressChoice_st;
IPAddressChoice_st::type;
IPAddressChoice_st::u;
lh_ERR_STRING_DATA_dummy;
lh_ERR_STRING_DATA_dummy::d1;
lh_ERR_STRING_DATA_dummy::d2;
lh_ERR_STRING_DATA_dummy::d3;
lh_OPENSSL_CSTRING_dummy;
lh_OPENSSL_CSTRING_dummy::d1;
lh_OPENSSL_CSTRING_dummy::d2;
lh_OPENSSL_CSTRING_dummy::d3;
DIST_POINT_NAME_st;
DIST_POINT_NAME_st::name;
DIST_POINT_NAME_st::type;
DIST_POINT_NAME_st::dpname;
tcphdr::<anonymous>::<anonymous>::urg_ptr;
tcphdr::<anonymous>::<anonymous>::seq;
tcphdr::<anonymous>::<anonymous>::psh;
tcphdr::<anonymous>::<anonymous>::urg;
tcphdr::<anonymous>::<anonymous>::ack;
tcphdr::<anonymous>::<anonymous>::dest;
tcphdr::<anonymous>::<anonymous>::source;
tcphdr::<anonymous>::<anonymous>::ack_seq;
tcphdr::<anonymous>::<anonymous>::window;
tcphdr::<anonymous>::<anonymous>::rst;
tcphdr::<anonymous>::<anonymous>::syn;
tcphdr::<anonymous>::<anonymous>::res1;
tcphdr::<anonymous>::<anonymous>::res2;
tcphdr::<anonymous>::<anonymous>::fin;
tcphdr::<anonymous>::<anonymous>::check;
tcphdr::<anonymous>::<anonymous>::doff;
tcp_info;
tcp_info::tcpi_last_ack_recv;
tcp_info::tcpi_rto;
tcp_info::tcpi_rcv_space;
tcp_info::tcpi_snd_ssthresh;
tcp_info::tcpi_rtt;
tcp_info::tcpi_unacked;
tcp_info::tcpi_last_ack_sent;
tcp_info::tcpi_rcv_mss;
tcp_info::tcpi_retrans;
tcp_info::tcpi_state;
tcp_info::tcpi_fackets;
tcp_info::tcpi_rttvar;
tcp_info::tcpi_snd_wscale;
tcp_info::tcpi_ca_state;
tcp_info::tcpi_pmtu;
tcp_info::tcpi_probes;
tcp_info::tcpi_options;
tcp_info::tcpi_sacked;
tcp_info::tcpi_advmss;
tcp_info::tcpi_snd_cwnd;
tcp_info::tcpi_reordering;
tcp_info::tcpi_snd_mss;
tcp_info::tcpi_last_data_recv;
tcp_info::tcpi_retransmits;
tcp_info::tcpi_rcv_ssthresh;
tcp_info::tcpi_lost;
tcp_info::tcpi_total_retrans;
tcp_info::tcpi_ato;
tcp_info::tcpi_rcv_rtt;
tcp_info::tcpi_last_data_sent;
tcp_info::tcpi_rcv_wscale;
tcp_info::tcpi_backoff;
lh_OPENSSL_STRING_dummy;
lh_OPENSSL_STRING_dummy::d1;
lh_OPENSSL_STRING_dummy::d2;
lh_OPENSSL_STRING_dummy::d3;
lhash_st_ERR_STRING_DATA;
lhash_st_ERR_STRING_DATA::dummy;
GENERAL_NAME_st::<anonymous>;
GENERAL_NAME_st::<anonymous>::iPAddress;
GENERAL_NAME_st::<anonymous>::other;
GENERAL_NAME_st::<anonymous>::otherName;
GENERAL_NAME_st::<anonymous>::ediPartyName;
GENERAL_NAME_st::<anonymous>::ia5;
GENERAL_NAME_st::<anonymous>::dNSName;
GENERAL_NAME_st::<anonymous>::uniformResourceIdentifier;
GENERAL_NAME_st::<anonymous>::dirn;
GENERAL_NAME_st::<anonymous>::x400Address;
GENERAL_NAME_st::<anonymous>::ptr;
GENERAL_NAME_st::<anonymous>::directoryName;
GENERAL_NAME_st::<anonymous>::rfc822Name;
GENERAL_NAME_st::<anonymous>::ip;
GENERAL_NAME_st::<anonymous>::registeredID;
GENERAL_NAME_st::<anonymous>::rid;
__sigset_t;
__sigset_t::__val;
ipv6_mreq;
ipv6_mreq::ipv6mr_interface;
ipv6_mreq::ipv6mr_multiaddr;
bpf_attr::<anonymous>::<anonymous>::<anonymous>;
bpf_attr::<anonymous>::<anonymous>::<anonymous>::iter_info_len;
bpf_attr::<anonymous>::<anonymous>::<anonymous>::iter_info;
bpf_func_info;
bpf_func_info::insn_off;
bpf_func_info::type_id;
IPAddressRange_st;
IPAddressRange_st::min;
IPAddressRange_st::max;
bpf_line_info;
bpf_line_info::insn_off;
bpf_line_info::line_off;
bpf_line_info::line_col;
bpf_line_info::file_name_off;
bpf_sockopt::<anonymous>::optval;
bpf_devmap_val;
bpf_devmap_val::ifindex;
bpf_devmap_val::bpf_prog;
__cancel_jmp_buf_tag;
__cancel_jmp_buf_tag::__cancel_jmp_buf;
__cancel_jmp_buf_tag::__mask_was_saved;
pkcs7_recip_info_st;
pkcs7_recip_info_st::cert;
pkcs7_recip_info_st::key_enc_algor;
pkcs7_recip_info_st::version;
pkcs7_recip_info_st::issuer_and_serial;
pkcs7_recip_info_st::enc_key;
pkcs7_recip_info_st::ctx;
GENERAL_SUBTREE_st;
GENERAL_SUBTREE_st::base;
GENERAL_SUBTREE_st::minimum;
GENERAL_SUBTREE_st::maximum;
crypto_ex_data_st;
crypto_ex_data_st::sk;
crypto_ex_data_st::ctx;
bpf_link_info::<anonymous>::<anonymous>::target_name_len;
bpf_link_info::<anonymous>::<anonymous>::target_name;
tcp_md5sig;
tcp_md5sig::tcpm_flags;
tcp_md5sig::tcpm_prefixlen;
tcp_md5sig::__tcpm_pad;
tcp_md5sig::tcpm_keylen;
tcp_md5sig::tcpm_key;
tcp_md5sig::tcpm_addr;
pthread_attr_t;
pthread_attr_t::__size;
pthread_attr_t::__align;
__sk_buff::<anonymous>::flow_keys;
file_handle;
file_handle::f_handle;
file_handle::handle_bytes;
file_handle::handle_type;
tcp_repair_opt;
tcp_repair_opt::opt_val;
tcp_repair_opt::opt_code;
PBEPARAM_st;
PBEPARAM_st::salt;
PBEPARAM_st::iter;
bpf_stack_build_id::<anonymous>;
bpf_stack_build_id::<anonymous>::offset;
bpf_stack_build_id::<anonymous>::ip;
bpf_sock_ops::<anonymous>::reply;
bpf_sock_ops::<anonymous>::args;
bpf_sock_ops::<anonymous>::replylong;
SHA256state_st;
SHA256state_st::num;
SHA256state_st::Nh;
SHA256state_st::h;
SHA256state_st::Nl;
SHA256state_st::data;
SHA256state_st::md_len;
bpf_xfrm_state::<anonymous>;
bpf_xfrm_state::<anonymous>::remote_ipv6;
bpf_xfrm_state::<anonymous>::remote_ipv4;
stat64;
stat64::st_size;
stat64::st_nlink;
stat64::__pad0;
stat64::st_blocks;
stat64::st_dev;
stat64::st_uid;
stat64::st_mode;
stat64::st_ino;
stat64::st_atim;
stat64::st_ctim;
stat64::st_rdev;
stat64::st_blksize;
stat64::st_gid;
stat64::st_mtim;
stat64::__glibc_reserved;
siginfo_t::<anonymous>::<anonymous>::si_addr;
siginfo_t::<anonymous>::<anonymous>::si_addr_lsb;
siginfo_t::<anonymous>::<anonymous>::_bounds;
SHA512state_st;
SHA512state_st::num;
SHA512state_st::u;
SHA512state_st::Nh;
SHA512state_st::h;
SHA512state_st::Nl;
SHA512state_st::md_len;
tcp_cookie_transactions;
tcp_cookie_transactions::__tcpct_pad1;
tcp_cookie_transactions::tcpct_cookie_desired;
tcp_cookie_transactions::tcpct_s_data_desired;
tcp_cookie_transactions::tcpct_flags;
tcp_cookie_transactions::tcpct_value;
tcp_cookie_transactions::tcpct_used;
_libc_fpstate;
_libc_fpstate::ftw;
_libc_fpstate::_xmm;
_libc_fpstate::swd;
_libc_fpstate::fop;
_libc_fpstate::rdp;
_libc_fpstate::_st;
_libc_fpstate::mxcr_mask;
_libc_fpstate::rip;
_libc_fpstate::mxcsr;
_libc_fpstate::cwd;
_libc_fpstate::__glibc_reserved1;
x509_trust_st;
x509_trust_st::name;
x509_trust_st::trust;
x509_trust_st::arg1;
x509_trust_st::arg2;
x509_trust_st::flags;
x509_trust_st::check_trust;
ossl_param_st;
ossl_param_st::data_size;
ossl_param_st::key;
ossl_param_st::data;
ossl_param_st::data_type;
ossl_param_st::return_size;
cmsghdr;
cmsghdr::cmsg_level;
cmsghdr::__cmsg_data;
cmsghdr::cmsg_len;
cmsghdr::cmsg_type;
__SOCKADDR_ARG;
__SOCKADDR_ARG::__sockaddr_inarp__;
__SOCKADDR_ARG::__sockaddr_x25__;
__SOCKADDR_ARG::__sockaddr_ax25__;
__SOCKADDR_ARG::__sockaddr__;
__SOCKADDR_ARG::__sockaddr_eon__;
__SOCKADDR_ARG::__sockaddr_un__;
__SOCKADDR_ARG::__sockaddr_ns__;
__SOCKADDR_ARG::__sockaddr_iso__;
__SOCKADDR_ARG::__sockaddr_in6__;
__SOCKADDR_ARG::__sockaddr_dl__;
__SOCKADDR_ARG::__sockaddr_ipx__;
__SOCKADDR_ARG::__sockaddr_at__;
__SOCKADDR_ARG::__sockaddr_in__;
bpf_fib_lookup;
bpf_fib_lookup::l4_protocol;
bpf_fib_lookup::family;
bpf_fib_lookup::smac;
bpf_fib_lookup::dmac;
bpf_fib_lookup::ifindex;
bpf_fib_lookup::sport;
bpf_fib_lookup::dport;
bpf_fib_lookup::h_vlan_TCI;
bpf_fib_lookup::h_vlan_proto;
siginfo_t::<anonymous>;
siginfo_t::<anonymous>::_timer;
siginfo_t::<anonymous>::_sigsys;
siginfo_t::<anonymous>::_pad;
siginfo_t::<anonymous>::_rt;
siginfo_t::<anonymous>::_sigpoll;
siginfo_t::<anonymous>::_kill;
siginfo_t::<anonymous>::_sigchld;
siginfo_t::<anonymous>::_sigfault;
rusage::<anonymous>::ru_nsignals;
rusage::<anonymous>::__ru_nsignals_word;
bpf_attr::<anonymous>::next_id;
bpf_attr::<anonymous>::open_flags;
ASIdOrRange_st;
ASIdOrRange_st::type;
ASIdOrRange_st::u;
bpf_iter_link_info::<anonymous>;
bpf_iter_link_info::<anonymous>::map_fd;
bpf_attr::<anonymous>::query_flags;
bpf_attr::<anonymous>::prog_ids;
bpf_attr::<anonymous>::prog_cnt;
bpf_btf_info;
bpf_btf_info::name;
bpf_btf_info::btf_size;
bpf_btf_info::kernel_btf;
bpf_btf_info::btf;
bpf_btf_info::id;
bpf_btf_info::name_len;
imaxdiv_t;
imaxdiv_t::rem;
imaxdiv_t::quot;
ldiv_t;
ldiv_t::rem;
ldiv_t::quot;
flock;
flock::l_whence;
flock::l_pid;
flock::l_start;
flock::l_len;
flock::l_type;
btf_ptr;
btf_ptr::ptr;
btf_ptr::flags;
btf_ptr::type_id;
bpf_attr::<anonymous>::map_type;
bpf_attr::<anonymous>::inner_map_fd;
bpf_attr::<anonymous>::key_size;
bpf_attr::<anonymous>::map_ifindex;
bpf_attr::<anonymous>::btf_fd;
bpf_attr::<anonymous>::btf_value_type_id;
bpf_attr::<anonymous>::map_flags;
bpf_attr::<anonymous>::btf_key_type_id;
bpf_attr::<anonymous>::numa_node;
bpf_attr::<anonymous>::value_size;
bpf_attr::<anonymous>::btf_vmlinux_value_type_id;
bpf_attr::<anonymous>::map_name;
bpf_attr::<anonymous>::max_entries;
bpf_redir_neigh::<anonymous>;
bpf_redir_neigh::<anonymous>::ipv4_nh;
bpf_redir_neigh::<anonymous>::ipv6_nh;
in6_addr;
in6_addr::__in6_u;
bpf_attr::<anonymous>::key;
ossl_dispatch_st;
ossl_dispatch_st::function_id;
ossl_dispatch_st::function;
passwd;
passwd::pw_dir;
passwd::pw_name;
passwd::pw_uid;
passwd::pw_passwd;
passwd::pw_gid;
passwd::pw_gecos;
passwd::pw_shell;
ip_mreqn;
ip_mreqn::imr_multiaddr;
ip_mreqn::imr_address;
ip_mreqn::imr_ifindex;
bpf_attr::<anonymous>::file_flags;
bpf_attr::<anonymous>::pathname;
asn1_string_st;
asn1_string_st::length;
asn1_string_st::type;
asn1_string_st::data;
asn1_string_st::flags;
bpf_cgroup_dev_ctx;
bpf_cgroup_dev_ctx::access_type;
bpf_cgroup_dev_ctx::minor;
bpf_cgroup_dev_ctx::major;
addrinfo;
addrinfo::ai_addrlen;
addrinfo::ai_addr;
addrinfo::ai_flags;
addrinfo::ai_next;
addrinfo::ai_canonname;
addrinfo::ai_family;
addrinfo::ai_socktype;
addrinfo::ai_protocol;
utsname;
utsname::sysname;
utsname::release;
utsname::machine;
utsname::version;
utsname::nodename;
utsname::domainname;
vfs_ns_cap_data;
vfs_ns_cap_data::rootid;
vfs_ns_cap_data::data;
vfs_ns_cap_data::magic_etc;
pkcs7_digest_st;
pkcs7_digest_st::digest;
pkcs7_digest_st::md;
pkcs7_digest_st::version;
pkcs7_digest_st::contents;
rusage;
rusage::ru_stime;
rusage::ru_utime;
bpf_tunnel_key::<anonymous>;
bpf_tunnel_key::<anonymous>::remote_ipv6;
bpf_tunnel_key::<anonymous>::remote_ipv4;
_ymmh_state;
_ymmh_state::ymmh_space;
POLICYQUALINFO_st;
POLICYQUALINFO_st::pqualid;
POLICYQUALINFO_st::d;
NOTICEREF_st;
NOTICEREF_st::noticenos;
NOTICEREF_st::organization;
IPAddressFamily_st;
IPAddressFamily_st::addressFamily;
IPAddressFamily_st::ipAddressChoice;
lhash_st_OPENSSL_CSTRING;
lhash_st_OPENSSL_CSTRING::dummy;
ACCESS_DESCRIPTION_st;
ACCESS_DESCRIPTION_st::method;
ACCESS_DESCRIPTION_st::location;
bpf_tunnel_key;
bpf_tunnel_key::tunnel_id;
bpf_tunnel_key::tunnel_label;
bpf_tunnel_key::tunnel_ext;
bpf_tunnel_key::tunnel_ttl;
bpf_tunnel_key::tunnel_tos;
rusage::<anonymous>::__ru_ixrss_word;
rusage::<anonymous>::ru_ixrss;
dl_find_object;
dl_find_object::dlfo_map_start;
dl_find_object::dlfo_flags;
dl_find_object::__dflo_reserved;
dl_find_object::dlfo_map_end;
dl_find_object::dlfo_eh_frame;
dl_find_object::dlfo_link_map;
bpf_attr::<anonymous>::<anonymous>::target_btf_id;
bpf_attr::<anonymous>::<anonymous>::perf_event;
siginfo_t::<anonymous>::<anonymous>::si_sigval;
siginfo_t::<anonymous>::<anonymous>::si_tid;
siginfo_t::<anonymous>::<anonymous>::si_overrun;
bpf_attr::<anonymous>::btf_log_level;
bpf_attr::<anonymous>::btf_size;
bpf_attr::<anonymous>::btf_log_size;
bpf_attr::<anonymous>::btf_log_buf;
bpf_attr::<anonymous>::btf;
pkcs7_signedandenveloped_st;
pkcs7_signedandenveloped_st::enc_data;
pkcs7_signedandenveloped_st::crl;
pkcs7_signedandenveloped_st::signer_info;
pkcs7_signedandenveloped_st::version;
pkcs7_signedandenveloped_st::md_algs;
pkcs7_signedandenveloped_st::cert;
pkcs7_signedandenveloped_st::recipientinfo;
bpf_timer;
bpf_timer::<anonymous>;
statfs64;
statfs64::f_spare;
statfs64::f_bsize;
statfs64::f_blocks;
statfs64::f_bavail;
statfs64::f_namelen;
statfs64::f_type;
statfs64::f_files;
statfs64::f_bfree;
statfs64::f_fsid;
statfs64::f_flags;
statfs64::f_ffree;
statfs64::f_frsize;
vfs_ns_cap_data::<anonymous>;
vfs_ns_cap_data::<anonymous>::inheritable;
vfs_ns_cap_data::<anonymous>::permitted;
protoent;
protoent::p_name;
protoent::p_aliases;
protoent::p_proto;
bpf_spin_lock;
bpf_spin_lock::val;
bpf_sock_ops;
bpf_sock_ops::ecn_flags;
bpf_sock_ops::total_retrans;
bpf_sock_ops::rcv_nxt;
bpf_sock_ops::sacked_out;
bpf_sock_ops::mss_cache;
bpf_sock_ops::bpf_sock_ops_cb_flags;
bpf_sock_ops::snd_una;
bpf_sock_ops::segs_in;
bpf_sock_ops::bytes_received;
bpf_sock_ops::sk_txhash;
bpf_sock_ops::local_port;
bpf_sock_ops::remote_port;
bpf_sock_ops::snd_cwnd;
bpf_sock_ops::op;
bpf_sock_ops::retrans_out;
bpf_sock_ops::rate_interval_us;
bpf_sock_ops::local_ip4;
bpf_sock_ops::local_ip6;
bpf_sock_ops::lost_out;
bpf_sock_ops::snd_nxt;
bpf_sock_ops::rate_delivered;
bpf_sock_ops::state;
bpf_sock_ops::family;
bpf_sock_ops::packets_out;
bpf_sock_ops::data_segs_in;
bpf_sock_ops::data_segs_out;
bpf_sock_ops::bytes_acked;
bpf_sock_ops::segs_out;
bpf_sock_ops::skb_tcp_flags;
bpf_sock_ops::srtt_us;
bpf_sock_ops::remote_ip4;
bpf_sock_ops::snd_ssthresh;
bpf_sock_ops::remote_ip6;
bpf_sock_ops::rtt_min;
bpf_sock_ops::skb_len;
bpf_sock_ops::is_fullsock;
prctl_mm_map;
prctl_mm_map::env_end;
prctl_mm_map::start_stack;
prctl_mm_map::auxv;
prctl_mm_map::start_data;
prctl_mm_map::start_code;
prctl_mm_map::arg_start;
prctl_mm_map::exe_fd;
prctl_mm_map::start_brk;
prctl_mm_map::end_data;
prctl_mm_map::end_code;
prctl_mm_map::arg_end;
prctl_mm_map::env_start;
prctl_mm_map::auxv_size;
prctl_mm_map::brk;
osockaddr;
osockaddr::sa_family;
osockaddr::sa_data;
__CONST_SOCKADDR_ARG;
__CONST_SOCKADDR_ARG::__sockaddr_inarp__;
__CONST_SOCKADDR_ARG::__sockaddr_x25__;
__CONST_SOCKADDR_ARG::__sockaddr_ax25__;
__CONST_SOCKADDR_ARG::__sockaddr__;
__CONST_SOCKADDR_ARG::__sockaddr_eon__;
__CONST_SOCKADDR_ARG::__sockaddr_un__;
__CONST_SOCKADDR_ARG::__sockaddr_ns__;
__CONST_SOCKADDR_ARG::__sockaddr_iso__;
__CONST_SOCKADDR_ARG::__sockaddr_in6__;
__CONST_SOCKADDR_ARG::__sockaddr_dl__;
__CONST_SOCKADDR_ARG::__sockaddr_ipx__;
__CONST_SOCKADDR_ARG::__sockaddr_at__;
__CONST_SOCKADDR_ARG::__sockaddr_in__;
asn1_type_st;
asn1_type_st::type;
asn1_type_st::value;
pkcs7_enveloped_st;
pkcs7_enveloped_st::recipientinfo;
pkcs7_enveloped_st::version;
pkcs7_enveloped_st::enc_data;
flock64;
flock64::l_whence;
flock64::l_pid;
flock64::l_start;
flock64::l_len;
flock64::l_type;
pcre16_extra;
pcre16_extra::callout_data;
pcre16_extra::study_data;
pcre16_extra::match_limit_recursion;
pcre16_extra::executable_jit;
pcre16_extra::mark;
pcre16_extra::match_limit;
pcre16_extra::flags;
pcre16_extra::tables;
gzFile_s;
gzFile_s::pos;
gzFile_s::have;
gzFile_s::next;
PBKDF2PARAM_st;
PBKDF2PARAM_st::salt;
PBKDF2PARAM_st::iter;
PBKDF2PARAM_st::prf;
PBKDF2PARAM_st::keylength;
__pthread_rwlock_arch_t;
__pthread_rwlock_arch_t::__wrphase_futex;
__pthread_rwlock_arch_t::__pad1;
__pthread_rwlock_arch_t::__readers;
__pthread_rwlock_arch_t::__pad3;
__pthread_rwlock_arch_t::__cur_writer;
__pthread_rwlock_arch_t::__pad4;
__pthread_rwlock_arch_t::__writers_futex;
__pthread_rwlock_arch_t::__rwelision;
__pthread_rwlock_arch_t::__shared;
__pthread_rwlock_arch_t::__flags;
__pthread_rwlock_arch_t::__writers;
__pthread_rwlock_arch_t::__pad2;
sigstack;
sigstack::ss_sp;
sigstack::ss_onstack;
vfs_cap_data;
vfs_cap_data::data;
vfs_cap_data::magic_etc;
ENGINE_CMD_DEFN_st;
ENGINE_CMD_DEFN_st::cmd_flags;
ENGINE_CMD_DEFN_st::cmd_desc;
ENGINE_CMD_DEFN_st::cmd_num;
ENGINE_CMD_DEFN_st::cmd_name;
_pthread_cleanup_buffer;
_pthread_cleanup_buffer::__routine;
_pthread_cleanup_buffer::__canceltype;
_pthread_cleanup_buffer::__arg;
_pthread_cleanup_buffer::__prev;
udphdr::<anonymous>;
ip6_mtuinfo;
ip6_mtuinfo::ip6m_mtu;
ip6_mtuinfo::ip6m_addr;
dirent;
dirent::d_name;
dirent::d_type;
dirent::d_ino;
dirent::d_reclen;
dirent::d_off;
bpf_attr::<anonymous>::<anonymous>::prog_id;
bpf_attr::<anonymous>::<anonymous>::btf_id;
bpf_attr::<anonymous>::<anonymous>::start_id;
bpf_attr::<anonymous>::<anonymous>::map_id;
bpf_attr::<anonymous>::<anonymous>::link_id;
v3_ext_ctx;
v3_ext_ctx::crl;
v3_ext_ctx::db_meth;
v3_ext_ctx::issuer_pkey;
v3_ext_ctx::db;
v3_ext_ctx::subject_req;
v3_ext_ctx::issuer_cert;
v3_ext_ctx::flags;
v3_ext_ctx::subject_cert;
bpf_fib_lookup::<anonymous>::ipv4_dst;
bpf_fib_lookup::<anonymous>::ipv6_dst;
pkcs7_st::<anonymous>;
pkcs7_st::<anonymous>::digest;
pkcs7_st::<anonymous>::sign;
pkcs7_st::<anonymous>::enveloped;
pkcs7_st::<anonymous>::other;
pkcs7_st::<anonymous>::ptr;
pkcs7_st::<anonymous>::data;
pkcs7_st::<anonymous>::signed_and_enveloped;
pkcs7_st::<anonymous>::encrypted;
in_addr;
in_addr::s_addr;
bpf_attr;
bpf_attr::test;
bpf_attr::batch;
bpf_attr::raw_tracepoint;
bpf_attr::link_create;
bpf_attr::iter_create;
bpf_attr::info;
bpf_attr::link_update;
bpf_attr::task_fd_query;
bpf_attr::prog_bind_map;
bpf_attr::enable_stats;
bpf_attr::query;
bpf_attr::link_detach;
udphdr::<anonymous>::<anonymous>;
udphdr::<anonymous>::<anonymous>::uh_ulen;
udphdr::<anonymous>::<anonymous>::uh_sum;
udphdr::<anonymous>::<anonymous>::uh_sport;
udphdr::<anonymous>::<anonymous>::uh_dport;
timespec;
timespec::tv_nsec;
timespec::tv_sec;
GENERAL_NAME_st;
GENERAL_NAME_st::type;
GENERAL_NAME_st::d;
group_source_req;
group_source_req::gsr_group;
group_source_req::gsr_interface;
group_source_req::gsr_source;
rusage::<anonymous>::__ru_nvcsw_word;
rusage::<anonymous>::ru_nvcsw;
NAME_CONSTRAINTS_st;
NAME_CONSTRAINTS_st::permittedSubtrees;
NAME_CONSTRAINTS_st::excludedSubtrees;
rusage::<anonymous>::__ru_nswap_word;
rusage::<anonymous>::ru_nswap;
IPAddressOrRange_st::<anonymous>;
IPAddressOrRange_st::<anonymous>::addressRange;
IPAddressOrRange_st::<anonymous>::addressPrefix;
mallinfo;
mallinfo::ordblks;
mallinfo::usmblks;
mallinfo::fsmblks;
mallinfo::hblks;
mallinfo::uordblks;
mallinfo::arena;
mallinfo::fordblks;
mallinfo::smblks;
mallinfo::hblkhd;
mallinfo::keepcost;
__pthread_internal_slist;
__pthread_internal_slist::__next;
bpf_raw_tracepoint_args;
bpf_raw_tracepoint_args::args;
drand48_data;
drand48_data::__c;
drand48_data::__init;
drand48_data::__old_x;
drand48_data::__x;
drand48_data::__a;
obj_name_st;
obj_name_st::name;
obj_name_st::type;
obj_name_st::alias;
obj_name_st::data;
Dl_serinfo::<anonymous>;
Dl_serinfo::<anonymous>::dls_serpath;
Dl_serinfo::<anonymous>::__dls_serpath_pad;
EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM;
EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM::len;
EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM::inp;
EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM::out;
EVP_CTRL_TLS1_1_MULTIBLOCK_PARAM::interleave;
bpf_cgroup_storage_key;
bpf_cgroup_storage_key::attach_type;
bpf_cgroup_storage_key::cgroup_inode_id;
_fpstate;
_fpstate::ftw;
_fpstate::_xmm;
_fpstate::swd;
_fpstate::fop;
_fpstate::rdp;
_fpstate::_st;
_fpstate::mxcr_mask;
_fpstate::rip;
_fpstate::mxcsr;
_fpstate::cwd;
_fpstate::__glibc_reserved1;
glob64_t;
glob64_t::gl_offs;
glob64_t::gl_pathc;
glob64_t::gl_opendir;
glob64_t::gl_pathv;
glob64_t::gl_closedir;
glob64_t::gl_lstat;
glob64_t::gl_readdir;
glob64_t::gl_stat;
glob64_t::gl_flags;
in_pktinfo;
in_pktinfo::ipi_spec_dst;
in_pktinfo::ipi_ifindex;
in_pktinfo::ipi_addr;
epoll_data;
epoll_data::ptr;
epoll_data::fd;
epoll_data::u32;
epoll_data::u64;
conf_method_st;
conf_method_st::load;
conf_method_st::name;
conf_method_st::destroy_data;
conf_method_st::create;
conf_method_st::init;
conf_method_st::dump;
conf_method_st::is_number;
conf_method_st::load_bio;
conf_method_st::destroy;
conf_method_st::to_int;
vfs_cap_data::<anonymous>;
vfs_cap_data::<anonymous>::inheritable;
vfs_cap_data::<anonymous>::permitted;
__pthread_cleanup_frame;
__pthread_cleanup_frame::__cancel_type;
__pthread_cleanup_frame::__cancel_routine;
__pthread_cleanup_frame::__cancel_arg;
__pthread_cleanup_frame::__do_it;
pkcs7_signer_info_st;
pkcs7_signer_info_st::unauth_attr;
pkcs7_signer_info_st::digest_alg;
pkcs7_signer_info_st::enc_digest;
pkcs7_signer_info_st::version;
pkcs7_signer_info_st::digest_enc_alg;
pkcs7_signer_info_st::pkey;
pkcs7_signer_info_st::issuer_and_serial;
pkcs7_signer_info_st::auth_attr;
pkcs7_signer_info_st::ctx;
bpf_sock;
bpf_sock::<anonymous>;
bpf_sock::state;
bpf_sock::family;
bpf_sock::type;
bpf_sock::bound_dev_if;
bpf_sock::priority;
bpf_sock::mark;
bpf_sock::src_port;
bpf_sock::dst_port;
bpf_sock::protocol;
bpf_sock::src_ip4;
bpf_sock::src_ip6;
bpf_sock::dst_ip4;
bpf_sock::dst_ip6;
bpf_sock::rx_queue_mapping;
X509_info_st;
X509_info_st::x_pkey;
X509_info_st::crl;
X509_info_st::enc_cipher;
X509_info_st::enc_len;
X509_info_st::x509;
X509_info_st::enc_data;
pthread_mutexattr_t;
pthread_mutexattr_t::__size;
pthread_mutexattr_t::__align;
pkcs7_enc_content_st;
pkcs7_enc_content_st::enc_data;
pkcs7_enc_content_st::algorithm;
pkcs7_enc_content_st::cipher;
pkcs7_enc_content_st::content_type;
pkcs7_enc_content_st::ctx;
__mbstate_t::<anonymous>;
__mbstate_t::<anonymous>::__wch;
__mbstate_t::<anonymous>::__wchb;
bpf_sockopt;
bpf_sockopt::optlen;
bpf_sockopt::optname;
bpf_sockopt::level;
bpf_sockopt::retval;
bpf_link_info::<anonymous>::<anonymous>::<anonymous>;
bpf_link_info::<anonymous>::<anonymous>::<anonymous>::map;
bpf_sysctl;
bpf_sysctl::file_pos;
bpf_sysctl::write;
rsa_pss_params_st;
rsa_pss_params_st::maskHash;
rsa_pss_params_st::saltLength;
rsa_pss_params_st::trailerField;
rsa_pss_params_st::hashAlgorithm;
rsa_pss_params_st::maskGenAlgorithm;
__once_flag;
__once_flag::__data;
CRYPTO_dynlock;
CRYPTO_dynlock::dummy;
sk_msg_md;
sk_msg_md::remote_port;
sk_msg_md::family;
sk_msg_md::local_ip4;
sk_msg_md::remote_ip4;
sk_msg_md::local_ip6;
sk_msg_md::remote_ip6;
sk_msg_md::size;
sk_msg_md::local_port;
pthread_cond_t;
pthread_cond_t::__data;
pthread_cond_t::__size;
pthread_cond_t::__align;
IPAddressChoice_st::<anonymous>;
IPAddressChoice_st::<anonymous>::inherit;
IPAddressChoice_st::<anonymous>::addressesOrRanges;
sk_reuseport_md;
sk_reuseport_md::eth_protocol;
sk_reuseport_md::hash;
sk_reuseport_md::ip_protocol;
sk_reuseport_md::bind_inany;
sk_reuseport_md::len;
div_t;
div_t::rem;
div_t::quot;
pkcs7_encrypted_st;
pkcs7_encrypted_st::version;
pkcs7_encrypted_st::enc_data;
PKCS7_CTX_st;
PKCS7_CTX_st::propq;
PKCS7_CTX_st::libctx;
private_key_st;
private_key_st::key_data;
private_key_st::dec_pkey;
private_key_st::version;
private_key_st::enc_algor;
private_key_st::key_length;
private_key_st::cipher;
private_key_st::key_free;
private_key_st::enc_pkey;
bpf_sk_lookup::<anonymous>::<anonymous>;
bpf_sk_lookup::<anonymous>::<anonymous>::<anonymous>;
bpf_sk_lookup::<anonymous>::<anonymous>::sk;
sigcontext;
sigcontext::__pad0;
sigcontext::rbp;
sigcontext::cr2;
sigcontext::err;
sigcontext::rbx;
sigcontext::rdx;
sigcontext::fs;
sigcontext::r8;
sigcontext::oldmask;
sigcontext::r9;
sigcontext::rcx;
sigcontext::rsi;
sigcontext::__reserved1;
sigcontext::rax;
sigcontext::eflags;
sigcontext::r10;
sigcontext::r11;
sigcontext::r12;
sigcontext::r13;
sigcontext::r14;
sigcontext::r15;
sigcontext::cs;
sigcontext::rip;
sigcontext::rsp;
sigcontext::gs;
sigcontext::trapno;
sigcontext::rdi;
bpf_link_info::<anonymous>::<anonymous>::tp_name_len;
bpf_link_info::<anonymous>::<anonymous>::tp_name;
__atomic_wide_counter;
__atomic_wide_counter::__value32;
__atomic_wide_counter::__value64;
_fpreg;
_fpreg::exponent;
_fpreg::significand;
tcphdr;
bpf_sock_ops::<anonymous>::sk;
tls_session_ticket_ext_st;
tls_session_ticket_ext_st::length;
tls_session_ticket_ext_st::data;
statx;
statx::stx_uid;
statx::stx_dev_minor;
statx::stx_mode;
statx::stx_ino;
statx::stx_attributes;
statx::stx_rdev_major;
statx::__spare0;
statx::stx_mask;
statx::__spare2;
statx::__spare3;
statx::stx_atime;
statx::stx_btime;
statx::stx_attributes_mask;
statx::stx_ctime;
statx::stx_blksize;
statx::stx_gid;
statx::stx_rdev_minor;
statx::stx_dev_major;
statx::stx_size;
statx::stx_nlink;
statx::stx_mtime;
statx::stx_blocks;
statx::stx_mnt_id;
servent;
servent::s_name;
servent::s_aliases;
servent::s_proto;
servent::s_port;
ASIdentifierChoice_st::<anonymous>;
ASIdentifierChoice_st::<anonymous>::inherit;
ASIdentifierChoice_st::<anonymous>::asIdsOrRanges;
bpf_attr::<anonymous>::name;
EC_builtin_curve;
EC_builtin_curve::comment;
EC_builtin_curve::nid;
pthread_mutex_t;
pthread_mutex_t::__data;
pthread_mutex_t::__size;
pthread_mutex_t::__align;
rusage::<anonymous>::__ru_idrss_word;
rusage::<anonymous>::ru_idrss;
_libc_xmmreg;
_libc_xmmreg::element;
BIO_sock_info_u;
BIO_sock_info_u::addr;
SXNET_ID_st;
SXNET_ID_st::zone;
SXNET_ID_st::user;
__pthread_mutex_s;
__pthread_mutex_s::__elision;
__pthread_mutex_s::__kind;
__pthread_mutex_s::__lock;
__pthread_mutex_s::__count;
__pthread_mutex_s::__owner;
__pthread_mutex_s::__list;
__pthread_mutex_s::__spins;
__pthread_mutex_s::__nusers;
bpf_link_info::<anonymous>::<anonymous>::<anonymous>::<anonymous>;
bpf_link_info::<anonymous>::<anonymous>::<anonymous>::<anonymous>::map_id;
sigcontext::<anonymous>;
sigcontext::<anonymous>::__fpstate_word;
sigcontext::<anonymous>::fpstate;
bpf_attr::<anonymous>::<anonymous>::<anonymous>::bpf_cookie;
ip_opts;
ip_opts::ip_dst;
ip_opts::ip_opts;
dirent64;
dirent64::d_name;
dirent64::d_type;
dirent64::d_ino;
dirent64::d_reclen;
dirent64::d_off;
ASIdentifierChoice_st;
ASIdentifierChoice_st::type;
ASIdentifierChoice_st::u;
_xmmreg;
_xmmreg::element;
bpf_perf_event_value;
bpf_perf_event_value::counter;
bpf_perf_event_value::running;
bpf_perf_event_value::enabled;
Netscape_spkac_st;
Netscape_spkac_st::pubkey;
Netscape_spkac_st::challenge;
Dl_info;
Dl_info::dli_saddr;
Dl_info::dli_fbase;
Dl_info::dli_sname;
Dl_info::dli_fname;
udphdr::<anonymous>::<anonymous>::dest;
udphdr::<anonymous>::<anonymous>::source;
udphdr::<anonymous>::<anonymous>::check;
udphdr::<anonymous>::<anonymous>::len;
bpf_flow_keys::<anonymous>::<anonymous>::ipv6_src;
bpf_flow_keys::<anonymous>::<anonymous>::ipv6_dst;
_libc_fpxreg;
_libc_fpxreg::significand;
_libc_fpxreg::exponent;
_libc_fpxreg::__glibc_reserved1;
msghdr;
msghdr::msg_flags;
msghdr::msg_iov;
msghdr::msg_controllen;
msghdr::msg_control;
msghdr::msg_name;
msghdr::msg_namelen;
msghdr::msg_iovlen;
SHAstate_st;
SHAstate_st::num;
SHAstate_st::Nl;
SHAstate_st::Nh;
SHAstate_st::h0;
SHAstate_st::h1;
SHAstate_st::data;
SHAstate_st::h2;
SHAstate_st::h3;
SHAstate_st::h4;
sigevent;
sigevent::sigev_notify;
sigevent::sigev_value;
sigevent::sigev_signo;
sigevent::_sigev_un;
stderr;
program_invocation_short_name;
pcre16_callout;
pcre_stack_free;
getdate_err;
tzname;
pcre16_malloc;
pcre_stack_guard;
pcre16_stack_malloc;
__daylight;
pcre32_stack_malloc;
pcre_callout;
in6addr_any;
in6addr_loopback;
pcre32_callout;
pcre32_malloc;
pcre32_stack_guard;
pcre16_free;
pcre32_stack_free;
pcre16_stack_free;
__timezone;
environ;
optind;
opterr;
daylight;
pcre32_free;
pcre16_stack_guard;
pcre_malloc;
__tzname;
optarg;
program_invocation_name;
stdout;
pcre_free;
optopt;
stdin;
__environ;
pcre_stack_malloc;
__priority_which;
__priority_which::PRIO_PGRP;
__priority_which::PRIO_PROCESS;
__priority_which::PRIO_USER;
__socket_type;
__socket_type::SOCK_SEQPACKET;
__socket_type::SOCK_RDM;
__socket_type::SOCK_CLOEXEC;
__socket_type::SOCK_NONBLOCK;
__socket_type::SOCK_PACKET;
__socket_type::SOCK_RAW;
__socket_type::SOCK_DGRAM;
__socket_type::SOCK_STREAM;
__socket_type::SOCK_DCCP;
<anonymous>;
<anonymous>::P_PGID;
<anonymous>::P_ALL;
<anonymous>::P_PID;
<anonymous>::BPF_SOCK_OPS_ALL_CB_FLAGS;
<anonymous>::BPF_SOCK_OPS_RETRANS_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_STATE_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_RTO_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_RTT_CB_FLAG;
<anonymous>::BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG;
<anonymous>::SI_QUEUE;
<anonymous>::SI_ASYNCIO;
<anonymous>::SI_ASYNCNL;
<anonymous>::SI_SIGIO;
<anonymous>::SI_MESGQ;
<anonymous>::SI_USER;
<anonymous>::SI_TKILL;
<anonymous>::SI_DETHREAD;
<anonymous>::SI_TIMER;
<anonymous>::SI_KERNEL;
<anonymous>::_PC_FILESIZEBITS;
<anonymous>::_PC_PRIO_IO;
<anonymous>::_PC_PATH_MAX;
<anonymous>::_PC_LINK_MAX;
<anonymous>::_PC_MAX_CANON;
<anonymous>::_PC_ASYNC_IO;
<anonymous>::_PC_MAX_INPUT;
<anonymous>::_PC_CHOWN_RESTRICTED;
<anonymous>::_PC_SOCK_MAXBUF;
<anonymous>::_PC_REC_INCR_XFER_SIZE;
<anonymous>::_PC_SYNC_IO;
<anonymous>::_PC_REC_XFER_ALIGN;
<anonymous>::_PC_REC_MAX_XFER_SIZE;
<anonymous>::_PC_NAME_MAX;
<anonymous>::_PC_NO_TRUNC;
<anonymous>::_PC_ALLOC_SIZE_MIN;
<anonymous>::_PC_PIPE_BUF;
<anonymous>::_PC_2_SYMLINKS;
<anonymous>::_PC_SYMLINK_MAX;
<anonymous>::_PC_VDISABLE;
<anonymous>::_PC_REC_MIN_XFER_SIZE;
<anonymous>::BPF_FIB_LOOKUP_OUTPUT;
<anonymous>::BPF_FIB_LOOKUP_DIRECT;
<anonymous>::POLL_ERR;
<anonymous>::POLL_PRI;
<anonymous>::POLL_HUP;
<anonymous>::POLL_MSG;
<anonymous>::POLL_IN;
<anonymous>::POLL_OUT;
<anonymous>::BPF_F_CTXLEN_MASK;
<anonymous>::BPF_F_CURRENT_CPU;
<anonymous>::BPF_F_INDEX_MASK;
<anonymous>::BPF_SOCK_OPS_RWND_INIT;
<anonymous>::BPF_SOCK_OPS_PARSE_HDR_OPT_CB;
<anonymous>::BPF_SOCK_OPS_VOID;
<anonymous>::BPF_SOCK_OPS_HDR_OPT_LEN_CB;
<anonymous>::BPF_SOCK_OPS_BASE_RTT;
<anonymous>::BPF_SOCK_OPS_TCP_CONNECT_CB;
<anonymous>::BPF_SOCK_OPS_RTO_CB;
<anonymous>::BPF_SOCK_OPS_TIMEOUT_INIT;
<anonymous>::BPF_SOCK_OPS_TCP_LISTEN_CB;
<anonymous>::BPF_SOCK_OPS_RTT_CB;
<anonymous>::BPF_SOCK_OPS_WRITE_HDR_OPT_CB;
<anonymous>::BPF_SOCK_OPS_RETRANS_CB;
<anonymous>::BPF_SOCK_OPS_NEEDS_ECN;
<anonymous>::BPF_SOCK_OPS_STATE_CB;
<anonymous>::BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB;
<anonymous>::BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB;
<anonymous>::ILL_ILLOPC;
<anonymous>::ILL_PRVREG;
<anonymous>::ILL_ILLTRP;
<anonymous>::ILL_ILLADR;
<anonymous>::ILL_COPROC;
<anonymous>::ILL_PRVOPC;
<anonymous>::ILL_BADIADDR;
<anonymous>::ILL_BADSTK;
<anonymous>::ILL_ILLOPN;
<anonymous>::PTHREAD_RWLOCK_PREFER_WRITER_NP;
<anonymous>::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
<anonymous>::PTHREAD_RWLOCK_DEFAULT_NP;
<anonymous>::PTHREAD_RWLOCK_PREFER_READER_NP;
<anonymous>::EPOLL_CLOEXEC;
BIO_lookup_type;
BIO_lookup_type::BIO_LOOKUP_CLIENT;
BIO_lookup_type::BIO_LOOKUP_SERVER;
bpf_func_id;
bpf_func_id::BPF_FUNC_get_route_realm;
bpf_func_id::BPF_FUNC_send_signal_thread;
bpf_func_id::BPF_FUNC_skc_lookup_tcp;
bpf_func_id::BPF_FUNC_spin_lock;
bpf_func_id::BPF_FUNC_ringbuf_query;
bpf_func_id::BPF_FUNC_ringbuf_discard;
bpf_func_id::BPF_FUNC_strtol;
bpf_func_id::BPF_FUNC_perf_event_read;
bpf_func_id::BPF_FUNC_skb_under_cgroup;
bpf_func_id::BPF_FUNC_ktime_get_boot_ns;
bpf_func_id::BPF_FUNC_setsockopt;
bpf_func_id::BPF_FUNC_d_path;
bpf_func_id::__BPF_FUNC_MAX_ID;
bpf_func_id::BPF_FUNC_msg_apply_bytes;
bpf_func_id::BPF_FUNC_probe_read_kernel;
bpf_func_id::BPF_FUNC_get_listener_sock;
bpf_func_id::BPF_FUNC_set_hash_invalid;
bpf_func_id::BPF_FUNC_skb_change_head;
bpf_func_id::BPF_FUNC_rc_pointer_rel;
bpf_func_id::BPF_FUNC_skb_change_proto;
bpf_func_id::BPF_FUNC_ktime_get_ns;
bpf_func_id::BPF_FUNC_read_branch_records;
bpf_func_id::BPF_FUNC_msg_redirect_hash;
bpf_func_id::BPF_FUNC_store_hdr_opt;
bpf_func_id::BPF_FUNC_get_local_storage;
bpf_func_id::BPF_FUNC_sysctl_get_current_value;
bpf_func_id::BPF_FUNC_skc_to_tcp_request_sock;
bpf_func_id::BPF_FUNC_clone_redirect;
bpf_func_id::BPF_FUNC_this_cpu_ptr;
bpf_func_id::BPF_FUNC_perf_event_read_value;
bpf_func_id::BPF_FUNC_sk_select_reuseport;
bpf_func_id::BPF_FUNC_xdp_adjust_head;
bpf_func_id::BPF_FUNC_get_ns_current_pid_tgid;
bpf_func_id::BPF_FUNC_get_socket_uid;
bpf_func_id::BPF_FUNC_get_task_stack;
bpf_func_id::BPF_FUNC_probe_read_kernel_str;
bpf_func_id::BPF_FUNC_get_hash_recalc;
bpf_func_id::BPF_FUNC_copy_from_user;
bpf_func_id::BPF_FUNC_skb_vlan_push;
bpf_func_id::BPF_FUNC_redirect_map;
bpf_func_id::BPF_FUNC_skc_to_udp6_sock;
bpf_func_id::BPF_FUNC_skb_set_tunnel_opt;
bpf_func_id::BPF_FUNC_tcp_sock;
bpf_func_id::BPF_FUNC_tcp_check_syncookie;
bpf_func_id::BPF_FUNC_sys_close;
bpf_func_id::BPF_FUNC_for_each_map_elem;
bpf_func_id::BPF_FUNC_get_current_ancestor_cgroup_id;
bpf_func_id::BPF_FUNC_skb_get_tunnel_key;
bpf_func_id::BPF_FUNC_probe_write_user;
bpf_func_id::BPF_FUNC_get_socket_cookie;
bpf_func_id::BPF_FUNC_skb_load_bytes;
bpf_func_id::BPF_FUNC_ima_inode_hash;
bpf_func_id::BPF_FUNC_unspec;
bpf_func_id::BPF_FUNC_skc_to_tcp6_sock;
bpf_func_id::BPF_FUNC_sk_storage_get;
bpf_func_id::BPF_FUNC_map_delete_elem;
bpf_func_id::BPF_FUNC_probe_read;
bpf_func_id::BPF_FUNC_probe_read_user;
bpf_func_id::BPF_FUNC_skb_store_bytes;
bpf_func_id::BPF_FUNC_msg_redirect_map;
bpf_func_id::BPF_FUNC_snprintf;
bpf_func_id::BPF_FUNC_rc_repeat;
bpf_func_id::BPF_FUNC_skb_cgroup_id;
bpf_func_id::BPF_FUNC_redirect_neigh;
bpf_func_id::BPF_FUNC_ringbuf_output;
bpf_func_id::BPF_FUNC_map_push_elem;
bpf_func_id::BPF_FUNC_sysctl_get_name;
bpf_func_id::BPF_FUNC_get_stackid;
bpf_func_id::BPF_FUNC_inode_storage_get;
bpf_func_id::BPF_FUNC_per_cpu_ptr;
bpf_func_id::BPF_FUNC_sock_from_file;
bpf_func_id::BPF_FUNC_send_signal;
bpf_func_id::BPF_FUNC_probe_read_user_str;
bpf_func_id::BPF_FUNC_probe_read_str;
bpf_func_id::BPF_FUNC_bprm_opts_set;
bpf_func_id::BPF_FUNC_l4_csum_replace;
bpf_func_id::BPF_FUNC_sk_redirect_hash;
bpf_func_id::BPF_FUNC_timer_init;
bpf_func_id::BPF_FUNC_rc_keydown;
bpf_func_id::BPF_FUNC_sk_ancestor_cgroup_id;
bpf_func_id::BPF_FUNC_sk_cgroup_id;
bpf_func_id::BPF_FUNC_skb_get_xfrm_state;
bpf_func_id::BPF_FUNC_xdp_output;
bpf_func_id::BPF_FUNC_sk_lookup_tcp;
bpf_func_id::BPF_FUNC_redirect_peer;
bpf_func_id::BPF_FUNC_xdp_adjust_meta;
bpf_func_id::BPF_FUNC_msg_cork_bytes;
bpf_func_id::BPF_FUNC_map_update_elem;
bpf_func_id::BPF_FUNC_getsockopt;
bpf_func_id::BPF_FUNC_sk_storage_delete;
bpf_func_id::BPF_FUNC_trace_printk;
bpf_func_id::BPF_FUNC_skb_ecn_set_ce;
bpf_func_id::BPF_FUNC_task_pt_regs;
bpf_func_id::BPF_FUNC_get_prandom_u32;
bpf_func_id::BPF_FUNC_get_attach_cookie;
bpf_func_id::BPF_FUNC_sock_map_update;
bpf_func_id::BPF_FUNC_skb_output;
bpf_func_id::BPF_FUNC_skb_cgroup_classid;
bpf_func_id::BPF_FUNC_redirect;
bpf_func_id::BPF_FUNC_get_current_task;
bpf_func_id::BPF_FUNC_skb_pull_data;
bpf_func_id::BPF_FUNC_get_current_uid_gid;
bpf_func_id::BPF_FUNC_sys_bpf;
bpf_func_id::BPF_FUNC_sock_hash_update;
bpf_func_id::BPF_FUNC_map_lookup_elem;
bpf_func_id::BPF_FUNC_skb_ancestor_cgroup_id;
bpf_func_id::BPF_FUNC_btf_find_by_name_kind;
bpf_func_id::BPF_FUNC_sock_ops_cb_flags_set;
bpf_func_id::BPF_FUNC_lwt_push_encap;
bpf_func_id::BPF_FUNC_sk_release;
bpf_func_id::BPF_FUNC_msg_push_data;
bpf_func_id::BPF_FUNC_sk_fullsock;
bpf_func_id::BPF_FUNC_get_numa_node_id;
bpf_func_id::BPF_FUNC_sk_assign;
bpf_func_id::BPF_FUNC_get_netns_cookie;
bpf_func_id::BPF_FUNC_map_peek_elem;
bpf_func_id::BPF_FUNC_get_current_pid_tgid;
bpf_func_id::BPF_FUNC_skb_get_tunnel_opt;
bpf_func_id::BPF_FUNC_skb_change_type;
bpf_func_id::BPF_FUNC_ringbuf_reserve;
bpf_func_id::BPF_FUNC_sysctl_get_new_value;
bpf_func_id::BPF_FUNC_reserve_hdr_opt;
bpf_func_id::BPF_FUNC_timer_cancel;
bpf_func_id::BPF_FUNC_skb_change_tail;
bpf_func_id::BPF_FUNC_set_hash;
bpf_func_id::BPF_FUNC_load_hdr_opt;
bpf_func_id::BPF_FUNC_map_pop_elem;
bpf_func_id::BPF_FUNC_sysctl_set_new_value;
bpf_func_id::BPF_FUNC_tcp_gen_syncookie;
bpf_func_id::BPF_FUNC_timer_start;
bpf_func_id::BPF_FUNC_get_stack;
bpf_func_id::BPF_FUNC_seq_printf_btf;
bpf_func_id::BPF_FUNC_timer_set_callback;
bpf_func_id::BPF_FUNC_snprintf_btf;
bpf_func_id::BPF_FUNC_bind;
bpf_func_id::BPF_FUNC_perf_event_output;
bpf_func_id::BPF_FUNC_override_return;
bpf_func_id::BPF_FUNC_get_current_cgroup_id;
bpf_func_id::BPF_FUNC_current_task_under_cgroup;
bpf_func_id::BPF_FUNC_xdp_adjust_tail;
bpf_func_id::BPF_FUNC_ringbuf_submit;
bpf_func_id::BPF_FUNC_get_func_ip;
bpf_func_id::BPF_FUNC_spin_unlock;
bpf_func_id::BPF_FUNC_tail_call;
bpf_func_id::BPF_FUNC_skb_set_tunnel_key;
bpf_func_id::BPF_FUNC_lwt_seg6_action;
bpf_func_id::BPF_FUNC_fib_lookup;
bpf_func_id::BPF_FUNC_sk_redirect_map;
bpf_func_id::BPF_FUNC_msg_pop_data;
bpf_func_id::BPF_FUNC_get_current_task_btf;
bpf_func_id::BPF_FUNC_csum_diff;
bpf_func_id::BPF_FUNC_l3_csum_replace;
bpf_func_id::BPF_FUNC_get_cgroup_classid;
bpf_func_id::BPF_FUNC_check_mtu;
bpf_func_id::BPF_FUNC_csum_update;
bpf_func_id::BPF_FUNC_perf_prog_read_value;
bpf_func_id::BPF_FUNC_msg_pull_data;
bpf_func_id::BPF_FUNC_lwt_seg6_store_bytes;
bpf_func_id::BPF_FUNC_skb_vlan_pop;
bpf_func_id::BPF_FUNC_sk_lookup_udp;
bpf_func_id::BPF_FUNC_skb_load_bytes_relative;
bpf_func_id::BPF_FUNC_lwt_seg6_adjust_srh;
bpf_func_id::BPF_FUNC_strtoul;
bpf_func_id::BPF_FUNC_tcp_send_ack;
bpf_func_id::BPF_FUNC_skc_to_tcp_timewait_sock;
bpf_func_id::BPF_FUNC_skb_adjust_room;
bpf_func_id::BPF_FUNC_task_storage_get;
bpf_func_id::BPF_FUNC_jiffies64;
bpf_func_id::BPF_FUNC_get_current_comm;
bpf_func_id::BPF_FUNC_csum_level;
bpf_func_id::BPF_FUNC_seq_write;
bpf_func_id::BPF_FUNC_inode_storage_delete;
bpf_func_id::BPF_FUNC_ktime_get_coarse_ns;
bpf_func_id::BPF_FUNC_skc_to_tcp_sock;
bpf_func_id::BPF_FUNC_task_storage_delete;
bpf_func_id::BPF_FUNC_get_smp_processor_id;
bpf_func_id::BPF_FUNC_seq_printf;
<anonymous>::TCP_SEND_QUEUE;
<anonymous>::TCP_NO_QUEUE;
<anonymous>::TCP_RECV_QUEUE;
<anonymous>::TCP_QUEUES_NR;
bpf_map_type;
bpf_map_type::BPF_MAP_TYPE_PERF_EVENT_ARRAY;
bpf_map_type::BPF_MAP_TYPE_RINGBUF;
bpf_map_type::BPF_MAP_TYPE_SOCKMAP;
bpf_map_type::BPF_MAP_TYPE_XSKMAP;
bpf_map_type::BPF_MAP_TYPE_STRUCT_OPS;
bpf_map_type::BPF_MAP_TYPE_DEVMAP;
bpf_map_type::BPF_MAP_TYPE_LRU_PERCPU_HASH;
bpf_map_type::BPF_MAP_TYPE_QUEUE;
bpf_map_type::BPF_MAP_TYPE_CPUMAP;
bpf_map_type::BPF_MAP_TYPE_PERCPU_ARRAY;
bpf_map_type::BPF_MAP_TYPE_UNSPEC;
bpf_map_type::BPF_MAP_TYPE_CGROUP_ARRAY;
bpf_map_type::BPF_MAP_TYPE_PERCPU_HASH;
bpf_map_type::BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE;
bpf_map_type::BPF_MAP_TYPE_SOCKHASH;
bpf_map_type::BPF_MAP_TYPE_SK_STORAGE;
bpf_map_type::BPF_MAP_TYPE_PROG_ARRAY;
bpf_map_type::BPF_MAP_TYPE_LRU_HASH;
bpf_map_type::BPF_MAP_TYPE_REUSEPORT_SOCKARRAY;
bpf_map_type::BPF_MAP_TYPE_STACK;
bpf_map_type::BPF_MAP_TYPE_LPM_TRIE;
bpf_map_type::BPF_MAP_TYPE_ARRAY;
bpf_map_type::BPF_MAP_TYPE_DEVMAP_HASH;
bpf_map_type::BPF_MAP_TYPE_ARRAY_OF_MAPS;
bpf_map_type::BPF_MAP_TYPE_HASH;
bpf_map_type::BPF_MAP_TYPE_STACK_TRACE;
bpf_map_type::BPF_MAP_TYPE_INODE_STORAGE;
bpf_map_type::BPF_MAP_TYPE_CGROUP_STORAGE;
bpf_map_type::BPF_MAP_TYPE_HASH_OF_MAPS;
bpf_map_type::BPF_MAP_TYPE_TASK_STORAGE;
<anonymous>::BPF_WRITE_HDR_TCP_SYNACK_COOKIE;
<anonymous>::BPF_WRITE_HDR_TCP_CURRENT_MSS;
bpf_task_fd_type;
bpf_task_fd_type::BPF_FD_TYPE_RAW_TRACEPOINT;
bpf_task_fd_type::BPF_FD_TYPE_KPROBE;
bpf_task_fd_type::BPF_FD_TYPE_URETPROBE;
bpf_task_fd_type::BPF_FD_TYPE_TRACEPOINT;
bpf_task_fd_type::BPF_FD_TYPE_UPROBE;
bpf_task_fd_type::BPF_FD_TYPE_KRETPROBE;
<anonymous>::BPF_F_EXCLUDE_INGRESS;
<anonymous>::BPF_F_BROADCAST;
bpf_prog_type;
bpf_prog_type::BPF_PROG_TYPE_EXT;
bpf_prog_type::BPF_PROG_TYPE_LWT_SEG6LOCAL;
bpf_prog_type::BPF_PROG_TYPE_STRUCT_OPS;
bpf_prog_type::BPF_PROG_TYPE_SK_LOOKUP;
bpf_prog_type::BPF_PROG_TYPE_TRACEPOINT;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_SOCK_ADDR;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_DEVICE;
bpf_prog_type::BPF_PROG_TYPE_SOCK_OPS;
bpf_prog_type::BPF_PROG_TYPE_KPROBE;
bpf_prog_type::BPF_PROG_TYPE_SCHED_CLS;
bpf_prog_type::BPF_PROG_TYPE_LSM;
bpf_prog_type::BPF_PROG_TYPE_PERF_EVENT;
bpf_prog_type::BPF_PROG_TYPE_SOCKET_FILTER;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_SYSCTL;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_SOCKOPT;
bpf_prog_type::BPF_PROG_TYPE_UNSPEC;
bpf_prog_type::BPF_PROG_TYPE_LWT_XMIT;
bpf_prog_type::BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE;
bpf_prog_type::BPF_PROG_TYPE_SYSCALL;
bpf_prog_type::BPF_PROG_TYPE_SK_SKB;
bpf_prog_type::BPF_PROG_TYPE_SCHED_ACT;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_SOCK;
bpf_prog_type::BPF_PROG_TYPE_LIRC_MODE2;
bpf_prog_type::BPF_PROG_TYPE_RAW_TRACEPOINT;
bpf_prog_type::BPF_PROG_TYPE_SK_MSG;
bpf_prog_type::BPF_PROG_TYPE_SK_REUSEPORT;
bpf_prog_type::BPF_PROG_TYPE_FLOW_DISSECTOR;
bpf_prog_type::BPF_PROG_TYPE_TRACING;
bpf_prog_type::BPF_PROG_TYPE_XDP;
bpf_prog_type::BPF_PROG_TYPE_LWT_IN;
bpf_prog_type::BPF_PROG_TYPE_LWT_OUT;
bpf_prog_type::BPF_PROG_TYPE_CGROUP_SKB;
<anonymous>::BPF_F_BPRM_SECUREEXEC;
bpf_ret_code;
bpf_ret_code::BPF_OK;
bpf_ret_code::BPF_LWT_REROUTE;
bpf_ret_code::BPF_REDIRECT;
bpf_ret_code::BPF_DROP;
<anonymous>::RTLD_DL_LINKMAP;
<anonymous>::RTLD_DL_SYMENT;
<anonymous>::BPF_DEVCG_ACC_WRITE;
<anonymous>::BPF_DEVCG_ACC_READ;
<anonymous>::BPF_DEVCG_ACC_MKNOD;
BIO_sock_info_type;
BIO_sock_info_type::BIO_SOCK_INFO_ADDRESS;
<anonymous>::TCP_BPF_RTO_MIN;
<anonymous>::TCP_BPF_DELACK_MAX;
<anonymous>::TCP_BPF_SYN;
<anonymous>::TCP_BPF_SYN_MAC;
<anonymous>::TCP_BPF_SNDCWND_CLAMP;
<anonymous>::TCP_BPF_IW;
<anonymous>::TCP_BPF_SYN_IP;
<anonymous>::BPF_F_INVALIDATE_HASH;
<anonymous>::BPF_F_RECOMPUTE_CSUM;
<anonymous>::_SC_THREAD_PROCESS_SHARED;
<anonymous>::_SC_LINE_MAX;
<anonymous>::_SC_XOPEN_XPG4;
<anonymous>::_SC_USER_GROUPS_R;
<anonymous>::_SC_XOPEN_SHM;
<anonymous>::_SC_MB_LEN_MAX;
<anonymous>::_SC_SIGNALS;
<anonymous>::_SC_PII_INTERNET_STREAM;
<anonymous>::_SC_PII_XTI;
<anonymous>::_SC_DEVICE_SPECIFIC;
<anonymous>::_SC_MESSAGE_PASSING;
<anonymous>::_SC_BARRIERS;
<anonymous>::_SC_SYMLOOP_MAX;
<anonymous>::_SC_LEVEL4_CACHE_SIZE;
<anonymous>::_SC_THREAD_ROBUST_PRIO_PROTECT;
<anonymous>::_SC_PII_OSI_COTS;
<anonymous>::_SC_NL_TEXTMAX;
<anonymous>::_SC_TIMER_MAX;
<anonymous>::_SC_TTY_NAME_MAX;
<anonymous>::_SC_NETWORKING;
<anonymous>::_SC_MULTI_PROCESS;
<anonymous>::_SC_PII_SOCKET;
<anonymous>::_SC_V6_LPBIG_OFFBIG;
<anonymous>::_SC_PRIORITIZED_IO;
<anonymous>::_SC_THREAD_SAFE_FUNCTIONS;
<anonymous>::_SC_SEM_NSEMS_MAX;
<anonymous>::_SC_AIO_LISTIO_MAX;
<anonymous>::_SC_THREAD_PRIO_PROTECT;
<anonymous>::_SC_V6_ILP32_OFF32;
<anonymous>::_SC_LEVEL4_CACHE_ASSOC;
<anonymous>::_SC_PII_OSI_M;
<anonymous>::_SC_2_SW_DEV;
<anonymous>::_SC_ARG_MAX;
<anonymous>::_SC_V6_ILP32_OFFBIG;
<anonymous>::_SC_FSYNC;
<anonymous>::_SC_SYSTEM_DATABASE_R;
<anonymous>::_SC_XBS5_LP64_OFF64;
<anonymous>::_SC_INT_MAX;
<anonymous>::_SC_TIMERS;
<anonymous>::_SC_ATEXIT_MAX;
<anonymous>::_SC_2_VERSION;
<anonymous>::_SC_GETPW_R_SIZE_MAX;
<anonymous>::_SC_2_C_VERSION;
<anonymous>::_SC_THREAD_KEYS_MAX;
<anonymous>::_SC_2_PBS_ACCOUNTING;
<anonymous>::_SC_MONOTONIC_CLOCK;
<anonymous>::_SC_NPROCESSORS_CONF;
<anonymous>::_SC_THREAD_DESTRUCTOR_ITERATIONS;
<anonymous>::_SC_2_FORT_DEV;
<anonymous>::_SC_PII_INTERNET;
<anonymous>::_SC_NL_SETMAX;
<anonymous>::_SC_NZERO;
<anonymous>::_SC_BC_SCALE_MAX;
<anonymous>::_SC_PHYS_PAGES;
<anonymous>::_SC_NPROCESSORS_ONLN;
<anonymous>::_SC_SYSTEM_DATABASE;
<anonymous>::_SC_WORD_BIT;
<anonymous>::_SC_FD_MGMT;
<anonymous>::_SC_SIGSTKSZ;
<anonymous>::_SC_SHRT_MIN;
<anonymous>::_SC_FIFO;
<anonymous>::_SC_XOPEN_REALTIME_THREADS;
<anonymous>::_SC_CHILD_MAX;
<anonymous>::_SC_SPORADIC_SERVER;
<anonymous>::_SC_TRACE_SYS_MAX;
<anonymous>::_SC_SCHAR_MIN;
<anonymous>::_SC_SYNCHRONIZED_IO;
<anonymous>::_SC_POLL;
<anonymous>::_SC_XBS5_LPBIG_OFFBIG;
<anonymous>::_SC_BASE;
<anonymous>::_SC_AIO_MAX;
<anonymous>::_SC_THREAD_ATTR_STACKSIZE;
<anonymous>::_SC_BC_DIM_MAX;
<anonymous>::_SC_LEVEL1_ICACHE_LINESIZE;
<anonymous>::_SC_TRACE_LOG;
<anonymous>::_SC_CLOCK_SELECTION;
<anonymous>::_SC_TRACE_USER_EVENT_MAX;
<anonymous>::_SC_LEVEL3_CACHE_ASSOC;
<anonymous>::_SC_XBS5_ILP32_OFFBIG;
<anonymous>::_SC_PAGESIZE;
<anonymous>::_SC_V7_LP64_OFF64;
<anonymous>::_SC_LEVEL1_DCACHE_SIZE;
<anonymous>::_SC_LEVEL3_CACHE_SIZE;
<anonymous>::_SC_XOPEN_CRYPT;
<anonymous>::_SC_NL_ARGMAX;
<anonymous>::_SC_CHAR_MIN;
<anonymous>::_SC_LEVEL4_CACHE_LINESIZE;
<anonymous>::_SC_T_IOV_MAX;
<anonymous>::_SC_2_CHAR_TERM;
<anonymous>::_SC_NL_MSGMAX;
<anonymous>::_SC_SPAWN;
<anonymous>::_SC_FILE_LOCKING;
<anonymous>::_SC_SIGQUEUE_MAX;
<anonymous>::_SC_XOPEN_UNIX;
<anonymous>::_SC_OPEN_MAX;
<anonymous>::_SC_TIMEOUTS;
<anonymous>::_SC_MEMORY_PROTECTION;
<anonymous>::_SC_SINGLE_PROCESS;
<anonymous>::_SC_LEVEL3_CACHE_LINESIZE;
<anonymous>::_SC_THREAD_SPORADIC_SERVER;
<anonymous>::_SC_REALTIME_SIGNALS;
<anonymous>::_SC_DEVICE_SPECIFIC_R;
<anonymous>::_SC_AVPHYS_PAGES;
<anonymous>::_SC_2_PBS;
<anonymous>::_SC_LEVEL1_DCACHE_ASSOC;
<anonymous>::_SC_USER_GROUPS;
<anonymous>::_SC_LEVEL1_ICACHE_SIZE;
<anonymous>::_SC_UIO_MAXIOV;
<anonymous>::_SC_TRACE_INHERIT;
<anonymous>::_SC_LEVEL2_CACHE_LINESIZE;
<anonymous>::_SC_2_PBS_TRACK;
<anonymous>::_SC_THREAD_STACK_MIN;
<anonymous>::_SC_SPIN_LOCKS;
<anonymous>::_SC_2_PBS_MESSAGE;
<anonymous>::_SC_MQ_PRIO_MAX;
<anonymous>::_SC_THREAD_ROBUST_PRIO_INHERIT;
<anonymous>::_SC_HOST_NAME_MAX;
<anonymous>::_SC_FILE_ATTRIBUTES;
<anonymous>::_SC_THREAD_CPUTIME;
<anonymous>::_SC_STREAM_MAX;
<anonymous>::_SC_SAVED_IDS;
<anonymous>::_SC_TRACE_NAME_MAX;
<anonymous>::_SC_LEVEL2_CACHE_ASSOC;
<anonymous>::_SC_CHARCLASS_NAME_MAX;
<anonymous>::_SC_2_PBS_CHECKPOINT;
<anonymous>::_SC_XOPEN_XCU_VERSION;
<anonymous>::_SC_STREAMS;
<anonymous>::_SC_XOPEN_LEGACY;
<anonymous>::_SC_THREAD_PRIO_INHERIT;
<anonymous>::_SC_MINSIGSTKSZ;
<anonymous>::_SC_THREADS;
<anonymous>::_SC_RTSIG_MAX;
<anonymous>::_SC_INT_MIN;
<anonymous>::_SC_2_C_DEV;
<anonymous>::_SC_TZNAME_MAX;
<anonymous>::_SC_V6_LP64_OFF64;
<anonymous>::_SC_SEMAPHORES;
<anonymous>::_SC_SHELL;
<anonymous>::_SC_PII_INTERNET_DGRAM;
<anonymous>::_SC_USHRT_MAX;
<anonymous>::_SC_XOPEN_REALTIME;
<anonymous>::_SC_EXPR_NEST_MAX;
<anonymous>::_SC_SELECT;
<anonymous>::_SC_PII_OSI_CLTS;
<anonymous>::_SC_FILE_SYSTEM;
<anonymous>::_SC_IPV6;
<anonymous>::_SC_LEVEL2_CACHE_SIZE;
<anonymous>::_SC_ULONG_MAX;
<anonymous>::_SC_TRACE;
<anonymous>::_SC_C_LANG_SUPPORT_R;
<anonymous>::_SC_THREAD_PRIORITY_SCHEDULING;
<anonymous>::_SC_AIO_PRIO_DELTA_MAX;
<anonymous>::_SC_EQUIV_CLASS_MAX;
<anonymous>::_SC_UINT_MAX;
<anonymous>::_SC_SHRT_MAX;
<anonymous>::_SC_XOPEN_STREAMS;
<anonymous>::_SC_MAPPED_FILES;
<anonymous>::_SC_COLL_WEIGHTS_MAX;
<anonymous>::_SC_REGEXP;
<anonymous>::_SC_PIPE;
<anonymous>::_SC_2_C_BIND;
<anonymous>::_SC_2_LOCALEDEF;
<anonymous>::_SC_SSIZE_MAX;
<anonymous>::_SC_MEMLOCK_RANGE;
<anonymous>::_SC_TRACE_EVENT_NAME_MAX;
<anonymous>::_SC_SCHAR_MAX;
<anonymous>::_SC_UCHAR_MAX;
<anonymous>::_SC_ADVISORY_INFO;
<anonymous>::_SC_LOGIN_NAME_MAX;
<anonymous>::_SC_BC_STRING_MAX;
<anonymous>::_SC_NL_LANGMAX;
<anonymous>::_SC_PII;
<anonymous>::_SC_BC_BASE_MAX;
<anonymous>::_SC_VERSION;
<anonymous>::_SC_PRIORITY_SCHEDULING;
<anonymous>::_SC_MEMLOCK;
<anonymous>::_SC_SEM_VALUE_MAX;
<anonymous>::_SC_PII_OSI;
<anonymous>::_SC_MQ_OPEN_MAX;
<anonymous>::_SC_V7_ILP32_OFF32;
<anonymous>::_SC_PASS_MAX;
<anonymous>::_SC_SS_REPL_MAX;
<anonymous>::_SC_THREAD_ATTR_STACKADDR;
<anonymous>::_SC_XOPEN_ENH_I18N;
<anonymous>::_SC_RE_DUP_MAX;
<anonymous>::_SC_RAW_SOCKETS;
<anonymous>::_SC_V7_LPBIG_OFFBIG;
<anonymous>::_SC_CHAR_MAX;
<anonymous>::_SC_READER_WRITER_LOCKS;
<anonymous>::_SC_LONG_BIT;
<anonymous>::_SC_NGROUPS_MAX;
<anonymous>::_SC_CPUTIME;
<anonymous>::_SC_LEVEL1_ICACHE_ASSOC;
<anonymous>::_SC_C_LANG_SUPPORT;
<anonymous>::_SC_REGEX_VERSION;
<anonymous>::_SC_LEVEL1_DCACHE_LINESIZE;
<anonymous>::_SC_ASYNCHRONOUS_IO;
<anonymous>::_SC_V7_ILP32_OFFBIG;
<anonymous>::_SC_THREAD_THREADS_MAX;
<anonymous>::_SC_GETGR_R_SIZE_MAX;
<anonymous>::_SC_XBS5_ILP32_OFF32;
<anonymous>::_SC_NL_NMAX;
<anonymous>::_SC_2_PBS_LOCATE;
<anonymous>::_SC_XOPEN_VERSION;
<anonymous>::_SC_IOV_MAX;
<anonymous>::_SC_TRACE_EVENT_FILTER;
<anonymous>::_SC_DELAYTIMER_MAX;
<anonymous>::_SC_SHARED_MEMORY_OBJECTS;
<anonymous>::_SC_JOB_CONTROL;
<anonymous>::_SC_CLK_TCK;
<anonymous>::_SC_CHAR_BIT;
<anonymous>::_SC_2_UPE;
<anonymous>::_SC_2_FORT_RUN;
<anonymous>::_SC_DEVICE_IO;
<anonymous>::_SC_TYPED_MEMORY_OBJECTS;
<anonymous>::_SC_XOPEN_XPG2;
<anonymous>::_SC_XOPEN_XPG3;
<anonymous>::BPF_F_WRONLY;
<anonymous>::BPF_F_NO_PREALLOC;
<anonymous>::BPF_F_RDONLY_PROG;
<anonymous>::BPF_F_CLONE;
<anonymous>::BPF_F_STACK_BUILD_ID;
<anonymous>::BPF_F_NUMA_NODE;
<anonymous>::BPF_F_NO_COMMON_LRU;
<anonymous>::BPF_F_RDONLY;
<anonymous>::BPF_F_INNER_MAP;
<anonymous>::BPF_F_MMAPABLE;
<anonymous>::BPF_F_ZERO_SEED;
<anonymous>::BPF_F_PRESERVE_ELEMS;
<anonymous>::BPF_F_WRONLY_PROG;
<anonymous>::BPF_F_INGRESS;
<anonymous>::BPF_CSUM_LEVEL_DEC;
<anonymous>::BPF_CSUM_LEVEL_RESET;
<anonymous>::BPF_CSUM_LEVEL_QUERY;
<anonymous>::BPF_CSUM_LEVEL_INC;
BIO_hostserv_priorities;
BIO_hostserv_priorities::BIO_PARSE_PRIO_HOST;
BIO_hostserv_priorities::BIO_PARSE_PRIO_SERV;
__pid_type;
__pid_type::F_OWNER_TID;
__pid_type::F_OWNER_GID;
__pid_type::F_OWNER_PGRP;
__pid_type::F_OWNER_PID;
<anonymous>::REG_RBP;
<anonymous>::REG_CR2;
<anonymous>::REG_CSGSFS;
<anonymous>::REG_R8;
<anonymous>::REG_R9;
<anonymous>::REG_RBX;
<anonymous>::REG_RCX;
<anonymous>::REG_RSI;
<anonymous>::REG_RDX;
<anonymous>::REG_RAX;
<anonymous>::REG_R10;
<anonymous>::REG_TRAPNO;
<anonymous>::REG_R11;
<anonymous>::REG_R12;
<anonymous>::REG_R13;
<anonymous>::REG_R14;
<anonymous>::REG_R15;
<anonymous>::REG_RIP;
<anonymous>::REG_RSP;
<anonymous>::REG_EFL;
<anonymous>::REG_ERR;
<anonymous>::REG_RDI;
<anonymous>::REG_OLDMASK;
<anonymous>::X509_LU_NONE;
<anonymous>::X509_LU_CRL;
<anonymous>::X509_LU_X509;
<anonymous>::BPF_TCP_FIN_WAIT2;
<anonymous>::BPF_TCP_TIME_WAIT;
<anonymous>::BPF_TCP_FIN_WAIT1;
<anonymous>::BPF_TCP_ESTABLISHED;
<anonymous>::BPF_TCP_SYN_RECV;
<anonymous>::BPF_TCP_CLOSE_WAIT;
<anonymous>::BPF_TCP_LISTEN;
<anonymous>::BPF_TCP_CLOSING;
<anonymous>::BPF_TCP_NEW_SYN_RECV;
<anonymous>::BPF_TCP_SYN_SENT;
<anonymous>::BPF_TCP_CLOSE;
<anonymous>::BPF_TCP_MAX_STATES;
<anonymous>::BPF_TCP_LAST_ACK;
<anonymous>::SCT_VALIDATION_STATUS_NOT_SET;
<anonymous>::SCT_VALIDATION_STATUS_VALID;
<anonymous>::SCT_VALIDATION_STATUS_UNKNOWN_LOG;
<anonymous>::SCT_VALIDATION_STATUS_UNVERIFIED;
<anonymous>::SCT_VALIDATION_STATUS_UNKNOWN_VERSION;
<anonymous>::SCT_VALIDATION_STATUS_INVALID;
<anonymous>::BPF_SK_LOOKUP_F_NO_REUSEPORT;
<anonymous>::BPF_SK_LOOKUP_F_REPLACE;
EPOLL_EVENTS;
EPOLL_EVENTS::EPOLLWRNORM;
EPOLL_EVENTS::EPOLLMSG;
EPOLL_EVENTS::EPOLLERR;
EPOLL_EVENTS::EPOLLPRI;
EPOLL_EVENTS::EPOLLRDBAND;
EPOLL_EVENTS::EPOLLHUP;
EPOLL_EVENTS::EPOLLWAKEUP;
EPOLL_EVENTS::EPOLLRDNORM;
EPOLL_EVENTS::EPOLLIN;
EPOLL_EVENTS::EPOLLOUT;
EPOLL_EVENTS::EPOLLET;
EPOLL_EVENTS::EPOLLEXCLUSIVE;
EPOLL_EVENTS::EPOLLWRBAND;
EPOLL_EVENTS::EPOLLONESHOT;
EPOLL_EVENTS::EPOLLRDHUP;
bpf_stats_type;
bpf_stats_type::BPF_STATS_RUN_TIME;
<anonymous>::BTF_F_ZERO;
<anonymous>::BTF_F_COMPACT;
<anonymous>::BTF_F_NONAME;
<anonymous>::BTF_F_PTR_RAW;
<anonymous>::PTHREAD_CANCEL_DISABLE;
<anonymous>::PTHREAD_CANCEL_ENABLE;
tcp_ca_state;
tcp_ca_state::TCP_CA_Disorder;
tcp_ca_state::TCP_CA_CWR;
tcp_ca_state::TCP_CA_Recovery;
tcp_ca_state::TCP_CA_Loss;
tcp_ca_state::TCP_CA_Open;
<anonymous>::SEGV_BNDERR;
<anonymous>::SEGV_ACCERR;
<anonymous>::SEGV_MTEAERR;
<anonymous>::SEGV_MTESERR;
<anonymous>::SEGV_ACCADI;
<anonymous>::SEGV_MAPERR;
<anonymous>::SEGV_ADIPERR;
<anonymous>::SEGV_PKUERR;
<anonymous>::SEGV_ADIDERR;
<anonymous>::_ISalpha;
<anonymous>::_ISblank;
<anonymous>::_ISlower;
<anonymous>::_ISxdigit;
<anonymous>::_ISpunct;
<anonymous>::_ISupper;
<anonymous>::_ISspace;
<anonymous>::_ISprint;
<anonymous>::_ISalnum;
<anonymous>::_ISdigit;
<anonymous>::_ISgraph;
<anonymous>::_IScntrl;
<anonymous>::BPF_SK_STORAGE_GET_F_CREATE;
<anonymous>::BPF_LOCAL_STORAGE_GET_F_CREATE;
<anonymous>::BPF_F_SYSCTL_BASE_NAME;
<anonymous>::FPE_INTOVF;
<anonymous>::FPE_FLTDIV;
<anonymous>::FPE_CONDTRAP;
<anonymous>::FPE_FLTUND;
<anonymous>::FPE_INTDIV;
<anonymous>::FPE_FLTSUB;
<anonymous>::FPE_FLTRES;
<anonymous>::FPE_FLTOVF;
<anonymous>::FPE_FLTINV;
<anonymous>::FPE_FLTUNK;
<anonymous>::BPF_REG_0;
<anonymous>::BPF_REG_1;
<anonymous>::BPF_REG_2;
<anonymous>::BPF_REG_3;
<anonymous>::BPF_REG_4;
<anonymous>::BPF_REG_5;
<anonymous>::BPF_REG_6;
<anonymous>::BPF_REG_7;
<anonymous>::BPF_REG_8;
<anonymous>::BPF_REG_9;
<anonymous>::__MAX_BPF_REG;
<anonymous>::BPF_REG_10;
<anonymous>::PTHREAD_MUTEX_STALLED;
<anonymous>::PTHREAD_MUTEX_ROBUST_NP;
<anonymous>::PTHREAD_MUTEX_ROBUST;
<anonymous>::PTHREAD_MUTEX_STALLED_NP;
bpf_stack_build_id_status;
bpf_stack_build_id_status::BPF_STACK_BUILD_ID_IP;
bpf_stack_build_id_status::BPF_STACK_BUILD_ID_EMPTY;
bpf_stack_build_id_status::BPF_STACK_BUILD_ID_VALID;
<anonymous>::DTLS_ST_CR_HELLO_VERIFY_REQUEST;
<anonymous>::TLS_ST_CR_CERT_REQ;
<anonymous>::TLS_ST_CW_KEY_EXCH;
<anonymous>::TLS_ST_SR_CHANGE;
<anonymous>::TLS_ST_SR_FINISHED;
<anonymous>::TLS_ST_CR_HELLO_REQ;
<anonymous>::TLS_ST_SR_CERT;
<anonymous>::TLS_ST_SW_KEY_UPDATE;
<anonymous>::TLS_ST_SR_NEXT_PROTO;
<anonymous>::TLS_ST_SW_KEY_EXCH;
<anonymous>::TLS_ST_CR_KEY_UPDATE;
<anonymous>::TLS_ST_CW_FINISHED;
<anonymous>::TLS_ST_CR_CERT_STATUS;
<anonymous>::TLS_ST_CW_CERT;
<anonymous>::TLS_ST_SR_CLNT_HELLO;
<anonymous>::TLS_ST_SW_SRVR_HELLO;
<anonymous>::TLS_ST_CW_CERT_VRFY;
<anonymous>::TLS_ST_SR_KEY_UPDATE;
<anonymous>::TLS_ST_CR_ENCRYPTED_EXTENSIONS;
<anonymous>::TLS_ST_SW_FINISHED;
<anonymous>::TLS_ST_CR_SRVR_HELLO;
<anonymous>::TLS_ST_SW_CERT;
<anonymous>::TLS_ST_OK;
<anonymous>::TLS_ST_SW_CERT_STATUS;
<anonymous>::DTLS_ST_SW_HELLO_VERIFY_REQUEST;
<anonymous>::TLS_ST_SW_CERT_REQ;
<anonymous>::TLS_ST_SW_CERT_VRFY;
<anonymous>::TLS_ST_SR_END_OF_EARLY_DATA;
<anonymous>::TLS_ST_SW_SESSION_TICKET;
<anonymous>::TLS_ST_CR_SESSION_TICKET;
<anonymous>::TLS_ST_SW_SRVR_DONE;
<anonymous>::TLS_ST_CW_CHANGE;
<anonymous>::TLS_ST_SW_HELLO_REQ;
<anonymous>::TLS_ST_CR_KEY_EXCH;
<anonymous>::TLS_ST_SW_ENCRYPTED_EXTENSIONS;
<anonymous>::TLS_ST_CR_CERT_VRFY;
<anonymous>::TLS_ST_CW_NEXT_PROTO;
<anonymous>::TLS_ST_SW_CHANGE;
<anonymous>::TLS_ST_PENDING_EARLY_DATA_END;
<anonymous>::TLS_ST_BEFORE;
<anonymous>::TLS_ST_SR_KEY_EXCH;
<anonymous>::TLS_ST_EARLY_DATA;
<anonymous>::TLS_ST_SR_CERT_VRFY;
<anonymous>::TLS_ST_CW_END_OF_EARLY_DATA;
<anonymous>::TLS_ST_CR_CHANGE;
<anonymous>::TLS_ST_CW_CLNT_HELLO;
<anonymous>::TLS_ST_CR_FINISHED;
<anonymous>::TLS_ST_CR_CERT;
<anonymous>::TLS_ST_CW_KEY_UPDATE;
<anonymous>::TLS_ST_CR_SRVR_DONE;
<anonymous>::MSG_SYN;
<anonymous>::MSG_NOSIGNAL;
<anonymous>::MSG_ZEROCOPY;
<anonymous>::MSG_FIN;
<anonymous>::MSG_TRYHARD;
<anonymous>::MSG_WAITFORONE;
<anonymous>::MSG_OOB;
<anonymous>::MSG_FASTOPEN;
<anonymous>::MSG_PROXY;
<anonymous>::MSG_BATCH;
<anonymous>::MSG_DONTROUTE;
<anonymous>::MSG_PEEK;
<anonymous>::MSG_EOR;
<anonymous>::MSG_DONTWAIT;
<anonymous>::MSG_TRUNC;
<anonymous>::MSG_CMSG_CLOEXEC;
<anonymous>::MSG_WAITALL;
<anonymous>::MSG_CTRUNC;
<anonymous>::MSG_CONFIRM;
<anonymous>::MSG_MORE;
<anonymous>::MSG_ERRQUEUE;
<anonymous>::MSG_RST;
<anonymous>::PTHREAD_CREATE_DETACHED;
<anonymous>::PTHREAD_CREATE_JOINABLE;
<anonymous>::PTHREAD_MUTEX_RECURSIVE;
<anonymous>::PTHREAD_MUTEX_NORMAL;
<anonymous>::PTHREAD_MUTEX_ADAPTIVE_NP;
<anonymous>::PTHREAD_MUTEX_FAST_NP;
<anonymous>::PTHREAD_MUTEX_ERRORCHECK;
<anonymous>::PTHREAD_MUTEX_DEFAULT;
<anonymous>::PTHREAD_MUTEX_TIMED_NP;
<anonymous>::PTHREAD_MUTEX_RECURSIVE_NP;
<anonymous>::PTHREAD_MUTEX_ERRORCHECK_NP;
<anonymous>::BPF_F_USER_STACK;
<anonymous>::BPF_F_SKIP_FIELD_MASK;
<anonymous>::BPF_F_REUSE_STACKID;
<anonymous>::BPF_F_USER_BUILD_ID;
<anonymous>::BPF_F_FAST_STACK_CMP;
<anonymous>::PTHREAD_PRIO_NONE;
<anonymous>::PTHREAD_PRIO_PROTECT;
<anonymous>::PTHREAD_PRIO_INHERIT;
<anonymous>::BPF_F_ADJ_ROOM_ENCAP_L4_UDP;
<anonymous>::BPF_F_ADJ_ROOM_ENCAP_L4_GRE;
<anonymous>::BPF_F_ADJ_ROOM_ENCAP_L2_ETH;
<anonymous>::BPF_F_ADJ_ROOM_NO_CSUM_RESET;
<anonymous>::BPF_F_ADJ_ROOM_ENCAP_L3_IPV4;
<anonymous>::BPF_F_ADJ_ROOM_FIXED_GSO;
<anonymous>::BPF_F_ADJ_ROOM_ENCAP_L3_IPV6;
<anonymous>::SHUT_RDWR;
<anonymous>::SHUT_RD;
<anonymous>::SHUT_WR;
<anonymous>::BPF_LOAD_HDR_OPT_TCP_SYN;
<anonymous>::PTHREAD_PROCESS_PRIVATE;
<anonymous>::PTHREAD_PROCESS_SHARED;
<anonymous>::BPF_RINGBUF_BUSY_BIT;
<anonymous>::BPF_RINGBUF_DISCARD_BIT;
<anonymous>::BPF_RINGBUF_HDR_SZ;
<anonymous>::SIGEV_THREAD_ID;
<anonymous>::SIGEV_THREAD;
<anonymous>::SIGEV_SIGNAL;
<anonymous>::SIGEV_NONE;
sk_action;
sk_action::SK_DROP;
sk_action::SK_PASS;
bpf_check_mtu_ret;
bpf_check_mtu_ret::BPF_MTU_CHK_RET_SEGS_TOOBIG;
bpf_check_mtu_ret::BPF_MTU_CHK_RET_SUCCESS;
bpf_check_mtu_ret::BPF_MTU_CHK_RET_FRAG_NEEDED;
<anonymous>::DT_BLK;
<anonymous>::DT_CHR;
<anonymous>::DT_REG;
<anonymous>::DT_DIR;
<anonymous>::DT_UNKNOWN;
<anonymous>::DT_SOCK;
<anonymous>::DT_WHT;
<anonymous>::DT_FIFO;
<anonymous>::DT_LNK;
<anonymous>::BPF_F_TUNINFO_IPV6;
bpf_lwt_encap_mode;
bpf_lwt_encap_mode::BPF_LWT_ENCAP_SEG6_INLINE;
bpf_lwt_encap_mode::BPF_LWT_ENCAP_SEG6;
bpf_lwt_encap_mode::BPF_LWT_ENCAP_IP;
xdp_action;
xdp_action::XDP_DROP;
xdp_action::XDP_PASS;
xdp_action::XDP_TX;
xdp_action::XDP_ABORTED;
xdp_action::XDP_REDIRECT;
<anonymous>::BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL;
<anonymous>::BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG;
<anonymous>::BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP;
<anonymous>::BPF_RB_AVAIL_DATA;
<anonymous>::BPF_RB_PROD_POS;
<anonymous>::BPF_RB_RING_SIZE;
<anonymous>::BPF_RB_CONS_POS;
__rusage_who;
__rusage_who::RUSAGE_SELF;
__rusage_who::RUSAGE_THREAD;
__rusage_who::RUSAGE_CHILDREN;
<anonymous>::CT_LOG_ENTRY_TYPE_NOT_SET;
<anonymous>::CT_LOG_ENTRY_TYPE_PRECERT;
<anonymous>::CT_LOG_ENTRY_TYPE_X509;
bpf_adj_room_mode;
bpf_adj_room_mode::BPF_ADJ_ROOM_MAC;
bpf_adj_room_mode::BPF_ADJ_ROOM_NET;
<anonymous>::PTHREAD_INHERIT_SCHED;
<anonymous>::PTHREAD_EXPLICIT_SCHED;
bpf_cmd;
bpf_cmd::BPF_PROG_TEST_RUN;
bpf_cmd::BPF_PROG_ATTACH;
bpf_cmd::BPF_PROG_QUERY;
bpf_cmd::BPF_MAP_GET_FD_BY_ID;
bpf_cmd::BPF_LINK_UPDATE;
bpf_cmd::BPF_MAP_CREATE;
bpf_cmd::BPF_LINK_GET_NEXT_ID;
bpf_cmd::BPF_PROG_LOAD;
bpf_cmd::BPF_MAP_LOOKUP_BATCH;
bpf_cmd::BPF_LINK_GET_FD_BY_ID;
bpf_cmd::BPF_MAP_LOOKUP_AND_DELETE_ELEM;
bpf_cmd::BPF_PROG_DETACH;
bpf_cmd::BPF_MAP_UPDATE_BATCH;
bpf_cmd::BPF_MAP_UPDATE_ELEM;
bpf_cmd::BPF_LINK_CREATE;
bpf_cmd::BPF_BTF_GET_NEXT_ID;
bpf_cmd::BPF_ITER_CREATE;
bpf_cmd::BPF_OBJ_GET_INFO_BY_FD;
bpf_cmd::BPF_BTF_GET_FD_BY_ID;
bpf_cmd::BPF_PROG_RUN;
bpf_cmd::BPF_TASK_FD_QUERY;
bpf_cmd::BPF_MAP_DELETE_ELEM;
bpf_cmd::BPF_RAW_TRACEPOINT_OPEN;
bpf_cmd::BPF_MAP_DELETE_BATCH;
bpf_cmd::BPF_ENABLE_STATS;
bpf_cmd::BPF_LINK_DETACH;
bpf_cmd::BPF_PROG_BIND_MAP;
bpf_cmd::BPF_MAP_LOOKUP_ELEM;
bpf_cmd::BPF_OBJ_GET;
bpf_cmd::BPF_BTF_LOAD;
bpf_cmd::BPF_MAP_LOOKUP_AND_DELETE_BATCH;
bpf_cmd::BPF_MAP_FREEZE;
bpf_cmd::BPF_OBJ_PIN;
bpf_cmd::BPF_PROG_GET_NEXT_ID;
bpf_cmd::BPF_MAP_GET_NEXT_KEY;
bpf_cmd::BPF_PROG_GET_FD_BY_ID;
bpf_cmd::BPF_MAP_GET_NEXT_ID;
<anonymous>::SCT_SOURCE_X509V3_EXTENSION;
<anonymous>::SCT_SOURCE_TLS_EXTENSION;
<anonymous>::SCT_SOURCE_UNKNOWN;
<anonymous>::SCT_SOURCE_OCSP_STAPLED_RESPONSE;
<anonymous>::BPF_F_CURRENT_NETNS;
<anonymous>::PTHREAD_SCOPE_SYSTEM;
<anonymous>::PTHREAD_SCOPE_PROCESS;
<anonymous>::BPF_ADJ_ROOM_ENCAP_L2_MASK;
<anonymous>::BPF_ADJ_ROOM_ENCAP_L2_SHIFT;
<anonymous>::BPF_DEVCG_DEV_BLOCK;
<anonymous>::BPF_DEVCG_DEV_CHAR;
bpf_check_mtu_flags;
bpf_check_mtu_flags::BPF_MTU_CHK_SEGS;
bpf_hdr_start_off;
bpf_hdr_start_off::BPF_HDR_START_MAC;
bpf_hdr_start_off::BPF_HDR_START_NET;
<anonymous>::TCP_CLOSE_WAIT;
<anonymous>::TCP_LISTEN;
<anonymous>::TCP_CLOSING;
<anonymous>::TCP_FIN_WAIT1;
<anonymous>::TCP_SYN_SENT;
<anonymous>::TCP_FIN_WAIT2;
<anonymous>::TCP_LAST_ACK;
<anonymous>::TCP_TIME_WAIT;
<anonymous>::TCP_CLOSE;
<anonymous>::TCP_ESTABLISHED;
<anonymous>::TCP_SYN_RECV;
UI_string_types;
UI_string_types::UIT_NONE;
UI_string_types::UIT_BOOLEAN;
UI_string_types::UIT_PROMPT;
UI_string_types::UIT_VERIFY;
UI_string_types::UIT_ERROR;
UI_string_types::UIT_INFO;
<anonymous>::RTLD_DI_TLS_MODID;
<anonymous>::RTLD_DI_CONFIGADDR;
<anonymous>::RTLD_DI_SERINFOSIZE;
<anonymous>::RTLD_DI_PROFILENAME;
<anonymous>::RTLD_DI_MAX;
<anonymous>::RTLD_DI_LMID;
<anonymous>::RTLD_DI_ORIGIN;
<anonymous>::RTLD_DI_SERINFO;
<anonymous>::RTLD_DI_PROFILEOUT;
<anonymous>::RTLD_DI_LINKMAP;
<anonymous>::RTLD_DI_TLS_DATA;
<anonymous>::TRAP_BRANCH;
<anonymous>::TRAP_TRACE;
<anonymous>::TRAP_HWBKPT;
<anonymous>::TRAP_UNK;
<anonymous>::TRAP_BRKPT;
<anonymous>::PTHREAD_CANCEL_ASYNCHRONOUS;
<anonymous>::PTHREAD_CANCEL_DEFERRED;
<anonymous>::BPF_F_DONT_FRAGMENT;
<anonymous>::BPF_F_SEQ_NUMBER;
<anonymous>::BPF_F_ZERO_CSUM_TX;
bpf_attach_type;
bpf_attach_type::BPF_XDP;
bpf_attach_type::BPF_SK_SKB_VERDICT;
bpf_attach_type::BPF_SK_REUSEPORT_SELECT_OR_MIGRATE;
bpf_attach_type::BPF_CGROUP_INET4_POST_BIND;
bpf_attach_type::BPF_SK_SKB_STREAM_PARSER;
bpf_attach_type::BPF_CGROUP_INET6_POST_BIND;
bpf_attach_type::BPF_SK_MSG_VERDICT;
bpf_attach_type::BPF_SK_LOOKUP;
bpf_attach_type::BPF_TRACE_RAW_TP;
bpf_attach_type::BPF_CGROUP_UDP4_SENDMSG;
bpf_attach_type::BPF_LSM_MAC;
bpf_attach_type::BPF_CGROUP_UDP6_SENDMSG;
bpf_attach_type::BPF_CGROUP_DEVICE;
bpf_attach_type::BPF_CGROUP_UDP4_RECVMSG;
bpf_attach_type::BPF_CGROUP_INET4_GETSOCKNAME;
bpf_attach_type::BPF_CGROUP_UDP6_RECVMSG;
bpf_attach_type::BPF_CGROUP_INET6_GETSOCKNAME;
bpf_attach_type::BPF_TRACE_FENTRY;
bpf_attach_type::BPF_CGROUP_INET_EGRESS;
bpf_attach_type::BPF_XDP_DEVMAP;
bpf_attach_type::BPF_TRACE_FEXIT;
bpf_attach_type::BPF_CGROUP_INET4_BIND;
bpf_attach_type::BPF_CGROUP_SOCK_OPS;
bpf_attach_type::BPF_CGROUP_INET6_BIND;
bpf_attach_type::BPF_CGROUP_SYSCTL;
bpf_attach_type::BPF_CGROUP_GETSOCKOPT;
bpf_attach_type::BPF_CGROUP_INET_SOCK_RELEASE;
bpf_attach_type::BPF_XDP_CPUMAP;
bpf_attach_type::BPF_SK_SKB_STREAM_VERDICT;
bpf_attach_type::BPF_CGROUP_INET_INGRESS;
bpf_attach_type::__MAX_BPF_ATTACH_TYPE;
bpf_attach_type::BPF_CGROUP_INET4_CONNECT;
bpf_attach_type::BPF_PERF_EVENT;
bpf_attach_type::BPF_CGROUP_SETSOCKOPT;
bpf_attach_type::BPF_CGROUP_INET6_CONNECT;
bpf_attach_type::BPF_LIRC_MODE2;
bpf_attach_type::BPF_CGROUP_INET_SOCK_CREATE;
bpf_attach_type::BPF_TRACE_ITER;
bpf_attach_type::BPF_CGROUP_INET6_GETPEERNAME;
bpf_attach_type::BPF_CGROUP_INET4_GETPEERNAME;
bpf_attach_type::BPF_SK_REUSEPORT_SELECT;
bpf_attach_type::BPF_FLOW_DISSECTOR;
bpf_attach_type::BPF_MODIFY_RETURN;
<anonymous>::SSL_CT_VALIDATION_PERMISSIVE;
<anonymous>::SSL_CT_VALIDATION_STRICT;
<anonymous>::BPF_RB_NO_WAKEUP;
<anonymous>::BPF_RB_FORCE_WAKEUP;
<anonymous>::IPPORT_NETSTAT;
<anonymous>::IPPORT_SMTP;
<anonymous>::IPPORT_WHOSERVER;
<anonymous>::IPPORT_TIMESERVER;
<anonymous>::IPPORT_ROUTESERVER;
<anonymous>::IPPORT_CMDSERVER;
<anonymous>::IPPORT_TELNET;
<anonymous>::IPPORT_DAYTIME;
<anonymous>::IPPORT_LOGINSERVER;
<anonymous>::IPPORT_EXECSERVER;
<anonymous>::IPPORT_TFTP;
<anonymous>::IPPORT_ECHO;
<anonymous>::IPPORT_BIFFUDP;
<anonymous>::IPPORT_RJE;
<anonymous>::IPPORT_SYSTAT;
<anonymous>::IPPORT_FTP;
<anonymous>::IPPORT_WHOIS;
<anonymous>::IPPORT_TTYLINK;
<anonymous>::IPPORT_MTP;
<anonymous>::IPPORT_EFSSERVER;
<anonymous>::IPPORT_NAMESERVER;
<anonymous>::IPPORT_DISCARD;
<anonymous>::IPPORT_FINGER;
<anonymous>::IPPORT_USERRESERVED;
<anonymous>::IPPORT_RESERVED;
<anonymous>::IPPORT_SUPDUP;
<anonymous>::POINT_CONVERSION_HYBRID;
<anonymous>::POINT_CONVERSION_COMPRESSED;
<anonymous>::POINT_CONVERSION_UNCOMPRESSED;
<anonymous>::SCM_CREDENTIALS;
<anonymous>::SCM_RIGHTS;
<anonymous>::BPF_FIB_LKUP_RET_FRAG_NEEDED;
<anonymous>::BPF_FIB_LKUP_RET_BLACKHOLE;
<anonymous>::BPF_FIB_LKUP_RET_NO_NEIGH;
<anonymous>::BPF_FIB_LKUP_RET_FWD_DISABLED;
<anonymous>::BPF_FIB_LKUP_RET_SUCCESS;
<anonymous>::BPF_FIB_LKUP_RET_UNREACHABLE;
<anonymous>::BPF_FIB_LKUP_RET_NOT_FWDED;
<anonymous>::BPF_FIB_LKUP_RET_PROHIBIT;
<anonymous>::BPF_FIB_LKUP_RET_UNSUPP_LWT;
<anonymous>::EFD_CLOEXEC;
<anonymous>::EFD_SEMAPHORE;
<anonymous>::EFD_NONBLOCK;
<anonymous>::BPF_F_MARK_ENFORCE;
<anonymous>::BPF_F_PSEUDO_HDR;
<anonymous>::BPF_F_MARK_MANGLED_0;
__itimer_which;
__itimer_which::ITIMER_VIRTUAL;
__itimer_which::ITIMER_PROF;
__itimer_which::ITIMER_REAL;
<anonymous>::_CS_PATH;
<anonymous>::_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFF32_CFLAGS;
<anonymous>::_CS_POSIX_V7_LP64_OFF64_CFLAGS;
<anonymous>::_CS_LFS64_LIBS;
<anonymous>::_CS_LFS64_CFLAGS;
<anonymous>::_CS_XBS5_ILP32_OFFBIG_LIBS;
<anonymous>::_CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
<anonymous>::_CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFF32_LDFLAGS;
<anonymous>::_CS_XBS5_ILP32_OFFBIG_CFLAGS;
<anonymous>::_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
<anonymous>::_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS;
<anonymous>::_CS_POSIX_V7_LP64_OFF64_LINTFLAGS;
<anonymous>::_CS_GNU_LIBPTHREAD_VERSION;
<anonymous>::_CS_XBS5_ILP32_OFF32_LIBS;
<anonymous>::_CS_XBS5_LP64_OFF64_LIBS;
<anonymous>::_CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
<anonymous>::_CS_XBS5_LP64_OFF64_CFLAGS;
<anonymous>::_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFFBIG_LIBS;
<anonymous>::_CS_V6_WIDTH_RESTRICTED_ENVS;
<anonymous>::_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS;
<anonymous>::_CS_GNU_LIBC_VERSION;
<anonymous>::_CS_LFS64_LDFLAGS;
<anonymous>::_CS_XBS5_ILP32_OFF32_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFF32_LIBS;
<anonymous>::_CS_POSIX_V6_LP64_OFF64_LIBS;
<anonymous>::_CS_POSIX_V7_LP64_OFF64_LIBS;
<anonymous>::_CS_LFS64_LINTFLAGS;
<anonymous>::_CS_XBS5_ILP32_OFFBIG_LDFLAGS;
<anonymous>::_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
<anonymous>::_CS_V6_ENV;
<anonymous>::_CS_POSIX_V6_LP64_OFF64_CFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS;
<anonymous>::_CS_V7_ENV;
<anonymous>::_CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS;
<anonymous>::_CS_LFS_LDFLAGS;
<anonymous>::_CS_POSIX_V7_LPBIG_OFFBIG_LIBS;
<anonymous>::_CS_POSIX_V7_LP64_OFF64_LDFLAGS;
<anonymous>::_CS_XBS5_LP64_OFF64_LDFLAGS;
<anonymous>::_CS_LFS_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS;
<anonymous>::_CS_LFS_LIBS;
<anonymous>::_CS_XBS5_LP64_OFF64_LINTFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFF32_LIBS;
<anonymous>::_CS_LFS_CFLAGS;
<anonymous>::_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS;
<anonymous>::_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS;
<anonymous>::_CS_POSIX_V7_ILP32_OFF32_CFLAGS;
<anonymous>::_CS_XBS5_ILP32_OFF32_CFLAGS;
<anonymous>::_CS_V5_WIDTH_RESTRICTED_ENVS;
<anonymous>::_CS_POSIX_V7_ILP32_OFFBIG_LIBS;
<anonymous>::_CS_V7_WIDTH_RESTRICTED_ENVS;
<anonymous>::_CS_POSIX_V6_LP64_OFF64_LDFLAGS;
<anonymous>::_CS_XBS5_LPBIG_OFFBIG_LIBS;
<anonymous>::_CS_XBS5_ILP32_OFF32_LDFLAGS;
<anonymous>::_CS_POSIX_V6_LP64_OFF64_LINTFLAGS;
<anonymous>::_CS_XBS5_LPBIG_OFFBIG_CFLAGS;
<anonymous>::BPF_F_GET_BRANCH_RECORDS_SIZE;
<anonymous>::IPPROTO_FRAGMENT;
<anonymous>::IPPROTO_ICMPV6;
<anonymous>::IPPROTO_MH;
<anonymous>::IPPROTO_ROUTING;
<anonymous>::IPPROTO_HOPOPTS;
<anonymous>::IPPROTO_NONE;
<anonymous>::IPPROTO_DSTOPTS;
<anonymous>::BPF_NOEXIST;
<anonymous>::BPF_EXIST;
<anonymous>::BPF_F_LOCK;
<anonymous>::BPF_ANY;
bpf_link_type;
bpf_link_type::BPF_LINK_TYPE_XDP;
bpf_link_type::BPF_LINK_TYPE_UNSPEC;
bpf_link_type::BPF_LINK_TYPE_PERF_EVENT;
bpf_link_type::BPF_LINK_TYPE_CGROUP;
bpf_link_type::BPF_LINK_TYPE_RAW_TRACEPOINT;
bpf_link_type::BPF_LINK_TYPE_ITER;
bpf_link_type::MAX_BPF_LINK_TYPE;
bpf_link_type::BPF_LINK_TYPE_TRACING;
bpf_link_type::BPF_LINK_TYPE_NETNS;
<anonymous>::IPPROTO_PUP;
<anonymous>::IPPROTO_UDPLITE;
<anonymous>::IPPROTO_BEETPH;
<anonymous>::IPPROTO_SCTP;
<anonymous>::IPPROTO_MPLS;
<anonymous>::IPPROTO_IDP;
<anonymous>::IPPROTO_GRE;
<anonymous>::IPPROTO_ETHERNET;
<anonymous>::IPPROTO_TP;
<anonymous>::IPPROTO_MPTCP;
<anonymous>::IPPROTO_ICMP;
<anonymous>::IPPROTO_UDP;
<anonymous>::IPPROTO_AH;
<anonymous>::IPPROTO_IGMP;
<anonymous>::IPPROTO_COMP;
<anonymous>::IPPROTO_MTP;
<anonymous>::IPPROTO_IPIP;
<anonymous>::IPPROTO_IP;
<anonymous>::IPPROTO_DCCP;
<anonymous>::IPPROTO_EGP;
<anonymous>::IPPROTO_IPV6;
<anonymous>::IPPROTO_PIM;
<anonymous>::IPPROTO_TCP;
<anonymous>::IPPROTO_ENCAP;
<anonymous>::IPPROTO_ESP;
<anonymous>::IPPROTO_RAW;
<anonymous>::IPPROTO_RSVP;
<anonymous>::IPPROTO_MAX;
<anonymous>::SS_ONSTACK;
<anonymous>::SS_DISABLE;
<anonymous>::SCT_VERSION_V1;
<anonymous>::SCT_VERSION_NOT_SET;
__rlimit_resource;
__rlimit_resource::__RLIMIT_RTTIME;
__rlimit_resource::RLIMIT_AS;
__rlimit_resource::RLIMIT_STACK;
__rlimit_resource::__RLIMIT_RSS;
__rlimit_resource::RLIMIT_DATA;
__rlimit_resource::__RLIMIT_LOCKS;
__rlimit_resource::RLIMIT_NOFILE;
__rlimit_resource::__RLIMIT_NICE;
__rlimit_resource::__RLIMIT_RTPRIO;
__rlimit_resource::__RLIMIT_NPROC;
__rlimit_resource::RLIMIT_FSIZE;
__rlimit_resource::__RLIM_NLIMITS;
__rlimit_resource::__RLIMIT_NLIMITS;
__rlimit_resource::__RLIMIT_SIGPENDING;
__rlimit_resource::__RLIMIT_MEMLOCK;
__rlimit_resource::RLIMIT_CPU;
__rlimit_resource::RLIMIT_CORE;
__rlimit_resource::__RLIMIT_MSGQUEUE;
__rlimit_resource::__RLIMIT_OFILE;
<anonymous>::BPF_F_HDR_FIELD_MASK;
<anonymous>::CLD_DUMPED;
<anonymous>::CLD_TRAPPED;
<anonymous>::CLD_STOPPED;
<anonymous>::CLD_EXITED;
<anonymous>::CLD_KILLED;
<anonymous>::CLD_CONTINUED;
<anonymous>::BUS_MCEERR_AO;
<anonymous>::BUS_ADRERR;
<anonymous>::BUS_MCEERR_AR;
<anonymous>::BUS_ADRALN;
<anonymous>::BUS_OBJERR;
OPENSSL_LH_COMPFUNC;
OSSL_FUNC_provider_unquery_operation_fn;
uint;
__u8;
ASN1_SCTX;
EVP_PKEY;
__intmax_t;
sk_OCSP_SINGLERESP_freefunc;
ENGINE_SSL_CLIENT_CERT_PTR;
OCSP_REVOKEDINFO;
OSSL_FUNC_mac_set_ctx_params_fn;
__s16;
OSSL_ALGORITHM;
__kernel_caddr_t;
__uint_least64_t;
cookie_seek_function_t;
gz_headerp;
BUF_MEM;
DSA_SIG;
OSSL_FUNC_signature_verify_recover_init_fn;
sk_SRTP_PROTECTION_PROFILE_compfunc;
uint_fast32_t;
COMP_CTX;
sk_SSL_CIPHER_copyfunc;
X509V3_EXT_METHOD;
RSA;
OPENSSL_LHASH;
cap_user_data_t;
__sum16;
EVP_KDF;
__kernel_mqd_t;
OSSL_FUNC_keyexch_freectx_fn;
X509_STORE_CTX_verify_cb;
sk_ACCESS_DESCRIPTION_copyfunc;
OSSL_FUNC_cipher_decrypt_init_fn;
sk_PKCS7_SIGNER_INFO_compfunc;
sk_X509_INFO_copyfunc;
OBJ_NAME;
ASIdentifierChoice;
error_t;
OPENSSL_LH_NODE;
NAMING_AUTHORITY;
ASN1_VISIBLESTRING;
int32_t;
uLongf;
BIO_ADDRINFO;
__int_least16_t;
OSSL_FUNC_cipher_gettable_ctx_params_fn;
OSSL_FUNC_encoder_get_params_fn;
IPAddressOrRanges;
OSSL_FUNC_provider_up_ref_fn;
OSSL_FUNC_kem_freectx_fn;
gz_header;
X509V3_EXT_D2I;
OSSL_FUNC_keymgmt_dup_fn;
sk_OCSP_SINGLERESP_copyfunc;
OSSL_thread_stop_handler_fn;
__fpos_t;
OSSL_FUNC_digest_dupctx_fn;
tls_session_ticket_ext_cb_fn;
__int64_t;
OSSL_PROVIDER;
ISSUING_DIST_POINT;
custom_ext_parse_cb;
eventfd_t;
OSSL_FUNC_signature_sign_init_fn;
OSSL_FUNC_rand_newctx_fn;
SCRYPT_PARAMS;
sigset_t;
asn1_ps_func;
CTLOG;
sig_atomic_t;
OSSL_FUNC_core_obj_create_fn;
OSSL_FUNC_kdf_get_ctx_params_fn;
sk_PROFESSION_INFO_compfunc;
i2d_of_void;
dynamic_fns;
X509_STORE_CTX_lookup_certs_fn;
EVP_KEYEXCH;
sk_ASIdOrRange_copyfunc;
OSSL_FUNC_rand_verify_zeroization_fn;
sk_GENERAL_SUBTREE_compfunc;
OSSL_FUNC_signature_digest_verify_init_fn;
sk_X509_REVOKED_copyfunc;
EVP_PKEY_CTX;
X509_ATTRIBUTE;
OSSL_CORE_BIO;
ENGINE_CTRL_FUNC_PTR;
ASN1_TEMPLATE;
sk_POLICYQUALINFO_freefunc;
OSSL_FUNC_CRYPTO_secure_free_fn;
id_t;
caddr_t;
DSA;
__uint64_t;
__gid_t;
comparison_fn_t;
GENERAL_SUBTREE;
OSSL_FUNC_cipher_final_fn;
OSSL_FUNC_keymgmt_set_params_fn;
SSL_psk_find_session_cb_func;
__kernel_gid32_t;
sct_version_t;
sk_X509_freefunc;
__tss_t;
__size_t;
sk_ASN1_STRING_TABLE_copyfunc;
sk_X509_NAME_ENTRY_copyfunc;
sk_OCSP_ONEREQ_freefunc;
OSSL_FUNC_keymgmt_export_fn;
pcre32_jit_callback;
ENGINE_CMD_DEFN;
int16_t;
lh_ERR_STRING_DATA_compfunc;
rlim64_t;
OSSL_FUNC_keymgmt_load_fn;
OSSL_FUNC_encoder_does_selection_fn;
OSSL_FUNC_signature_set_ctx_md_params_fn;
epoll_data_t;
sk_X509_ATTRIBUTE_copyfunc;
sk_ASN1_STRING_TABLE_compfunc;
sk_OCSP_ONEREQ_compfunc;
sk_IPAddressOrRange_freefunc;
ENGINE_GEN_INT_FUNC_PTR;
sk_GENERAL_NAMES_freefunc;
__kernel_clock_t;
OSSL_FUNC_mac_update_fn;
sk_ASIdOrRange_freefunc;
__int16_t;
OSSL_FUNC_provider_get_capabilities_fn;
OSSL_FUNC_core_set_error_mark_fn;
X509_LOOKUP_TYPE;
__kernel_ptrdiff_t;
OSSL_FUNC_signature_digest_sign_fn;
__gwchar_t;
__int8_t;
ADMISSIONS;
__pid_t;
sk_X509_INFO_freefunc;
OCSP_CERTID;
__be64;
dev_t;
OSSL_FUNC_core_thread_start_fn;
ossl_uintmax_t;
uint_fast16_t;
size_t;
__s8;
__kernel_long_t;
OSSL_FUNC_get_nonce_fn;
X509_STORE_CTX_check_revocation_fn;
SSL_psk_client_cb_func;
__sig_atomic_t;
CRYPTO_realloc_fn;
uint_least64_t;
custom_ext_add_cb;
IPAddressChoice;
int_fast32_t;
OSSL_LIB_CTX;
SSL_CIPHER;
X509V3_EXT_FREE;
pem_password_cb;
X509V3_EXT_V2I;
sk_IPAddressFamily_copyfunc;
SSL_psk_use_session_cb_func;
OSSL_FUNC_signature_digest_sign_update_fn;
OSSL_HTTP_bio_cb_t;
sk_SRTP_PROTECTION_PROFILE_freefunc;
pcre32;
uint_least32_t;
dynamic_MEM_fns;
__cfloat128;
fsid_t;
sk_PKCS7_RECIP_INFO_compfunc;
sk_DIST_POINT_copyfunc;
u_quad_t;
EVP_SIGNATURE;
__kernel_old_uid_t;
BIO_ADDR;
EVP_KEYMGMT;
FILE;
OPENSSL_sk_copyfunc;
OCSP_SIGNATURE;
sk_X509_NAME_copyfunc;
__kernel_old_gid_t;
__blksize_t;
fsfilcnt64_t;
X509_CINF;
OSSL_FUNC_mac_settable_ctx_params_fn;
tls_session_secret_cb_fn;
DH_METHOD;
OSSL_FUNC_keymgmt_export_types_fn;
OSSL_FUNC_digest_get_ctx_params_fn;
OSSL_FUNC_asym_cipher_encrypt_fn;
sk_OPENSSL_STRING_compfunc;
X509_SIG;
__s64;
OSSL_FUNC_provider_get0_dispatch_fn;
sk_X509_VERIFY_PARAM_freefunc;
OSSL_FUNC_cleanup_entropy_fn;
X509;
BN_RECP_CTX;
ASN1_T61STRING;
OCSP_RESPID;
X509_CRL_INFO;
X509_LOOKUP_ctrl_fn;
EVP_PBE_KEYGEN;
sk_X509_TRUST_compfunc;
sk_X509_ATTRIBUTE_compfunc;
lh_CONF_VALUE_compfunc;
OSSL_FUNC_rand_settable_ctx_params_fn;
X509V3_EXT_I2D;
OSSL_HTTP_REQ_CTX;
intptr_t;
OPENSSL_sk_compfunc;
OSSL_FUNC_core_set_error_debug_fn;
PBEPARAM;
CRYPTO_free_fn;
__fd_mask;
SSL_SESSION;
sk_UI_STRING_copyfunc;
OSSL_FUNC_signature_settable_ctx_params_fn;
BN_BLINDING;
EVP_CIPHER_CTX;
OSSL_FUNC_keyexch_set_ctx_params_fn;
lh_ERR_STRING_DATA_hashfunc;
sk_X509_LOOKUP_compfunc;
OSSL_FUNC_rand_generate_fn;
OSSL_FUNC_kdf_derive_fn;
ERR_STRING_DATA;
__fsword_t;
int_least8_t;
sa_family_t;
__int_least64_t;
bio_info_cb;
OSSL_provider_init_fn;
X509_STORE_CTX_check_policy_fn;
__jmp_buf;
SSL_client_hello_cb_fn;
OSSL_ENCODER_CTX;
sk_ADMISSIONS_compfunc;
__quad_t;
cookie_close_function_t;
_Float64;
sk_SSL_COMP_freefunc;
ossl_intmax_t;
dyn_MEM_realloc_fn;
BIGNUM;
__fpos64_t;
uintmax_t;
OSSL_FUNC_BIO_new_membuf_fn;
sk_SXNETID_copyfunc;
voidpf;
ASN1_BOOLEAN;
charf;
sk_X509_TRUST_copyfunc;
EC_POINT;
ASN1_INTEGER;
in_func;
OSSL_FUNC_mac_gettable_params_fn;
cap_user_header_t;
OSSL_FUNC_kdf_reset_fn;
CT_POLICY_EVAL_CTX;
__kernel_time_t;
BASIC_CONSTRAINTS;
sk_ASN1_GENERALSTRING_copyfunc;
SHA_CTX;
SHA256_CTX;
fsblkcnt64_t;
OSSL_FUNC_kem_decapsulate_init_fn;
gid_t;
OSSL_FUNC_kem_dupctx_fn;
COMP_METHOD;
X509_ALGOR;
sk_X509_CRL_freefunc;
sk_SSL_CIPHER_freefunc;
ENGINE_GEN_FUNC_PTR;
OSSL_FUNC_asym_cipher_newctx_fn;
sk_IPAddressOrRange_copyfunc;
SXNET;
nlink_t;
sk_X509_INFO_compfunc;
ino_t;
__intptr_t;
sk_ASN1_INTEGER_copyfunc;
OSSL_FUNC_provider_self_test_fn;
uint_least16_t;
OCSP_RESPDATA;
OSSL_DECODER;
CRYPTO_THREAD_LOCAL;
__ssize_t;
RAND_METHOD;
OSSL_FUNC_mac_newctx_fn;
SSL_CTX_decrypt_session_ticket_fn;
__kernel_suseconds_t;
CONF_IMODULE;
sk_CONF_VALUE_freefunc;
BN_MONT_CTX;
Byte;
TLS_FEATURE;
lh_OPENSSL_STRING_hashfunc;
sk_OCSP_RESPID_freefunc;
ASN1_VALUE;
sk_OPENSSL_BLOCK_compfunc;
TLS_SESSION_TICKET_EXT;
int_least32_t;
lh_OPENSSL_CSTRING_doallfunc;
EC_KEY_METHOD;
X509_TRUST;
EVP_ENCODE_CTX;
sk_SSL_CIPHER_compfunc;
OSSL_CALLBACK;
uint_fast8_t;
BN_GENCB;
sk_PKCS7_SIGNER_INFO_freefunc;
uint_least8_t;
X509_NAME_ENTRY;
sk_SCT_freefunc;
sk_SCT_copyfunc;
alloc_func;
OSSL_FUNC_kdf_gettable_ctx_params_fn;
DIST_POINT_NAME;
__kernel_uid16_t;
__caddr_t;
EVP_PBE_KEYGEN_EX;
PKCS8_PRIV_KEY_INFO;
OSSL_FUNC_keymgmt_new_fn;
sk_X509V3_EXT_METHOD_compfunc;
EVP_KEM;
sk_POLICYINFO_copyfunc;
OPENSSL_CSTRING;
POLICY_MAPPING;
OSSL_FUNC_digest_update_fn;
quad_t;
CRL_DIST_POINTS;
sk_OCSP_CERTID_compfunc;
sk_OCSP_RESPID_copyfunc;
OSSL_FUNC_cipher_get_ctx_params_fn;
ASN1_PCTX;
__timer_t;
OSSL_FUNC_signature_newctx_fn;
OSSL_FUNC_core_vset_error_fn;
OSSL_FUNC_keymgmt_import_fn;
_Float32x;
__u16;
register_t;
OSSL_ENCODER;
blkcnt_t;
__compar_d_fn_t;
OSSL_FUNC_BIO_gets_fn;
X509_POLICY_NODE;
OSSL_FUNC_asym_cipher_encrypt_init_fn;
sk_CTLOG_copyfunc;
POLICYQUALINFO;
X509_STORE_CTX_lookup_crls_fn;
OSSL_FUNC_rand_lock_fn;
NAME_CONSTRAINTS;
OSSL_FUNC_decoder_gettable_params_fn;
cookie_write_function_t;
X509_POLICY_TREE;
__fsblkcnt64_t;
__u64;
EVP_CIPHER_INFO;
int64_t;
OSSL_FUNC_get_entropy_fn;
OSSL_FUNC_kdf_settable_ctx_params_fn;
__FILE;
__key_t;
sk_GENERAL_NAME_copyfunc;
IPAddressRange;
sk_X509_PURPOSE_freefunc;
sk_X509_ATTRIBUTE_freefunc;
BIO_info_cb;
SSL_METHOD;
X509_STORE_CTX_cleanup_fn;
OSSL_FUNC_keymgmt_has_fn;
OSSL_FUNC_mac_dupctx_fn;
sk_ASN1_STRING_freefunc;
CONF;
SRTP_PROTECTION_PROFILE;
BIO_callback_fn_ex;
BIO_dgram_sctp_notification_handler_fn;
ASN1_ITEM_EXP;
tcp_seq;
X509_PUBKEY;
OSSL_FUNC_signature_digest_verify_update_fn;
clock_t;
OSSL_FUNC_asym_cipher_dupctx_fn;
OSSL_FUNC_rand_get_params_fn;
OSSL_FUNC_rand_reseed_fn;
OSSL_FUNC_core_obj_add_sigid_fn;
OSSL_FUNC_CRYPTO_clear_free_fn;
sk_X509_CRL_copyfunc;
z_size_t;
OSSL_FUNC_core_get_libctx_fn;
__rlim64_t;
pthread_once_t;
OSSL_FUNC_asym_cipher_decrypt_init_fn;
EVP_ASYM_CIPHER;
CRYPTO_EX_free;
ECPARAMETERS;
OSSL_FUNC_digest_settable_ctx_params_fn;
PKCS7_ENC_CONTENT;
X509V3_EXT_NEW;
POLICY_MAPPINGS;
OSSL_FUNC_encoder_gettable_params_fn;
sk_GENERAL_NAME_freefunc;
OCSP_RESPBYTES;
ADMISSION_SYNTAX;
OSSL_FUNC_decoder_set_ctx_params_fn;
sct_validation_status_t;
POLICYINFO;
voidp;
sk_X509_POLICY_NODE_compfunc;
OSSL_FUNC_keymgmt_query_operation_name_fn;
fpos64_t;
OSSL_STORE_SEARCH;
ASYNC_callback_fn;
OSSL_FUNC_cipher_cipher_fn;
OCSP_SERVICELOC;
BIO;
sct_source_t;
OSSL_FUNC_BIO_read_ex_fn;
OPENSSL_STACK;
sk_BIO_copyfunc;
sk_X509_OBJECT_compfunc;
uInt;
OSSL_FUNC_rand_instantiate_fn;
OSSL_FUNC_encoder_import_object_fn;
OSSL_FUNC_signature_sign_fn;
PKCS7_SIGNED;
fsblkcnt_t;
PKCS7;
SSL_CTX_npn_select_cb_func;
OTHERNAME;
SHA512_CTX;
CRYPTO_EX_dup;
fpregset_t;
sk_IPAddressFamily_compfunc;
__off64_t;
pcre;
SSL_CTX_keylog_cb_func;
ASN1_OBJECT;
ENGINE_PKEY_ASN1_METHS_PTR;
OSSL_DECODER_CTX;
NETSCAPE_SPKI;
OSSL_FUNC_digest_gettable_params_fn;
custom_ext_free_cb;
OSSL_FUNC_CRYPTO_realloc_fn;
OSSL_FUNC_encoder_freectx_fn;
__int_least32_t;
PKCS7_DIGEST;
sk_OPENSSL_CSTRING_compfunc;
OSSL_FUNC_provider_teardown_fn;
__rlim_t;
Lmid_t;
OSSL_FUNC_asym_cipher_decrypt_fn;
sk_ASN1_UTF8STRING_copyfunc;
__fsfilcnt_t;
OSSL_FUNC_cleanup_nonce_fn;
X509_REQ;
OSSL_FUNC_asym_cipher_set_ctx_params_fn;
OSSL_FUNC_signature_dupctx_fn;
int_least64_t;
X509_POLICY_LEVEL;
dynamic_bind_engine;
u_char;
SSL_custom_ext_add_cb_ex;
gregset_t;
conf_finish_func;
OSSL_FUNC_digest_gettable_ctx_params_fn;
sk_OPENSSL_CSTRING_copyfunc;
SSL_CONF_CTX;
OSSL_FUNC_signature_verify_recover_fn;
OSSL_FUNC_decoder_settable_ctx_params_fn;
__cpu_mask;
__poll_t;
sk_OPENSSL_BLOCK_copyfunc;
OPENSSL_CORE_CTX;
ECDSA_SIG;
__kernel_old_time_t;
PROFESSION_INFO;
RSA_METHOD;
X509_STORE_CTX_get_issuer_fn;
OCSP_REQ_CTX;
X509_STORE_CTX_cert_crl_fn;
X509_PKEY;
ASN1_TLC;
_Float64x;
__kernel_ipc_pid_t;
dynamic_v_check_fn;
__ino_t;
OSSL_FUNC_OPENSSL_cleanse_fn;
OSSL_FUNC_rand_get_seed_fn;
SSL_CTX_alpn_select_cb_func;
off64_t;
sk_GENERAL_NAMES_copyfunc;
OSSL_FUNC_signature_freectx_fn;
OSSL_FUNC_cipher_set_ctx_params_fn;
u_int32_t;
OSSL_FUNC_signature_settable_ctx_md_params_fn;
intmax_t;
sk_void_copyfunc;
sk_X509_LOOKUP_freefunc;
uint64_t;
SSL_custom_ext_free_cb_ex;
OPENSSL_STRING;
sk_ASN1_GENERALSTRING_freefunc;
OSSL_FUNC_keyexch_gettable_ctx_params_fn;
timer_t;
ssl_ct_validation_cb;
OSSL_FUNC_provider_get0_provider_ctx_fn;
__kernel_off_t;
OSSL_PARAM;
locale_t;
clockid_t;
OSSL_FUNC_mac_init_fn;
OSSL_FUNC_cipher_dupctx_fn;
SSL_psk_server_cb_func;
ASN1_TYPE;
ASYNC_JOB;
__uint_least8_t;
__be32;
pcre_jit_callback;
X509_LOOKUP_get_by_subject_fn;
sighandler_t;
OSSL_FUNC_BIO_vprintf_fn;
sk_ASN1_STRING_copyfunc;
UI;
mode_t;
lh_OPENSSL_STRING_compfunc;
OPENSSL_LH_DOALL_FUNC;
OSSL_FUNC_store_load_fn;
ASRange;
OCSP_REQUEST;
__pthread_slist_t;
EVP_PKEY_METHOD;
z_crc_t;
OSSL_FUNC_kdf_gettable_params_fn;
uintptr_t;
u_int;
__id_t;
sk_ASN1_OBJECT_freefunc;
X509_NAME;
sk_BIO_compfunc;
sk_void_freefunc;
SSL;
ASN1_OCTET_STRING;
OSSL_FUNC_kem_decapsulate_fn;
pcre16;
DTLS_timer_cb;
out_func;
ssl_crock_st;
X509_CRL_METHOD;
BIO_METHOD;
OSSL_FUNC_core_gettable_params_fn;
OSSL_FUNC_kem_settable_ctx_params_fn;
sk_OPENSSL_CSTRING_freefunc;
OSSL_FUNC_keyexch_dupctx_fn;
fpos_t;
sk_PKCS7_RECIP_INFO_freefunc;
CRYPTO_EX_DATA;
OSSL_FUNC_kem_encapsulate_fn;
__gnuc_va_list;
OSSL_FUNC_self_test_cb_fn;
OSSL_FUNC_rand_enable_locking_fn;
OCSP_RESPONSE;
lh_OPENSSL_CSTRING_compfunc;
ASN1_GENERALSTRING;
sk_OCSP_ONEREQ_copyfunc;
sk_POLICY_MAPPING_copyfunc;
X509_STORE_CTX_check_issued_fn;
X509_LOOKUP_get_by_subject_ex_fn;
sk_PKCS7_compfunc;
__mode_t;
OSSL_FUNC_keyexch_derive_fn;
ASN1_GENERALIZEDTIME;
pid_t;
ASIdOrRange;
sk_CTLOG_freefunc;
X509V3_EXT_I2R;
off_t;
EVP_CIPHER;
OSSL_FUNC_rand_unlock_fn;
OSSL_FUNC_CRYPTO_clear_realloc_fn;
__sighandler_t;
OSSL_FUNC_rand_set_ctx_params_fn;
__kernel_time64_t;
OSSL_FUNC_keymgmt_validate_fn;
OSSL_FUNC_decoder_does_selection_fn;
sk_ADMISSIONS_copyfunc;
uint16_t;
sk_DIST_POINT_freefunc;
OSSL_FUNC_provider_query_operation_fn;
pthread_t;
OSSL_FUNC_signature_verify_init_fn;
OSSL_FUNC_signature_get_ctx_params_fn;
sk_POLICYINFO_freefunc;
X509_LOOKUP;
OSSL_FUNC_asym_cipher_settable_ctx_params_fn;
OSSL_FUNC_BIO_new_file_fn;
SSL_CTX;
OSSL_FUNC_signature_digest_verify_final_fn;
sk_X509_REVOKED_compfunc;
X509_VERIFY_PARAM;
CTLOG_STORE;
NOTICEREF;
OSSL_FUNC_BIO_ctrl_fn;
OPENSSL_LH_HASHFUNC;
sk_X509_OBJECT_copyfunc;
X509_POLICY_CACHE;
OSSL_FUNC_rand_get_ctx_params_fn;
OSSL_FUNC_CRYPTO_secure_zalloc_fn;
sk_GENERAL_NAMES_compfunc;
rlim_t;
PBKDF2PARAM;
sk_ASN1_STRING_compfunc;
CONF_METHOD;
OSSL_FUNC_mac_get_params_fn;
OSSL_FUNC_store_settable_ctx_params_fn;
OSSL_FUNC_decoder_export_object_fn;
OSSL_FUNC_encoder_newctx_fn;
ASN1_UTCTIME;
OCSP_REQINFO;
EC_METHOD;
OPENSSL_sk_freefunc;
daddr_t;
IPAddrBlocks;
OSSL_FUNC_keymgmt_match_fn;
sk_X509_VERIFY_PARAM_compfunc;
sk_POLICYQUALINFO_compfunc;
cookie_read_function_t;
X509_INFO;
intf;
sig_t;
ssize_t;
OSSL_FUNC_encoder_free_object_fn;
sk_X509_CRL_compfunc;
uint_fast64_t;
pcre_jit_stack;
ERR_STATE;
OSSL_FUNC_digest_final_fn;
sigevent_t;
sk_GENERAL_SUBTREE_copyfunc;
X509_LOOKUP_get_by_issuer_serial_fn;
sk_X509_NAME_compfunc;
OSSL_FUNC_signature_digest_sign_final_fn;
idtype_t;
ulong;
ASN1_STRING;
__useconds_t;
__kernel_uid_t;
OSSL_FUNC_signature_digest_verify_fn;
OSSL_FUNC_kem_encapsulate_init_fn;
EVP_KDF_CTX;
EC_KEY;
uint8_t;
OSSL_FUNC_store_export_object_fn;
EVP_PKEY_ASN1_METHOD;
sk_PKCS7_RECIP_INFO_copyfunc;
UI_METHOD;
DIR;
OCSP_CERTSTATUS;
OSSL_CORE_HANDLE;
X509_STORE_CTX;
GEN_SESSION_CB;
X509_EXTENSIONS;
sk_UI_STRING_compfunc;
int_fast16_t;
sk_POLICYQUALINFO_copyfunc;
ASN1_STRING_TABLE;
X509_SIG_INFO;
__u32;
time_t;
__nlink_t;
__uint8_t;
CRYPTO_ONCE;
OSSL_FUNC_mac_gettable_ctx_params_fn;
va_list;
EVP_MD_CTX;
__daddr_t;
OSSL_FUNC_core_pop_error_to_mark_fn;
__clock_t;
OSSL_FUNC_provider_deregister_child_cb_fn;
ASIdOrRanges;
X509_STORE_CTX_check_crl_fn;
X509_PURPOSE;
__uint32_t;
Bytef;
OCSP_CRLID;
OPENSSL_LH_DOALL_FUNCARG;
SSL_allow_early_data_cb_fn;
pcre16_jit_callback;
lh_OPENSSL_CSTRING_hashfunc;
OSSL_FUNC_provider_name_fn;
sk_X509_PURPOSE_compfunc;
OSSL_FUNC_rand_gettable_ctx_params_fn;
OSSL_FUNC_store_eof_fn;
__kernel_gid16_t;
lh_CONF_VALUE_hashfunc;
u_long;
__uint_least16_t;
ECPKPARAMETERS;
OSSL_FUNC_kdf_freectx_fn;
OSSL_FUNC_asym_cipher_freectx_fn;
GENERAL_NAMES;
OPENSSL_INIT_SETTINGS;
ENGINE;
OSSL_FUNC_BIO_free_fn;
cookie_io_functions_t;
OSSL_PARAM_BLD;
DSA_METHOD;
DH;
OSSL_FUNC_store_open_fn;
__kernel_key_t;
X509V3_EXT_I2S;
OSSL_FUNC_rand_gettable_params_fn;
CRYPTO_EX_new;
sk_OPENSSL_BLOCK_freefunc;
int8_t;
z_stream;
OSSL_FUNC_keymgmt_gettable_params_fn;
GENERAL_NAME;
int_fast64_t;
z_streamp;
X509_LOOKUP_METHOD;
SSL_async_callback_fn;
__kernel_timer_t;
sk_X509_EXTENSION_freefunc;
OSSL_FUNC_CRYPTO_free_fn;
OSSL_FUNC_keymgmt_gen_init_fn;
OSSL_FUNC_rand_clear_seed_fn;
_Float128;
OSSL_FUNC_signature_set_ctx_params_fn;
_IO_lock_t;
DIST_POINT;
__rusage_who_t;
__suseconds_t;
OSSL_FUNC_decoder_newctx_fn;
OSSL_FUNC_keymgmt_gen_fn;
lh_OPENSSL_STRING_doallfunc;
dyn_MEM_malloc_fn;
OSSL_FUNC_BIO_up_ref_fn;
OSSL_FUNC_digest_get_params_fn;
ct_log_entry_type_t;
sk_X509_POLICY_NODE_freefunc;
SSL_verify_cb;
lh_CONF_VALUE_doallfunc;
OSSL_FUNC_BIO_puts_fn;
sk_X509_compfunc;
sk_ACCESS_DESCRIPTION_freefunc;
SCT;
sk_X509_OBJECT_freefunc;
SSL_TICKET_RETURN;
OSSL_FUNC_mac_freectx_fn;
OSSL_FUNC_digest_newctx_fn;
ASN1_ENUMERATED;
PKEY_USAGE_PERIOD;
__int32_t;
CONF_MODULE;
__dev_t;
NETSCAPE_CERT_SEQUENCE;
OSSL_FUNC_cipher_freectx_fn;
sk_ASN1_OBJECT_compfunc;
OCSP_BASICRESP;
ASYNC_WAIT_CTX;
OSSL_DISPATCH;
__compar_fn_t;
sk_X509_LOOKUP_copyfunc;
OSSL_FUNC_cipher_get_params_fn;
sk_GENERAL_SUBTREE_freefunc;
OSSL_FUNC_keyexch_newctx_fn;
__fsfilcnt64_t;
X509_STORE_CTX_get_crl_fn;
__fsblkcnt_t;
sk_PROFESSION_INFO_copyfunc;
sk_ASN1_GENERALSTRING_compfunc;
sigval_t;
__locale_t;
X509_VAL;
EVP_RAND;
sk_X509_NAME_ENTRY_freefunc;
sk_ASN1_TYPE_copyfunc;
IPAddressFamily;
OSSL_FUNC_kem_gettable_ctx_params_fn;
OSSL_FUNC_cipher_gettable_params_fn;
socklen_t;
sk_X509_VERIFY_PARAM_copyfunc;
RAND_DRBG;
sk_POLICYINFO_compfunc;
sk_X509_NAME_ENTRY_compfunc;
OSSL_FUNC_signature_digest_sign_init_fn;
__kernel_ulong_t;
OSSL_FUNC_cipher_newctx_fn;
sk_CTLOG_compfunc;
sk_GENERAL_NAME_compfunc;
OSSL_FUNC_decoder_decode_fn;
ASIdentifiers;
PROXY_POLICY;
OSSL_FUNC_keymgmt_get_params_fn;
SSL_CTX_generate_session_ticket_fn;
PBE2PARAM;
__uint16_t;
BIO_callback_fn;
OSSL_FUNC_core_new_error_fn;
PKCS7_ENCRYPT;
sk_X509_ALGOR_compfunc;
X509_STORE_CTX_verify_fn;
EVP_MAC;
OSSL_FUNC_keymgmt_gen_set_params_fn;
__s32;
__sigval_t;
ASN1_SEQUENCE_ANY;
__priority_which_t;
POLICY_CONSTRAINTS;
OSSL_FUNC_mac_final_fn;
AUTHORITY_INFO_ACCESS;
sk_ASN1_UTF8STRING_compfunc;
OSSL_FUNC_kem_newctx_fn;
sk_X509_copyfunc;
BN_CTX;
ushort;
__kernel_sighandler_t;
fd_mask;
sk_OPENSSL_STRING_freefunc;
__kernel_ssize_t;
sk_POLICY_MAPPING_compfunc;
sk_BIO_freefunc;
ASN1_UTF8STRING;
sk_PKCS7_freefunc;
X509V3_CTX;
OSSL_FUNC_provider_gettable_params_fn;
X509_CRL;
OCSP_SINGLERESP;
OSSL_FUNC_store_set_ctx_params_fn;
sk_ASN1_INTEGER_freefunc;
OSSL_FUNC_rand_uninstantiate_fn;
SCT_CTX;
PKCS7_ISSUER_AND_SERIAL;
sk_SXNETID_compfunc;
point_conversion_form_t;
OSSL_FUNC_asym_cipher_gettable_ctx_params_fn;
__wsum;
PKCS7_ENVELOPE;
__socklen_t;
sk_X509_ALGOR_copyfunc;
EVP_RAND_CTX;
ASN1_TIME;
CRYPTO_THREAD_ID;
EVP_PKEY_gen_cb;
sk_X509_EXTENSION_compfunc;
IPAddressOrRange;
OSSL_FUNC_provider_register_child_cb_fn;
X509_LOOKUP_ctrl_ex_fn;
OSSL_ITEM;
OSSL_FUNC_kdf_get_params_fn;
sk_SSL_COMP_copyfunc;
ACCESS_DESCRIPTION;
OSSL_FUNC_core_get_params_fn;
sk_X509_ALGOR_freefunc;
EDIPARTYNAME;
in_addr_t;
ASN1_IA5STRING;
__kernel_size_t;
PKCS7_RECIP_INFO;
__kernel_uid32_t;
__kernel_daddr_t;
X509V3_CONF_METHOD;
pcre32_jit_stack;
OSSL_FUNC_rand_freectx_fn;
fsfilcnt_t;
loff_t;
CERTIFICATEPOLICIES;
sk_X509_TRUST_freefunc;
ptrdiff_t;
__u_long;
OSSL_FUNC_CRYPTO_secure_clear_free_fn;
ino64_t;
__pthread_list_t;
OSSL_HANDSHAKE_STATE;
greg_t;
sk_POLICY_MAPPING_freefunc;
PROFESSION_INFOS;
ENGINE_PKEY_METHS_PTR;
ASN1_ENCODING;
OSSL_FUNC_cipher_encrypt_init_fn;
OSSL_FUNC_encoder_encode_fn;
uid_t;
uint32_t;
u_int64_t;
OSSL_FUNC_kdf_set_ctx_params_fn;
key_t;
EVP_MD;
OSSL_FUNC_digest_digest_fn;
u_int8_t;
uLong;
CRYPTO_malloc_fn;
OSSL_FUNC_keyexch_get_ctx_params_fn;
int_least16_t;
OCSP_ONEREQ;
X509_REQ_INFO;
__time_t;
BIT_STRING_BITNAME;
OSSL_FUNC_kdf_newctx_fn;
OSSL_FUNC_CRYPTO_secure_allocated_fn;
OSSL_FUNC_encoder_set_ctx_params_fn;
sk_SRTP_PROTECTION_PROFILE_copyfunc;
EXTENDED_KEY_USAGE;
SSL_CTX_npn_advertised_cb_func;
OSSL_FUNC_keymgmt_import_types_fn;
__uintmax_t;
PKCS7_SIGN_ENVELOPE;
CRYPTO_THREADID;
OPENSSL_BLOCK;
SXNETID;
__kernel_old_dev_t;
sk_ASN1_OBJECT_copyfunc;
SSL_DANE;
sk_DIST_POINT_compfunc;
sk_IPAddressOrRange_compfunc;
X509_EXTENSION;
ASN1_UNIVERSALSTRING;
NETSCAPE_SPKAC;
OSSL_FUNC_signature_gettable_ctx_params_fn;
PROXY_CERT_INFO_EXTENSION;
sk_SXNETID_freefunc;
ENGINE_DIGESTS_PTR;
EVP_MAC_CTX;
__itimer_which_t;
OSSL_FUNC_signature_gettable_ctx_md_params_fn;
sk_void_compfunc;
OSSL_STORE_INFO;
sk_ASN1_TYPE_compfunc;
pthread_spinlock_t;
OSSL_FUNC_keymgmt_gen_set_template_fn;
__le64;
ENUMERATED_NAMES;
ASN1_NULL;
__kernel_mode_t;
CRYPTO_RWLOCK;
OSSL_FUNC_kem_set_ctx_params_fn;
sk_ASN1_UTF8STRING_freefunc;
sk_ASIdOrRange_compfunc;
X509V3_EXT_R2I;
__loff_t;
OSSL_FUNC_CRYPTO_secure_malloc_fn;
OSSL_FUNC_kdf_dupctx_fn;
__thrd_t;
__u_quad_t;
__u_int;
sk_ASN1_STRING_TABLE_freefunc;
sk_SCT_compfunc;
__le16;
u_short;
TLS_SIGALGS;
OSSL_FUNC_provider_get_reason_strings_fn;
sk_CONF_VALUE_compfunc;
u_int16_t;
PKCS7_SIGNER_INFO;
dyn_MEM_free_fn;
__off_t;
__kernel_ino_t;
uIntf;
OSSL_FUNC_keymgmt_gen_cleanup_fn;
__be16;
OSSL_FUNC_keymgmt_settable_params_fn;
ASN1_ITEM;
sk_X509_EXTENSION_copyfunc;
OSSL_FUNC_CRYPTO_zalloc_fn;
OSSL_FUNC_keyexch_settable_ctx_params_fn;
RSA_PSS_PARAMS;
lh_ERR_STRING_DATA_doallfunc;
EC_GROUP;
OSSL_FUNC_cipher_update_fn;
OSSL_FUNC_BIO_vsnprintf_fn;
OSSL_FUNC_store_attach_fn;
sk_UI_STRING_freefunc;
sk_X509_POLICY_NODE_copyfunc;
OSSL_FUNC_kem_get_ctx_params_fn;
__kernel_clockid_t;
X509_STORE;
gzFile;
__u_short;
__ino64_t;
OSSL_FUNC_BIO_write_ex_fn;
OSSL_FUNC_provider_free_fn;
ASN1_PRINTABLESTRING;
X509_REVOKED;
sk_ASN1_INTEGER_compfunc;
__int_least8_t;
pcre16_jit_stack;
sk_ASN1_TYPE_freefunc;
USERNOTICE;
blkcnt64_t;
sk_X509_REVOKED_freefunc;
sk_ADMISSIONS_freefunc;
OSSL_FUNC_provider_get_params_fn;
wchar_t;
X509_ALGORS;
__blkcnt64_t;
suseconds_t;
__rlimit_resource_t;
pthread_key_t;
X509_LOOKUP_get_by_fingerprint_fn;
_Float32;
sk_PKCS7_copyfunc;
in_port_t;
OSSL_FUNC_decoder_freectx_fn;
blksize_t;
free_func;
OSSL_FUNC_signature_get_ctx_md_params_fn;
SSL_COMP;
d2i_of_void;
OSSL_FUNC_rand_nonce_fn;
__suseconds64_t;
sk_X509V3_EXT_METHOD_freefunc;
ASN1_BIT_STRING;
OSSL_FUNC_asym_cipher_get_ctx_params_fn;
OSSL_FUNC_keymgmt_gen_settable_params_fn;
__u_char;
sk_CONF_VALUE_copyfunc;
__syscall_ulong_t;
sk_OCSP_CERTID_copyfunc;
OSSL_PASSPHRASE_CALLBACK;
OSSL_FUNC_digest_init_fn;
OSSL_FUNC_store_close_fn;
__kernel_loff_t;
sk_OCSP_SINGLERESP_compfunc;
voidpc;
OSSL_FUNC_keyexch_set_peer_fn;
OSSL_FUNC_decoder_get_params_fn;
X509_LOOKUP_get_by_alias_fn;
__kernel_gid_t;
HMAC_CTX;
int_fast8_t;
ISSUER_SIGN_TOOL;
OSSL_FUNC_keymgmt_free_fn;
OSSL_FUNC_signature_verify_fn;
useconds_t;
X509_OBJECT;
ASN1_BMPSTRING;
sk_IPAddressFamily_freefunc;
SSL_TICKET_STATUS;
sk_OCSP_RESPID_compfunc;
OSSL_INOUT_CALLBACK;
OSSL_FUNC_rand_set_callbacks_fn;
sk_OCSP_CERTID_freefunc;
AUTHORITY_KEYID;
RSA_OAEP_PARAMS;
sk_SSL_COMP_compfunc;
OSSL_FUNC_digest_freectx_fn;
X509V3_EXT_I2V;
OSSL_FUNC_mac_get_ctx_params_fn;
sk_OPENSSL_STRING_copyfunc;
ENGINE_LOAD_KEY_PTR;
conf_init_func;
sk_PKCS7_SIGNER_INFO_copyfunc;
sk_PROFESSION_INFO_freefunc;
OSSL_FUNC_core_clear_last_error_mark_fn;
__blkcnt_t;
sk_X509_NAME_freefunc;
ENGINE_CIPHERS_PTR;
__uid_t;
__kernel_pid_t;
__clockid_t;
sk_ACCESS_DESCRIPTION_compfunc;
PKCS7_CTX;
OSSL_SELF_TEST;
OSSL_FUNC_encoder_settable_ctx_params_fn;
X509_CERT_AUX;
UI_STRING;
OSSL_FUNC_keyexch_init_fn;
OSSL_FUNC_cipher_settable_ctx_params_fn;
SSL_custom_ext_parse_cb_ex;
__le32;
sk_X509V3_EXT_METHOD_copyfunc;
OSSL_FUNC_digest_set_ctx_params_fn;
OSSL_FUNC_CRYPTO_malloc_fn;
__uint_least32_t;
X509V3_EXT_S2I;
__syscall_slong_t;
sk_X509_PURPOSE_copyfunc;
