OSSL_PARAM* OSSL_PARAM_merge(const OSSL_PARAM*, const OSSL_PARAM*);
int SSL_CTX_use_serverinfo_file(SSL_CTX*, const char*);
int ERR_pop_to_mark();
IPAddressFamily* IPAddressFamily_new();
int X509_STORE_set_default_paths(X509_STORE*);
BIGNUM* BN_mod_sqrt(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509_get_ext_by_OBJ(const X509*, const ASN1_OBJECT*, int);
void EC_POINT_clear_free(EC_POINT*);
PKCS7_ENCRYPT* d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT**, const unsigned char**, long);
long BIO_int_ctrl(BIO*, int, long, int);
int SSL_get_verify_mode(const SSL*);
void X509_EXTENSION_free(X509_EXTENSION*);
int (BIO*,  char*, int)* BIO_meth_get_gets(const BIO_METHOD*);
BIGNUM* BN_mpi2bn(const unsigned char*, int, BIGNUM*);
int BIO_socket(int, int, int, int);
const EVP_MD* EVP_sha3_256();
BIO* BIO_new_ssl_connect(SSL_CTX*);
int ASN1_item_sign_ctx(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, EVP_MD_CTX*);
unsigned long ERR_peek_error();
OSSL_LIB_CTX* OSSL_LIB_CTX_new_from_dispatch(const OSSL_CORE_HANDLE*, const OSSL_DISPATCH*);
RSA_PSS_PARAMS* RSA_PSS_PARAMS_new();
NETSCAPE_SPKAC* d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC**, const unsigned char**, long);
int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX*, const char*);
OSSL_HTTP_REQ_CTX* OSSL_HTTP_open(const char*, const char*, const char*, const char*, int, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, int);
int i2d_PKCS8PrivateKeyInfo_bio(BIO*, const EVP_PKEY*);
size_t BIO_ctrl_get_write_guarantee(BIO*);
X509_REQ* X509_REQ_dup(const X509_REQ*);
int SSL_set_trust(SSL*, int);
PKCS7_ENVELOPE* d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE**, const unsigned char**, long);
void SSL_set_client_CA_list(SSL*, stack_st_X509_NAME*);
void RSA_get0_crt_params(const RSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
char* BIO_ADDR_path_string(const BIO_ADDR*);
int BN_is_prime_fasttest(const BIGNUM*, int, void (int, int, void*)*, BN_CTX*, void*, int);
const EVP_CIPHER* ENGINE_get_cipher(ENGINE*, int);
int i2d_ASN1_INTEGER(const ASN1_INTEGER*, unsigned char**);
int i2d_DIST_POINT(const DIST_POINT*, unsigned char**);
int EVP_MD_meth_set_flags(EVP_MD*, unsigned long);
int SSL_renegotiate(SSL*);
void ENGINE_set_table_flags(unsigned int);
X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(const X509_STORE*);
void OCSP_REQUEST_free(OCSP_REQUEST*);
int SSL_is_init_finished(const SSL*);
int X509_EXTENSION_get_critical(const X509_EXTENSION*);
PROFESSION_INFO* PROFESSION_INFO_new();
int DH_check_params_ex(const DH*);
int ASN1_STRING_print(BIO*, const ASN1_STRING*);
int SSL_CTX_use_PrivateKey_file(SSL_CTX*, const char*, int);
EVP_MAC* EVP_MAC_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_SealInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, unsigned char**, int*, unsigned char*, EVP_PKEY**, int);
int PKCS5_PBKDF2_HMAC(const char*, int, const unsigned char*, int, int, const EVP_MD*, int, unsigned char*);
EVP_PKEY* EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO*);
X509_ALGOR* X509_ALGOR_dup(const X509_ALGOR*);
int EVP_RAND_instantiate(EVP_RAND_CTX*, unsigned int, int, const unsigned char*, size_t, const OSSL_PARAM[]);
int SSL_client_version(const SSL*);
RSA_METHOD* RSA_meth_dup(const RSA_METHOD*);
const BIGNUM* RSA_get0_n(const RSA*);
int OPENSSL_hexchar2int(unsigned char);
int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM*, const char*, size_t);
PKCS8_PRIV_KEY_INFO* EVP_PKEY2PKCS8(const EVP_PKEY*);
int SSL_get_quiet_shutdown(const SSL*);
int i2b_PVK_bio_ex(BIO*, const EVP_PKEY*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(const X509_STORE*);
int EVP_PKEY_encrypt(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
int X509_NAME_add_entry(X509_NAME*, const X509_NAME_ENTRY*, int, int);
int PKCS5_pbe_set0_algor_ex(X509_ALGOR*, int, int, const unsigned char*, int, OSSL_LIB_CTX*);
int SSL_CTX_add_server_custom_ext(SSL_CTX*, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void*, custom_ext_parse_cb, void*);
const SSL_METHOD* TLS_method();
const BIO_METHOD* BIO_s_mem();
const char* SSL_state_string(const SSL*);
BIO* BIO_pop(BIO*);
ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE*);
int PEM_write_DHxparams(FILE*, const DH*);
int BIO_closesocket(int);
void OSSL_HTTP_REQ_CTX_free(OSSL_HTTP_REQ_CTX*);
long SSL_SESSION_get_time(const SSL_SESSION*);
int PEM_write_bio_RSAPrivateKey(BIO*, const RSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int PEM_write_X509_REQ(FILE*, const X509_REQ*);
void* ASN1_TYPE_unpack_sequence(const ASN1_ITEM*, const ASN1_TYPE*);
int UI_add_error_string(UI*, const char*);
const EVP_CIPHER* EVP_aria_192_ccm();
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO**, const unsigned char**, long);
int i2d_PKCS7_bio(BIO*, const PKCS7*);
int X509_get_ext_by_NID(const X509*, int, int);
const EVP_CIPHER* EVP_des_cbc();
const EVP_CIPHER* EVP_aria_128_gcm();
SRTP_PROTECTION_PROFILE* SSL_get_selected_srtp_profile(SSL*);
char* X509_VERIFY_PARAM_get0_host(X509_VERIFY_PARAM*, int);
const ASN1_OBJECT* NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY*);
OSSL_PARAM OSSL_PARAM_construct_utf8_string(const char*,  char*, size_t);
int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM*, uint32_t);
const EVP_CIPHER* EVP_bf_ecb();
int (DSA*)* DSA_meth_get_finish(const DSA_METHOD*);
int ASN1_INTEGER_set_uint64(ASN1_INTEGER*, uint64_t);
int i2d_PKCS7_ENVELOPE(const PKCS7_ENVELOPE*, unsigned char**);
void EVP_RAND_free(EVP_RAND*);
int EVP_PKEY_CTX_set0_dh_kdf_oid(EVP_PKEY_CTX*, ASN1_OBJECT*);
int ENGINE_register_all_complete();
const OSSL_PARAM* EVP_CIPHER_settable_ctx_params(const EVP_CIPHER*);
int BN_BLINDING_convert_ex(BIGNUM*, BIGNUM*, BN_BLINDING*, BN_CTX*);
CTLOG* CTLOG_new(EVP_PKEY*, const char*);
DSA* DSAparams_dup(const DSA*);
const char* OPENSSL_version_build_metadata();
int SSL_write(SSL*, const void*, int);
void X509_SIG_free(X509_SIG*);
EVP_PKEY* d2i_PKCS8PrivateKey_fp(FILE*, EVP_PKEY**, pem_password_cb*, void*);
void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH*, BIO*);
stack_st_X509_INFO* PEM_X509_INFO_read_bio_ex(BIO*, stack_st_X509_INFO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aes_256_cbc();
const EVP_CIPHER* EVP_aes_256_cfb1();
int BN_BLINDING_lock(BN_BLINDING*);
BUF_MEM* BUF_MEM_new_ex(unsigned long);
int ENGINE_finish(ENGINE*);
int ASN1_TIME_normalize(ASN1_TIME*);
int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM*, const char*, size_t);
EVP_ENCODE_CTX* EVP_ENCODE_CTX_new();
int EVP_MD_CTX_ctrl(EVP_MD_CTX*, int, int, void*);
int i2d_SSL_SESSION(const SSL_SESSION*, unsigned char**);
EVP_RAND_CTX* RAND_get0_public(OSSL_LIB_CTX*);
const EVP_CIPHER* EVP_sm4_ctr();
int EVP_DigestFinal(EVP_MD_CTX*, unsigned char*, unsigned int*);
char* i2s_ASN1_UTF8STRING(X509V3_EXT_METHOD*, ASN1_UTF8STRING*);
int X509_self_signed(X509*, int);
int SHA384_Init(SHA512_CTX*);
int BN_priv_rand(BIGNUM*, int, int, int);
void* SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX*);
int SSL_set_ciphersuites(SSL*, const char*);
void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, EVP_PKEY*)**);
int DHparams_print_fp(FILE*, const DH*);
DSA* d2i_DSA_PUBKEY(DSA**, const unsigned char**, long);
const EVP_CIPHER* EVP_cast5_cfb64();
void* EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX*, void*);
const OSSL_PARAM* EVP_RAND_CTX_settable_params(EVP_RAND_CTX*);
CONF* NCONF_new(CONF_METHOD*);
int PEM_write_RSA_PUBKEY(FILE*, const RSA*);
CRL_DIST_POINTS* CRL_DIST_POINTS_new();
int EC_POINT_copy(EC_POINT*, const EC_POINT*);
int X509at_get_attr_by_OBJ(const stack_st_X509_ATTRIBUTE*, const ASN1_OBJECT*, int);
int SSL_pending(const SSL*);
void* X509_LOOKUP_get_method_data(const X509_LOOKUP*);
EC_KEY* EC_KEY_dup(const EC_KEY*);
void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS*);
int SSL_CTX_set_alpn_protos(SSL_CTX*, const unsigned char*, unsigned int);
void ENGINE_unregister_digests(ENGINE*);
const EVP_CIPHER* EVP_aes_192_cbc();
size_t EVP_PKEY_meth_get_count();
unsigned char* EVP_Q_mac(OSSL_LIB_CTX*, const char*, const char*, const char*, const OSSL_PARAM*, const void*, size_t, const unsigned char*, size_t, unsigned char*, size_t, size_t*);
ENGINE* DH_get0_engine(DH*);
void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, int, int, void*)*, int (EVP_PKEY_CTX*, const char*, const char*)*);
int X509_check_issued(X509*, X509*);
int i2d_ASN1_UTF8STRING(const ASN1_UTF8STRING*, unsigned char**);
const char* RAND_file_name( char*, size_t);
int DH_set_length(DH*, long);
int OPENSSL_atexit(void ()*);
void X509_STORE_CTX_set_current_cert(X509_STORE_CTX*, X509*);
int i2d_RSAPublicKey_bio(BIO*, const RSA*);
int EVP_PKEY_get_raw_public_key(const EVP_PKEY*, unsigned char*, size_t*);
int ENGINE_get_flags(const ENGINE*);
int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
void SSL_set_shutdown(SSL*, int);
void SSL_CTX_sess_set_remove_cb(SSL_CTX*, void (ssl_ctx_st*, SSL_SESSION*)*);
void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
X509_SIG* X509_SIG_new();
int UI_method_set_prompt_constructor(UI_METHOD*,  char* (UI*, const char*, const char*)*);
int i2d_OCSP_RESPBYTES(const OCSP_RESPBYTES*, unsigned char**);
EVP_PKEY* b2i_PVK_bio(BIO*, pem_password_cb*, void*);
ASN1_GENERALSTRING* d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING**, const unsigned char**, long);
int PEM_write_bio_X509_AUX(BIO*, const X509*);
int DSA_print(BIO*, const DSA*, int);
int BN_rshift(BIGNUM*, const BIGNUM*, int);
int DSA_meth_set_init(DSA_METHOD*, int (DSA*)*);
void RAND_keep_random_devices_open(int);
int DH_meth_set_flags(DH_METHOD*, int);
int EVP_RAND_is_a(const EVP_RAND*, const char*);
int EC_GROUP_precompute_mult(EC_GROUP*, BN_CTX*);
int SSL_set_tlsext_max_fragment_length(SSL*, uint8_t);
const EVP_CIPHER* EVP_aria_128_cbc();
ASN1_OBJECT* X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE*);
int SSL_CTX_check_private_key(const SSL_CTX*);
void OPENSSL_cleanse(void*, size_t);
int RSA_print(BIO*, const RSA*, int);
DSA* d2i_DSAPublicKey(DSA**, const unsigned char**, long);
int X509_CRL_sign(X509_CRL*, EVP_PKEY*, const EVP_MD*);
void* EVP_MD_CTX_get0_md_data(const EVP_MD_CTX*);
CERTIFICATEPOLICIES* d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES**, const unsigned char**, long);
int EVP_CIPHER_CTX_get_num(const EVP_CIPHER_CTX*);
int RSA_meth_set1_name(RSA_METHOD*, const char*);
int EVP_BytesToKey(const EVP_CIPHER*, const EVP_MD*, const unsigned char*, const unsigned char*, int, int, unsigned char*, unsigned char*);
void SSL_set_default_passwd_cb_userdata(SSL*, void*);
EXTENDED_KEY_USAGE* EXTENDED_KEY_USAGE_new();
int BN_rshift1(BIGNUM*, const BIGNUM*);
void DSA_SIG_free(DSA_SIG*);
const EVP_MD* ENGINE_get_digest(ENGINE*, int);
int EVP_CIPHER_CTX_set_params(EVP_CIPHER_CTX*, const OSSL_PARAM[]);
int OCSP_basic_sign_ctx(OCSP_BASICRESP*, X509*, EVP_MD_CTX*, stack_st_X509*, unsigned long);
int i2d_X509_CRL_fp(FILE*, const X509_CRL*);
const OSSL_PARAM* EVP_MAC_settable_ctx_params(const EVP_MAC*);
int SHA224_Update(SHA256_CTX*, const void*, size_t);
int EVP_SIGNATURE_up_ref(EVP_SIGNATURE*);
int SSL_CTX_get_verify_depth(const SSL_CTX*);
int SSL_set1_host(SSL*, const char*);
void ADMISSION_SYNTAX_free(ADMISSION_SYNTAX*);
int DH_compute_key(unsigned char*, const BIGNUM*, DH*);
EVP_CIPHER_CTX* EVP_CIPHER_CTX_new();
ASN1_SEQUENCE_ANY* d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY**, const unsigned char**, long);
void* EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX*);
int i2d_PKCS7_ISSUER_AND_SERIAL(const PKCS7_ISSUER_AND_SERIAL*, unsigned char**);
OCSP_CRLID* OCSP_CRLID_new();
EC_GROUP* EC_GROUP_dup(const EC_GROUP*);
ASN1_VALUE* ASN1_item_new_ex(const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int BN_pseudo_rand(BIGNUM*, int, int, int);
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE*);
int RSA_meth_set_priv_enc(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
void OPENSSL_sk_pop_free(OPENSSL_STACK*, void (void*)*);
BN_CTX* BN_CTX_secure_new_ex(OSSL_LIB_CTX*);
const BIGNUM* DSA_get0_priv_key(const DSA*);
int BN_mod_exp_mont_consttime_x2(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int EVP_PKEY_CTX_set_signature_md(EVP_PKEY_CTX*, const EVP_MD*);
const EVP_CIPHER* EVP_aria_256_cbc();
const EVP_CIPHER* EVP_aes_128_ccm();
void BN_clear_free(BIGNUM*);
int ENGINE_set_destroy_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
int BN_BLINDING_unlock(BN_BLINDING*);
int RSA_test_flags(const RSA*, int);
int i2d_X509_CINF(const X509_CINF*, unsigned char**);
int EVP_ASYM_CIPHER_names_do_all(const EVP_ASYM_CIPHER*, void (const char*, void*)*, void*);
int EC_GROUP_have_precompute_mult(const EC_GROUP*);
int X509_OBJECT_set1_X509_CRL(X509_OBJECT*, X509_CRL*);
X509* PEM_read_bio_X509(BIO*, X509**, pem_password_cb*, void*);
void* SSL_CTX_get0_security_ex_data(const SSL_CTX*);
X509_REQ* X509_REQ_new();
int EVP_PKEY_sign(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
int X509_REQ_add1_attr_by_NID(X509_REQ*, int, int, const unsigned char*, int);
int i2d_CERTIFICATEPOLICIES(const CERTIFICATEPOLICIES*, unsigned char**);
unsigned char* SHA384(const unsigned char*, size_t, unsigned char*);
int EVP_MD_get_size(const EVP_MD*);
int OSSL_PARAM_set_uint64(OSSL_PARAM*, uint64_t);
int EC_POINT_make_affine(const EC_GROUP*, EC_POINT*, BN_CTX*);
int RSA_get_version(RSA*);
const EVP_CIPHER* EVP_cast5_cbc();
const EVP_CIPHER* EVP_sm4_ofb();
int SSL_CTX_set_default_ctlog_list_file(SSL_CTX*);
OCSP_SINGLERESP* OCSP_SINGLERESP_new();
X509_ATTRIBUTE* d2i_X509_ATTRIBUTE(X509_ATTRIBUTE**, const unsigned char**, long);
int SSL_CTX_remove_session(SSL_CTX*, SSL_SESSION*);
void SSL_set_verify_result(SSL*, long);
int RSA_public_decrypt(int, const unsigned char*, unsigned char*, RSA*, int);
int DH_get_nid(const DH*);
BIGNUM* ASN1_INTEGER_to_BN(const ASN1_INTEGER*, BIGNUM*);
int ASYNC_WAIT_CTX_get_status(ASYNC_WAIT_CTX*);
BIO* SSL_get_rbio(const SSL*);
int X509_cmp_time(const ASN1_TIME*, time_t*);
EVP_PKEY* EVP_PKEY_new_raw_public_key_ex(OSSL_LIB_CTX*, const char*, const char*, const unsigned char*, size_t);
X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(const X509_LOOKUP_METHOD*);
int EVP_MD_meth_set_app_datasize(EVP_MD*, int);
int RSA_private_encrypt(int, const unsigned char*, unsigned char*, RSA*, int);
int X509_EXTENSION_set_critical(X509_EXTENSION*, int);
void ASYNC_block_pause();
int SSL_alloc_buffers(SSL*);
int SSL_CIPHER_is_aead(const SSL_CIPHER*);
const SSL_METHOD* DTLS_server_method();
void DIST_POINT_NAME_free(DIST_POINT_NAME*);
int DSA_meth_set_keygen(DSA_METHOD*, int (DSA*)*);
int EVP_PKEY_verify(EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t);
const EC_METHOD* EC_GFp_simple_method();
int EVP_PKEY_CTX_set_rsa_pss_saltlen(EVP_PKEY_CTX*, int);
int X509_NAME_print_ex_fp(FILE*, const X509_NAME*, int, unsigned long);
int EVP_Cipher(EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, unsigned int);
const EVP_CIPHER* EVP_des_cfb1();
stack_st_X509* X509_chain_up_ref(stack_st_X509*);
int X509_REQ_get_attr_count(const X509_REQ*);
int EVP_default_properties_is_fips_enabled(OSSL_LIB_CTX*);
const BIGNUM* BN_get0_nist_prime_384();
int X509at_get_attr_by_NID(const stack_st_X509_ATTRIBUTE*, int, int);
int BIO_lookup(const char*, const char*, BIO_lookup_type, int, int, BIO_ADDRINFO**);
PROXY_POLICY* d2i_PROXY_POLICY(PROXY_POLICY**, const unsigned char**, long);
int RSA_padding_check_PKCS1_OAEP(unsigned char*, int, const unsigned char*, int, int, const unsigned char*, int);
int X509_set_subject_name(X509*, const X509_NAME*);
int OPENSSL_sk_insert(OPENSSL_STACK*, const void*, int);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX*, SSL_CTX_npn_advertised_cb_func, void*);
int EVP_SignFinal_ex(EVP_MD_CTX*, unsigned char*, unsigned int*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
int i2d_PKCS7_ENC_CONTENT(const PKCS7_ENC_CONTENT*, unsigned char**);
void SSL_CTX_free(SSL_CTX*);
int i2d_RSA_OAEP_PARAMS(const RSA_OAEP_PARAMS*, unsigned char**);
const BIGNUM* RSA_get0_dmp1(const RSA*);
int X509_STORE_CTX_get_error(const X509_STORE_CTX*);
X509_CRL_INFO* X509_CRL_INFO_new();
int i2d_BASIC_CONSTRAINTS(const BASIC_CONSTRAINTS*, unsigned char**);
X509_SIG* d2i_PKCS8_fp(FILE*, X509_SIG**);
void EVP_MD_CTX_clear_flags(EVP_MD_CTX*, int);
const EC_METHOD* EC_GFp_nistp224_method();
unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH*);
BIGNUM* BN_get_rfc3526_prime_6144(BIGNUM*);
int EVP_PKEY_CTX_set_ecdh_kdf_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_PKEY_digestsign_supports_digest(EVP_PKEY*, OSSL_LIB_CTX*, const char*, const char*);
int DH_compute_key_padded(unsigned char*, const BIGNUM*, DH*);
int i2d_re_X509_REQ_tbs(X509_REQ*, unsigned char**);
OCSP_RESPONSE* OCSP_RESPONSE_new();
void SSL_CTX_set_record_padding_callback_arg(SSL_CTX*, void*);
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX*, void*);
int OCSP_request_add1_cert(OCSP_REQUEST*, X509*);
void ADMISSIONS_free(ADMISSIONS*);
int SCT_set1_log_id(SCT*, const unsigned char*, size_t);
void X509_SIG_INFO_set(X509_SIG_INFO*, int, int, int, uint32_t);
int OCSP_resp_get0_signer(OCSP_BASICRESP*, X509**, stack_st_X509*);
const OSSL_PARAM* EVP_MAC_CTX_settable_params(EVP_MAC_CTX*);
int SSL_SESSION_print_keylog(BIO*, const SSL_SESSION*);
int EVP_PKEY_decrypt_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
size_t EC_POINT_point2buf(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, unsigned char**, BN_CTX*);
X509_VERIFY_PARAM* X509_STORE_get0_param(const X509_STORE*);
void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY*, ASN1_OBJECT*);
int CRYPTO_secure_malloc_done();
int i2d_X509_REVOKED(const X509_REVOKED*, unsigned char**);
void ECPARAMETERS_free(ECPARAMETERS*);
int RSA_padding_add_PKCS1_type_1(unsigned char*, int, const unsigned char*, int);
void* CRYPTO_zalloc(size_t, const char*, int);
int i2d_EC_PUBKEY_fp(FILE*, const EC_KEY*);
int EVP_CIPHER_meth_set_init(EVP_CIPHER*, int (EVP_CIPHER_CTX*, const unsigned char*, const unsigned char*, int)*);
int EVP_PKEY_CTX_set0_ecdh_kdf_ukm(EVP_PKEY_CTX*, unsigned char*, int);
SSL_SESSION* (ssl_st*, const unsigned char*, int, int*)* SSL_CTX_sess_get_get_cb(SSL_CTX*);
int DSA_security_bits(const DSA*);
unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION*);
int BN_div(BIGNUM*, BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
ASN1_INTEGER* X509_get_serialNumber(X509*);
X509_PUBKEY* d2i_X509_PUBKEY_bio(BIO*, X509_PUBKEY**);
int ENGINE_set_id(ENGINE*, const char*);
int EVP_PKEY_CTX_set_dh_paramgen_type(EVP_PKEY_CTX*, int);
int X509_LOOKUP_shutdown(X509_LOOKUP*);
void EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
int ENGINE_init(ENGINE*);
int BN_mod_exp_mont(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*);
int OSSL_parse_url(const char*,  char**,  char**,  char**,  char**, int*,  char**,  char**,  char**);
int BIO_accept_ex(int, BIO_ADDR*, int);
int OSSL_PARAM_get_BN(const OSSL_PARAM*, BIGNUM**);
BASIC_CONSTRAINTS* BASIC_CONSTRAINTS_new();
EC_GROUP* EC_GROUP_new_curve_GF2m(const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int i2d_PUBKEY_fp(FILE*, const EVP_PKEY*);
ASN1_TIME* X509_gmtime_adj(ASN1_TIME*, long);
const char* EVP_PKEY_get0_description(const EVP_PKEY*);
int X509_add_cert(stack_st_X509*, X509*, int);
const EVP_CIPHER* EVP_rc2_64_cbc();
char* (UI*, const char*, const char*)* UI_method_get_prompt_constructor(const UI_METHOD*);
OCSP_ONEREQ* OCSP_ONEREQ_new();
X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(const X509_STORE_CTX*);
BN_CTX* BN_CTX_new_ex(OSSL_LIB_CTX*);
SXNET* d2i_SXNET(SXNET**, const unsigned char**, long);
char* SSL_get_srp_userinfo(SSL*);
int EVP_PKEY_set_type_str(EVP_PKEY*, const char*, int);
OTHERNAME* OTHERNAME_new();
ssize_t SSL_sendfile(SSL*, int, off_t, size_t, int);
int SSL_peek_ex(SSL*, void*, size_t, size_t*);
unsigned int ENGINE_get_table_flags();
ASN1_TYPE* ASN1_generate_v3(const char*, X509V3_CTX*);
int X509_NAME_print_ex(BIO*, const X509_NAME*, int, unsigned long);
const SSL_CIPHER* SSL_get_current_cipher(const SSL*);
int OSSL_HTTP_REQ_CTX_add1_header(OSSL_HTTP_REQ_CTX*, const char*, const char*);
int OPENSSL_strncasecmp(const char*, const char*, size_t);
const stack_st_ASN1_STRING* PROFESSION_INFO_get0_professionItems(const PROFESSION_INFO*);
int DH_set0_key(DH*, BIGNUM*, BIGNUM*);
int i2d_PKCS8_bio(BIO*, const X509_SIG*);
int i2d_ASN1_bio_stream(BIO*, ASN1_VALUE*, BIO*, int, const ASN1_ITEM*);
void EVP_PKEY_meth_copy(EVP_PKEY_METHOD*, const EVP_PKEY_METHOD*);
X509_EXTENSIONS* d2i_X509_EXTENSIONS(X509_EXTENSIONS**, const unsigned char**, long);
void X509_REQ_INFO_free(X509_REQ_INFO*);
int OCSP_RESPID_set_by_key(OCSP_RESPID*, X509*);
EVP_RAND_CTX* RAND_get0_private(OSSL_LIB_CTX*);
int BIO_write_ex(BIO*, const void*, size_t, size_t*);
int SSL_clear(SSL*);
int CRYPTO_memcmp(const void*, const void*, size_t);
int SSL_get_rfd(const SSL*);
void BIO_ssl_shutdown(BIO*);
int SSL_add_dir_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
int (BIO*)* BIO_meth_get_destroy(const BIO_METHOD*);
int SSL_use_certificate_file(SSL*, const char*, int);
int i2d_DSAPublicKey(const DSA*, unsigned char**);
SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX*);
const EVP_CIPHER* EVP_aes_128_cbc();
POLICYINFO* POLICYINFO_new();
CTLOG* CTLOG_new_ex(EVP_PKEY*, const char*, OSSL_LIB_CTX*, const char*);
const EC_METHOD* EC_GROUP_method_of(const EC_GROUP*);
RSA* d2i_RSA_PUBKEY(RSA**, const unsigned char**, long);
const EVP_CIPHER* EVP_rc2_40_cbc();
int SSL_CIPHER_get_auth_nid(const SSL_CIPHER*);
DH* DH_get_2048_224();
OSSL_PARAM OSSL_PARAM_construct_time_t(const char*, time_t*);
void* CRYPTO_secure_malloc(size_t, const char*, int);
void SCT_free(SCT*);
int X509_check_email(X509*, const char*, size_t, unsigned int);
int EVP_PKEY_cmp_parameters(const EVP_PKEY*, const EVP_PKEY*);
int OPENSSL_gmtime_adj(tm*, int, long);
UI* UI_new();
ASN1_OBJECT* OBJ_txt2obj(const char*, int);
BN_MONT_CTX* BN_MONT_CTX_copy(BN_MONT_CTX*, BN_MONT_CTX*);
size_t EC_KEY_priv2oct(const EC_KEY*, unsigned char*, size_t);
int SSL_get_key_update_type(const SSL*);
int ASN1_item_sign(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, EVP_PKEY*, const EVP_MD*);
size_t SSL_SESSION_get_master_key(const SSL_SESSION*, unsigned char*, size_t);
uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER*);
PKCS7* PKCS7_sign_ex(X509*, EVP_PKEY*, stack_st_X509*, BIO*, int, OSSL_LIB_CTX*, const char*);
ADMISSION_SYNTAX* ADMISSION_SYNTAX_new();
ASIdentifierChoice* d2i_ASIdentifierChoice(ASIdentifierChoice**, const unsigned char**, long);
int OPENSSL_sk_push(OPENSSL_STACK*, const void*);
int ASN1_TYPE_get(const ASN1_TYPE*);
int EVP_PKEY_CTX_get0_dh_kdf_ukm(EVP_PKEY_CTX*, unsigned char**);
int i2d_PKCS8PrivateKeyInfo_fp(FILE*, const EVP_PKEY*);
int SSL_is_dtls(const SSL*);
BIGNUM* BN_lebin2bn(const unsigned char*, int, BIGNUM*);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_pub_enc(const RSA_METHOD*);
int i2d_EDIPARTYNAME(const EDIPARTYNAME*, unsigned char**);
void X509_STORE_CTX_set_verify(X509_STORE_CTX*, X509_STORE_CTX_verify_fn);
int OSSL_HTTP_REQ_CTX_set1_req(OSSL_HTTP_REQ_CTX*, const char*, const ASN1_ITEM*, const ASN1_VALUE*);
int ENGINE_remove(ENGINE*);
X509_REQ* PEM_read_bio_X509_REQ(BIO*, X509_REQ**, pem_password_cb*, void*);
const OSSL_PROVIDER* EVP_PKEY_CTX_get0_provider(const EVP_PKEY_CTX*);
EVP_PKEY* d2i_KeyParams(int, EVP_PKEY**, const unsigned char**, long);
X509_ATTRIBUTE* X509at_delete_attr(stack_st_X509_ATTRIBUTE*, int);
int (DH*)* DH_meth_get_generate_key(const DH_METHOD*);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE*);
NETSCAPE_CERT_SEQUENCE* NETSCAPE_CERT_SEQUENCE_new();
int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER*, int (EVP_CIPHER_CTX*, int, int, void*)*);
void OSSL_HTTP_REQ_CTX_set_max_response_length(OSSL_HTTP_REQ_CTX*, unsigned long);
int PEM_write_bio_Parameters(BIO*, const EVP_PKEY*);
const OSSL_PARAM* EVP_MD_settable_ctx_params(const EVP_MD*);
int PEM_write_bio_X509(BIO*, const X509*);
const char* X509_verify_cert_error_string(long);
int EVP_PKEY_CTX_get_rsa_pss_saltlen(EVP_PKEY_CTX*, int*);
void ENGINE_unregister_DH(ENGINE*);
const BIO_METHOD* BIO_s_core();
EVP_RAND_CTX* RAND_get0_primary(OSSL_LIB_CTX*);
const EVP_CIPHER* EVP_aes_256_gcm();
const SSL_METHOD* TLS_client_method();
stack_st_SSL_COMP* SSL_COMP_get_compression_methods();
int X509_sign_ctx(X509*, EVP_MD_CTX*);
int EVP_CIPHER_get_params(EVP_CIPHER*, OSSL_PARAM[]);
EC_KEY* PEM_read_ECPrivateKey(FILE*, EC_KEY**, pem_password_cb*, void*);
ASN1_STRING* ASN1_STRING_new();
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY**, const ASN1_OBJECT*, int, const unsigned char*, int);
const EVP_MD* EVP_md_null();
int EC_KEY_oct2key(EC_KEY*, const unsigned char*, size_t, BN_CTX*);
X509_PUBKEY* X509_PUBKEY_new_ex(OSSL_LIB_CTX*, const char*);
int DH_check_params(const DH*, int*);
int i2d_OCSP_CERTID(const OCSP_CERTID*, unsigned char**);
long SSL_CTX_get_timeout(const SSL_CTX*);
const EVP_CIPHER* EVP_aes_256_wrap_pad();
int RSA_set_method(RSA*, const RSA_METHOD*);
SXNETID* SXNETID_new();
const OSSL_PARAM* EVP_MD_CTX_gettable_params(EVP_MD_CTX*);
int OSSL_PARAM_set_long(OSSL_PARAM*, long int);
uint64_t SSL_get_options(const SSL*);
X509_ALGOR* d2i_X509_ALGOR(X509_ALGOR**, const unsigned char**, long);
int PEM_write_bio_X509_REQ(BIO*, const X509_REQ*);
SSL_verify_cb SSL_get_verify_callback(const SSL*);
char* i2s_ASN1_IA5STRING(X509V3_EXT_METHOD*, ASN1_IA5STRING*);
int X509_EXTENSION_set_data(X509_EXTENSION*, ASN1_OCTET_STRING*);
long X509_CRL_get_version(const X509_CRL*);
int EC_POINT_is_on_curve(const EC_GROUP*, const EC_POINT*, BN_CTX*);
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY*);
ASN1_GENERALIZEDTIME* d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME**, const unsigned char**, long);
int OSSL_PARAM_set_size_t(OSSL_PARAM*, size_t);
void EC_GROUP_free(EC_GROUP*);
int SSL_CTX_set_num_tickets(SSL_CTX*, size_t);
int EVP_PKEY_encrypt_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int EVP_PKEY_fromdata(EVP_PKEY_CTX*, EVP_PKEY**, int, OSSL_PARAM[]);
void ECDSA_SIG_get0(const ECDSA_SIG*, const BIGNUM**, const BIGNUM**);
EC_KEY* d2i_ECParameters(EC_KEY**, const unsigned char**, long);
OSSL_PARAM OSSL_PARAM_construct_uint(const char*, unsigned int*);
X509_PUBKEY* X509_PUBKEY_dup(const X509_PUBKEY*);
void ASN1_INTEGER_free(ASN1_INTEGER*);
void (UI*, void*)* UI_method_get_data_destructor(const UI_METHOD*);
const GENERAL_NAME* ADMISSIONS_get0_admissionAuthority(const ADMISSIONS*);
int EVP_PKEY_CTX_get1_id_len(EVP_PKEY_CTX*, size_t*);
void* SSL_CTX_get_record_padding_callback_arg(const SSL_CTX*);
int DSA_set0_key(DSA*, BIGNUM*, BIGNUM*);
int X509_STORE_CTX_get_error_depth(const X509_STORE_CTX*);
int EVP_PKEY_get_default_digest_nid(EVP_PKEY*, int*);
int i2d_ASN1_TYPE(const ASN1_TYPE*, unsigned char**);
int DSA_meth_set_sign(DSA_METHOD*, DSA_SIG* (const unsigned char*, int, DSA*)*);
int EVP_PKEY_CTX_set_dh_paramgen_generator(EVP_PKEY_CTX*, int);
DSA* DSA_new_method(ENGINE*);
ASN1_PRINTABLESTRING* d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING**, const unsigned char**, long);
int EVP_PBE_find_ex(int, int, int*, int*, EVP_PBE_KEYGEN**, EVP_PBE_KEYGEN_EX**);
void SSL_CTX_set_keylog_callback(SSL_CTX*, SSL_CTX_keylog_cb_func);
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX*, EVP_PKEY_gen_cb*);
X509_ALGOR* PKCS5_pbe_set(int, int, const unsigned char*, int);
OSSL_PARAM OSSL_PARAM_construct_long(const char*, long int*);
void BN_CTX_start(BN_CTX*);
int (BIO*,  char*, size_t, size_t*)* BIO_meth_get_read_ex(const BIO_METHOD*);
int RSA_meth_set_pub_dec(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT*);
PKCS8_PRIV_KEY_INFO* PEM_read_PKCS8_PRIV_KEY_INFO(FILE*, PKCS8_PRIV_KEY_INFO**, pem_password_cb*, void*);
int BIO_new_bio_pair(BIO**, size_t, BIO**, size_t);
EVP_RAND* EVP_RAND_CTX_get0_rand(EVP_RAND_CTX*);
ADMISSION_SYNTAX* d2i_ADMISSION_SYNTAX(ADMISSION_SYNTAX**, const unsigned char**, long);
int BIO_write(BIO*, const void*, int);
void SXNET_free(SXNET*);
int RSA_meth_set0_app_data(RSA_METHOD*, void*);
X509_VERIFY_PARAM* SSL_CTX_get0_param(SSL_CTX*);
void SSL_set_verify_depth(SSL*, int);
const EVP_CIPHER* EVP_aes_192_ecb();
int SSL_use_RSAPrivateKey_file(SSL*, const char*, int);
void BN_with_flags(BIGNUM*, const BIGNUM*, int);
ASN1_STRING* X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY*);
void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX*, CTLOG_STORE*);
int UI_get_result_string_length(UI_STRING*);
SCRYPT_PARAMS* d2i_SCRYPT_PARAMS(SCRYPT_PARAMS**, const unsigned char**, long);
const char* EVP_KEYEXCH_get0_description(const EVP_KEYEXCH*);
int X509_verify_cert(X509_STORE_CTX*);
void X509_REVOKED_free(X509_REVOKED*);
int i2d_PROXY_POLICY(const PROXY_POLICY*, unsigned char**);
EVP_PKEY* d2i_PUBKEY_ex(EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
X509_EXTENSION* X509_EXTENSION_create_by_OBJ(X509_EXTENSION**, const ASN1_OBJECT*, int, ASN1_OCTET_STRING*);
int SSL_CTX_set_cipher_list(SSL_CTX*, const char*);
int EVP_PKEY_CTX_set_dh_nid(EVP_PKEY_CTX*, int);
int SSL_CTX_set_async_callback(SSL_CTX*, SSL_async_callback_fn);
void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM*, int);
int SSL_accept(SSL*);
EVP_PKEY* d2i_PrivateKey_ex_fp(FILE*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
OSSL_PARAM OSSL_PARAM_construct_uint64(const char*, uint64_t*);
int i2d_OCSP_RESPDATA(const OCSP_RESPDATA*, unsigned char**);
X509_REVOKED* X509_REVOKED_new();
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX*, void*);
stack_st_X509* X509_STORE_CTX_get1_chain(const X509_STORE_CTX*);
int SSL_CTX_set_srp_cb_arg(SSL_CTX*, void*);
char* i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD*, const ASN1_ENUMERATED*);
ASN1_OCTET_STRING* PKCS7_get_octet_string(PKCS7*);
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX*, ASN1_TYPE*);
ec_key_st* EVP_PKEY_get1_EC_KEY(EVP_PKEY*);
void ISSUING_DIST_POINT_free(ISSUING_DIST_POINT*);
int EVP_CipherInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int);
const SSL_METHOD* TLS_server_method();
X509_REQ_INFO* X509_REQ_INFO_new();
void* X509_STORE_CTX_get_ex_data(const X509_STORE_CTX*, int);
X509_NAME* X509_get_subject_name(const X509*);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME*, time_t);
int EC_POINT_mul(const EC_GROUP*, EC_POINT*, const BIGNUM*, const EC_POINT*, const BIGNUM*, BN_CTX*);
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM*, stack_st_ASN1_OBJECT*);
unsigned int OPENSSL_version_major();
unsigned char* SHA256(const unsigned char*, size_t, unsigned char*);
int EVP_DigestSign(EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
const EVP_CIPHER* EVP_aes_128_ctr();
int RAND_set_seed_source_type(OSSL_LIB_CTX*, const char*, const char*);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_priv_dec(const RSA_METHOD*);
int OCSP_check_validity(ASN1_GENERALIZEDTIME*, ASN1_GENERALIZEDTIME*, long, long);
void EVP_PKEY_meth_free(EVP_PKEY_METHOD*);
int EVP_PKEY_CTX_get_rsa_mgf1_md_name(EVP_PKEY_CTX*,  char*, size_t);
int X509_check_purpose(X509*, int, int);
void* OPENSSL_sk_delete(OPENSSL_STACK*, int);
BIO* BIO_new_connect(const char*);
int OSSL_PARAM_get_int64(const OSSL_PARAM*, int64_t*);
int DSA_meth_set_verify(DSA_METHOD*, int (const unsigned char*, int, DSA_SIG*, DSA*)*);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER*);
int X509_set_issuer_name(X509*, const X509_NAME*);
int X509_cmp(const X509*, const X509*);
int X509_sign(X509*, EVP_PKEY*, const EVP_MD*);
int BIO_meth_set_puts(BIO_METHOD*, int (BIO*, const char*)*);
X509_EXTENSION* X509_CRL_delete_ext(X509_CRL*, int);
const EVP_CIPHER* EVP_aes_192_cfb1();
OCSP_REQINFO* OCSP_REQINFO_new();
const SSL_METHOD* TLSv1_method();
int EC_GROUP_get_curve(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
int BN_is_bit_set(const BIGNUM*, int);
stack_st_X509_OBJECT* X509_STORE_get0_objects(const X509_STORE*);
void SSL_set_quiet_shutdown(SSL*, int);
int HMAC_CTX_copy(HMAC_CTX*, HMAC_CTX*);
int HMAC_Update(HMAC_CTX*, const unsigned char*, size_t);
int X509_NAME_get0_der(const X509_NAME*, const unsigned char**, size_t*);
int PEM_write_bio_X509_REQ_NEW(BIO*, const X509_REQ*);
int CRYPTO_secure_malloc_init(size_t, size_t);
void ENGINE_register_all_DH();
int SHA1_Final(unsigned char*, SHA_CTX*);
int OSSL_HTTP_parse_url(const char*, int*,  char**,  char**,  char**, int*,  char**,  char**,  char**);
uint64_t SSL_CTX_clear_options(SSL_CTX*, uint64_t);
unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION*);
int i2d_POLICYINFO(const POLICYINFO*, unsigned char**);
const char* UI_get0_test_string(UI_STRING*);
int RSA_meth_set_finish(RSA_METHOD*, int (RSA*)*);
int ASN1_STRING_print_ex_fp(FILE*, const ASN1_STRING*, unsigned long);
int EVP_PKEY_get_int_param(const EVP_PKEY*, const char*, int*);
void SSL_CTX_set_client_hello_cb(SSL_CTX*, SSL_client_hello_cb_fn, void*);
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO*);
int X509at_get_attr_count(const stack_st_X509_ATTRIBUTE*);
int X509_REVOKED_get_ext_by_NID(const X509_REVOKED*, int, int);
int SSL_CTX_use_RSAPrivateKey(SSL_CTX*, RSA*);
int DH_set0_pqg(DH*, BIGNUM*, BIGNUM*, BIGNUM*);
const OSSL_PARAM* EVP_CIPHER_gettable_ctx_params(const EVP_CIPHER*);
const char* SSL_alert_type_string_long(int);
void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*)**);
int EVP_MD_meth_set_update(EVP_MD*, int (EVP_MD_CTX*, const void*, size_t)*);
int ECDSA_sign(int, const unsigned char*, int, unsigned char*, unsigned int*, EC_KEY*);
long SSL_SESSION_set_timeout(SSL_SESSION*, long);
void BIO_set_init(BIO*, int);
void BIO_set_retry_reason(BIO*, int);
int X509_NAME_print(BIO*, const X509_NAME*, int);
EVP_PKEY* d2i_PKCS8PrivateKey_bio(BIO*, EVP_PKEY**, pem_password_cb*, void*);
int X509_STORE_unlock(X509_STORE*);
const EVP_CIPHER* EVP_aria_192_ofb();
ASN1_STRING* d2i_ASN1_PRINTABLE(ASN1_STRING**, const unsigned char**, long);
void EVP_CIPHER_free(EVP_CIPHER*);
const EVP_CIPHER* EVP_des_cfb8();
X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX*);
EVP_PKEY* X509_get0_pubkey(const X509*);
int BIO_meth_set_callback_ctrl(BIO_METHOD*, long (BIO*, int, BIO_info_cb*)*);
int DSAparams_print(BIO*, const DSA*);
void DH_set_default_method(const DH_METHOD*);
int X509_add1_ext_i2d(X509*, int, void*, int, unsigned long);
void* X509at_get0_data_by_OBJ(const stack_st_X509_ATTRIBUTE*, const ASN1_OBJECT*, int, int);
int ENGINE_set_ex_data(ENGINE*, int, void*);
ASN1_UNIVERSALSTRING* d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING**, const unsigned char**, long);
int EVP_PKEY_add1_attr(EVP_PKEY*, X509_ATTRIBUTE*);
void EC_KEY_set_asn1_flag(EC_KEY*, int);
X509_LOOKUP* X509_LOOKUP_new(X509_LOOKUP_METHOD*);
void X509_ALGOR_free(X509_ALGOR*);
int UI_dup_verify_string(UI*, const char*, int,  char*, int, int, const char*);
void (ssl_ctx_st*, SSL_SESSION*)* SSL_CTX_sess_get_remove_cb(SSL_CTX*);
int X509_STORE_set_trust(X509_STORE*, int);
int BN_exp(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int ASN1_STRING_print_ex(BIO*, const ASN1_STRING*, unsigned long);
int ASN1_INTEGER_set(ASN1_INTEGER*, long);
int OCSP_resp_count(OCSP_BASICRESP*);
int BIO_printf(BIO*, const char*);
void ISSUER_SIGN_TOOL_free(ISSUER_SIGN_TOOL*);
int SSL_use_PrivateKey_ASN1(int, SSL*, const unsigned char*, long);
const char* EVP_RAND_get0_description(const EVP_RAND*);
unsigned long ERR_get_error();
const ASN1_ITEM* X509_ALGOR_it();
void SSL_set_tmp_dh_callback(SSL*, DH* (SSL*, int, int)*);
int UI_method_set_closer(UI_METHOD*, int (UI*)*);
int EC_GROUP_get_asn1_flag(const EC_GROUP*);
int OCSP_check_nonce(OCSP_REQUEST*, OCSP_BASICRESP*);
void EVP_PKEY_CTX_free(EVP_PKEY_CTX*);
ASIdentifiers* ASIdentifiers_new();
SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX*);
X509_NAME* X509_NAME_new();
int (RSA*, int, BIGNUM*, BN_GENCB*)* RSA_meth_get_keygen(const RSA_METHOD*);
int EVP_EncodeUpdate(EVP_ENCODE_CTX*, unsigned char*, int*, const unsigned char*, int);
const EVP_CIPHER* EVP_camellia_128_ctr();
EVP_PKEY* ENGINE_load_private_key(ENGINE*, const char*, UI_METHOD*, void*);
char* BIO_ADDR_hostname_string(const BIO_ADDR*, int);
int EVP_CIPHER_names_do_all(const EVP_CIPHER*, void (const char*, void*)*, void*);
X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX*);
unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM*);
int SHA384_Final(unsigned char*, SHA512_CTX*);
int EVP_PKEY_CTX_get_ecdh_kdf_md(EVP_PKEY_CTX*, const EVP_MD**);
const char* UI_get0_result_string(UI_STRING*);
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE*);
void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, EVP_PKEY*)*);
int ENGINE_register_RSA(ENGINE*);
PKCS7_RECIP_INFO* d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO**, const unsigned char**, long);
int EVP_PKEY_get_base_id(const EVP_PKEY*);
void EC_KEY_set_conv_form(EC_KEY*, point_conversion_form_t);
void EC_GROUP_clear_free(EC_GROUP*);
void ASIdentifierChoice_free(ASIdentifierChoice*);
int SSL_CTX_set_ct_validation_callback(SSL_CTX*, ssl_ct_validation_cb, void*);
int i2d_IPAddressOrRange(const IPAddressOrRange*, unsigned char**);
X509* X509_new();
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int i2d_RSAPrivateKey_bio(BIO*, const RSA*);
int RSA_bits(const RSA*);
int EVP_PKEY_CTX_set_rsa_pss_keygen_md(EVP_PKEY_CTX*, const EVP_MD*);
int X509_REQ_set_version(X509_REQ*, long);
BIGNUM* SSL_get_srp_g(SSL*);
const OSSL_PARAM* EVP_PKEY_gettable_params(const EVP_PKEY*);
DSA* PEM_read_DSAparams(FILE*, DSA**, pem_password_cb*, void*);
X509_REQ* d2i_X509_REQ(X509_REQ**, const unsigned char**, long);
const OSSL_PARAM* EVP_ASYM_CIPHER_settable_ctx_params(const EVP_ASYM_CIPHER*);
X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(const X509_STORE*);
const EC_GROUP* EC_KEY_get0_group(const EC_KEY*);
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX*, int);
const ASN1_OCTET_STRING* X509_get0_subject_key_id(X509*);
int i2d_X509_CRL_INFO(const X509_CRL_INFO*, unsigned char**);
EVP_PKEY* d2i_PUBKEY_bio(BIO*, EVP_PKEY**);
X509_ALGORS* d2i_X509_ALGORS(X509_ALGORS**, const unsigned char**, long);
ASN1_UTCTIME* ASN1_UTCTIME_dup(const ASN1_UTCTIME*);
X509_NAME_ENTRY* X509_NAME_ENTRY_dup(const X509_NAME_ENTRY*);
int BN_BLINDING_convert(BIGNUM*, BN_BLINDING*, BN_CTX*);
void* ASN1_item_d2i_bio(const ASN1_ITEM*, BIO*, void*);
PKCS7_SIGNER_INFO* PKCS7_sign_add_signer(PKCS7*, X509*, EVP_PKEY*, const EVP_MD*, int);
int SSL_use_cert_and_key(SSL*, X509*, EVP_PKEY*, stack_st_X509*, int);
uint32_t X509_get_extended_key_usage(X509*);
PROFESSION_INFO* d2i_PROFESSION_INFO(PROFESSION_INFO**, const unsigned char**, long);
int SSL_connect(SSL*);
OCSP_RESPBYTES* OCSP_RESPBYTES_new();
int OSSL_PARAM_get_utf8_ptr(const OSSL_PARAM*, const char**);
X509* d2i_X509(X509**, const unsigned char**, long);
DSA* PEM_read_bio_DSA_PUBKEY(BIO*, DSA**, pem_password_cb*, void*);
RSA* PEM_read_RSAPrivateKey(FILE*, RSA**, pem_password_cb*, void*);
int UI_UTIL_read_pw( char*,  char*, int, const char*, int);
int BN_rand_ex(BIGNUM*, int, int, int, unsigned int, BN_CTX*);
int BIO_ctrl_reset_read_request(BIO*);
EVP_PKEY_gen_cb* EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX*);
int SSL_CTX_set_generate_session_id(SSL_CTX*, GEN_SESSION_CB);
int (DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*)* DSA_meth_get_paramgen(const DSA_METHOD*);
int EVP_MAC_CTX_get_params(EVP_MAC_CTX*, OSSL_PARAM[]);
PKCS7* PEM_read_PKCS7(FILE*, PKCS7**, pem_password_cb*, void*);
int OPENSSL_sk_reserve(OPENSSL_STACK*, int);
void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX*, EVP_PKEY_CTX*);
int SSL_key_update(SSL*, int);
int EVP_PKEY_get_size_t_param(const EVP_PKEY*, const char*, size_t*);
int BIO_get_retry_reason(BIO*);
char* CRYPTO_strndup(const char*, size_t, const char*, int);
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP*);
int i2d_SXNETID(const SXNETID*, unsigned char**);
const char* ENGINE_get_name(const ENGINE*);
const EVP_CIPHER* EVP_aes_256_cbc_hmac_sha1();
int BIO_read_ex(BIO*, void*, size_t, size_t*);
const OSSL_PARAM* EVP_MAC_gettable_params(const EVP_MAC*);
int i2d_PrivateKey(const EVP_PKEY*, unsigned char**);
int i2d_OCSP_SERVICELOC(const OCSP_SERVICELOC*, unsigned char**);
const EVP_CIPHER* EVP_aes_256_xts();
RSA_PSS_PARAMS* RSA_PSS_PARAMS_dup(const RSA_PSS_PARAMS*);
int ASN1_TIME_set_string_X509(ASN1_TIME*, const char*);
int PKCS7_add_certificate(PKCS7*, X509*);
const EVP_CIPHER* EVP_aria_128_ccm();
int SSL_SESSION_set1_ticket_appdata(SSL_SESSION*, const void*, size_t);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_get0(int);
void BIO_ADDRINFO_free(BIO_ADDRINFO*);
ISSUER_SIGN_TOOL* ISSUER_SIGN_TOOL_new();
int BIO_up_ref(BIO*);
const UI_METHOD* UI_get_method(UI*);
int X509_CRL_set1_lastUpdate(X509_CRL*, const ASN1_TIME*);
void (const SSL*, int, int)* SSL_CTX_get_info_callback(SSL_CTX*);
uint32_t X509_get_extension_flags(X509*);
int SCT_get_signature_nid(const SCT*);
int EC_KEY_set_public_key_affine_coordinates(EC_KEY*, BIGNUM*, BIGNUM*);
const EVP_CIPHER* EVP_aria_192_cfb128();
BIGNUM* BN_native2bn(const unsigned char*, int, BIGNUM*);
int EVP_RAND_reseed(EVP_RAND_CTX*, int, const unsigned char*, size_t, const unsigned char*, size_t);
int EVP_PKEY_get_utf8_string_param(const EVP_PKEY*, const char*,  char*, size_t, size_t*);
void SSL_CTX_sess_set_new_cb(SSL_CTX*, int (ssl_st*, SSL_SESSION*)*);
const char* OBJ_nid2sn(int);
int i2d_USERNOTICE(const USERNOTICE*, unsigned char**);
const EVP_CIPHER* EVP_aria_192_cbc();
const EVP_MD* EVP_md5();
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED*, int64_t);
int OSSL_PARAM_get_uint(const OSSL_PARAM*, unsigned int*);
int EC_GROUP_get_curve_GF2m(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
UI_METHOD* UI_create_method(const char*);
int EVP_PKEY_CTX_set_dsa_paramgen_md(EVP_PKEY_CTX*, const EVP_MD*);
size_t SSL_CTX_get_num_tickets(const SSL_CTX*);
void* OPENSSL_sk_value(const OPENSSL_STACK*, int);
BIO* BIO_push(BIO*, BIO*);
int BIO_ADDRINFO_family(const BIO_ADDRINFO*);
const BIO_METHOD* BIO_s_null();
int RSA_verify(int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, RSA*);
POLICY_CONSTRAINTS* POLICY_CONSTRAINTS_new();
int PEM_write_bio_PrivateKey(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int i2d_DSA_PUBKEY(const DSA*, unsigned char**);
int BN_mask_bits(BIGNUM*, int);
size_t CRYPTO_secure_used();
const char* RSA_meth_get0_name(const RSA_METHOD*);
int SMIME_write_PKCS7(BIO*, PKCS7*, BIO*, int);
int i2d_PROFESSION_INFO(const PROFESSION_INFO*, unsigned char**);
CRL_DIST_POINTS* d2i_CRL_DIST_POINTS(CRL_DIST_POINTS**, const unsigned char**, long);
int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS*, const char*);
int (EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, size_t)* EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER*);
void OPENSSL_fork_prepare();
const EVP_CIPHER* EVP_camellia_256_cfb8();
const unsigned char* SSL_SESSION_get0_id_context(const SSL_SESSION*, unsigned int*);
size_t SSL_get_server_random(const SSL*, unsigned char*, size_t);
int X509_NAME_get_text_by_NID(const X509_NAME*, int,  char*, int);
RSA* RSA_new();
PBE2PARAM* d2i_PBE2PARAM(PBE2PARAM**, const unsigned char**, long);
X509_ALGOR* PKCS5_pbe_set_ex(int, int, const unsigned char*, int, OSSL_LIB_CTX*);
void EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD*, int (X509_SIG_INFO*, const X509_ALGOR*, const ASN1_STRING*)*);
void EVP_ASYM_CIPHER_do_all_provided(OSSL_LIB_CTX*, void (EVP_ASYM_CIPHER*, void*)*, void*);
void SSL_set_psk_server_callback(SSL*, SSL_psk_server_cb_func);
int i2d_PrivateKey_bio(BIO*, const EVP_PKEY*);
USERNOTICE* USERNOTICE_new();
int BN_mod_mul(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
CTLOG_STORE* CTLOG_STORE_new();
int ASYNC_is_capable();
ASN1_INTEGER* ASN1_INTEGER_new();
int PKCS7_type_is_other(PKCS7*);
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX*, EVP_PKEY*);
void PBKDF2PARAM_free(PBKDF2PARAM*);
void CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES*);
int BIO_connect(int, const BIO_ADDR*, int);
int EVP_PKEY_get_bn_param(const EVP_PKEY*, const char*, BIGNUM**);
int SSL_shutdown(SSL*);
int SSL_use_psk_identity_hint(SSL*, const char*);
int DH_check_pub_key_ex(const DH*, const BIGNUM*);
int RAND_pseudo_bytes(unsigned char*, int);
int EVP_PKEY_CTX_get1_id(EVP_PKEY_CTX*, void*);
int i2d_DSA_PUBKEY_fp(FILE*, const DSA*);
int i2d_ASN1_SET_ANY(const ASN1_SEQUENCE_ANY*, unsigned char**);
int EVP_SignFinal(EVP_MD_CTX*, unsigned char*, unsigned int*, EVP_PKEY*);
void SSL_set_security_callback(SSL*, int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)*);
const EVP_CIPHER* EVP_get_cipherbyname(const char*);
void ENGINE_unregister_RAND(ENGINE*);
const char* EVP_PKEY_CTX_get0_propq(const EVP_PKEY_CTX*);
int SSL_export_keying_material(SSL*, unsigned char*, size_t, const char*, size_t, const unsigned char*, size_t, int);
EC_KEY* EC_KEY_new_ex(OSSL_LIB_CTX*, const char*);
int EVP_PKEY_set1_DH(EVP_PKEY*, dh_st*);
int EVP_DigestVerifyUpdate(EVP_MD_CTX*, const void*, size_t);
stack_st_X509_REVOKED* X509_CRL_get_REVOKED(X509_CRL*);
UI_METHOD* UI_OpenSSL();
EVP_PKEY* PEM_read_PrivateKey(FILE*, EVP_PKEY**, pem_password_cb*, void*);
const char* SSL_get_psk_identity_hint(const SSL*);
EVP_PKEY_CTX* EVP_MD_CTX_get_pkey_ctx(const EVP_MD_CTX*);
const OSSL_PARAM* EVP_KEYEXCH_gettable_ctx_params(const EVP_KEYEXCH*);
void OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO*);
const char* SSL_state_string_long(const SSL*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE**, const ASN1_OBJECT*, int, const void*, int);
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
OCSP_REQUEST* d2i_OCSP_REQUEST(OCSP_REQUEST**, const unsigned char**, long);
RSA* d2i_RSAPublicKey_bio(BIO*, RSA**);
int OPENSSL_init_crypto(uint64_t, const OPENSSL_INIT_SETTINGS*);
int EVP_PKEY_CTX_set_dh_rfc5114(EVP_PKEY_CTX*, int);
const char* SSL_get_version(const SSL*);
int i2d_X509_VAL(const X509_VAL*, unsigned char**);
void SSL_SESSION_get0_ticket(const SSL_SESSION*, const unsigned char**, size_t*);
size_t HMAC_size(const HMAC_CTX*);
int ENGINE_register_DH(ENGINE*);
EVP_PKEY* X509_get_pubkey(X509*);
const EVP_PKEY_METHOD* EVP_PKEY_meth_find(int);
const EVP_CIPHER* EVP_aes_256_wrap();
EVP_CIPHER* EVP_CIPHER_meth_new(int, int, int);
void SCT_LIST_print(const stack_st_SCT*, BIO*, int, const char*, const CTLOG_STORE*);
const EVP_MD* EVP_sha512_224();
int BN_mod_add(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const EVP_MD* EVP_sha256();
const char* DH_meth_get0_name(const DH_METHOD*);
int SSL_CTX_set_default_verify_store(SSL_CTX*);
int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM*, const char*);
BIGNUM* BN_new();
EC_GROUP* EC_GROUP_new_from_params(const OSSL_PARAM[], OSSL_LIB_CTX*, const char*);
void RSA_free(RSA*);
int EVP_DigestVerifyInit(EVP_MD_CTX*, EVP_PKEY_CTX**, const EVP_MD*, ENGINE*, EVP_PKEY*);
void CTLOG_get0_log_id(const CTLOG*, const uint8_t**, size_t*);
void DTLS_set_timer_cb(SSL*, DTLS_timer_cb);
const stack_st_X509* OCSP_resp_get0_certs(const OCSP_BASICRESP*);
void X509_CERT_AUX_free(X509_CERT_AUX*);
int X509v3_get_ext_by_NID(const stack_st_X509_EXTENSION*, int, int);
X509_VAL* X509_VAL_new();
OSSL_PARAM OSSL_PARAM_construct_size_t(const char*, size_t*);
int RSA_meth_set_bn_mod_exp(RSA_METHOD*, int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int DSA_meth_set_finish(DSA_METHOD*, int (DSA*)*);
void ERR_add_error_data(int);
void EVP_CIPHER_do_all_provided(OSSL_LIB_CTX*, void (EVP_CIPHER*, void*)*, void*);
OSSL_PARAM OSSL_PARAM_construct_int32(const char*, int32_t*);
int EVP_PBE_CipherInit_ex(ASN1_OBJECT*, const char*, int, ASN1_TYPE*, EVP_CIPHER_CTX*, int, OSSL_LIB_CTX*, const char*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_from_name(OSSL_LIB_CTX*, const char*, const char*);
SSL_SESSION* d2i_SSL_SESSION(SSL_SESSION**, const unsigned char**, long);
ASN1_VALUE* SMIME_read_ASN1_ex(BIO*, int, BIO**, const ASN1_ITEM*, ASN1_VALUE**, OSSL_LIB_CTX*, const char*);
int SSL_has_matching_session_id(const SSL*, const unsigned char*, unsigned int);
PKCS7* d2i_PKCS7_fp(FILE*, PKCS7**);
void* X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE*, int, int, void*);
EVP_PKEY* d2i_PrivateKey_ex_bio(BIO*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
int SMIME_write_ASN1(BIO*, ASN1_VALUE*, BIO*, int, int, int, stack_st_X509_ALGOR*, const ASN1_ITEM*);
X509_EXTENSION* X509_REVOKED_delete_ext(X509_REVOKED*, int);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE*, const ASN1_OBJECT*);
int OBJ_obj2txt( char*, int, const ASN1_OBJECT*, int);
int SCT_set_source(SCT*, sct_source_t);
int i2d_ASN1_GENERALIZEDTIME(const ASN1_GENERALIZEDTIME*, unsigned char**);
int SSL_export_keying_material_early(SSL*, unsigned char*, size_t, const char*, size_t, const unsigned char*, size_t);
const EVP_CIPHER* EVP_sm4_ecb();
void CRYPTO_secure_free(void*, const char*, int);
const EVP_CIPHER* EVP_aes_192_cfb128();
int SSL_CTX_add1_to_CA_list(SSL_CTX*, const X509*);
int X509_REQ_add1_attr(X509_REQ*, X509_ATTRIBUTE*);
int i2d_PrivateKey_fp(FILE*, const EVP_PKEY*);
void ECPKPARAMETERS_free(ECPKPARAMETERS*);
int BN_bn2mpi(const BIGNUM*, unsigned char*);
int EVP_PKEY_keygen(EVP_PKEY_CTX*, EVP_PKEY**);
int SSL_set_srp_server_param(SSL*, const BIGNUM*, const BIGNUM*, BIGNUM*, BIGNUM*,  char*);
int X509_cmp_timeframe(const X509_VERIFY_PARAM*, const ASN1_TIME*, const ASN1_TIME*);
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX*, const char*, int);
const SSL_CIPHER* SSL_get_pending_cipher(const SSL*);
unsigned long ERR_peek_last_error();
int EVP_MD_meth_set_cleanup(EVP_MD*, int (EVP_MD_CTX*)*);
int EVP_CipherFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
OCSP_REQUEST* OCSP_REQUEST_new();
int EC_KEY_set_private_key(EC_KEY*, const BIGNUM*);
int OSSL_PARAM_get_utf8_string_ptr(const OSSL_PARAM*, const char**);
int i2d_ECPKParameters(const EC_GROUP*, unsigned char**);
X509_REQ* PEM_read_X509_REQ(FILE*, X509_REQ**, pem_password_cb*, void*);
int EVP_PKEY_copy_parameters(EVP_PKEY*, const EVP_PKEY*);
int EC_KEY_precompute_mult(EC_KEY*, BN_CTX*);
int SSL_CTX_use_certificate_ASN1(SSL_CTX*, int, const unsigned char*);
const UI_METHOD* UI_get_default_method();
X509_PUBKEY* X509_PUBKEY_new();
int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
SXNET* SXNET_new();
void OPENSSL_sk_sort(OPENSSL_STACK*);
int SSL_get_early_data_status(const SSL*);
uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX*);
stack_st_SSL_CIPHER* SSL_CTX_get_ciphers(const SSL_CTX*);
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, const ASN1_INTEGER*, X509_OBJECT*);
void ASN1_STRING_free(ASN1_STRING*);
ASN1_OBJECT* d2i_ASN1_OBJECT(ASN1_OBJECT**, const unsigned char**, long);
void SSL_set_cert_cb(SSL*, int (SSL*, void*)*, void*);
const ASN1_PRINTABLESTRING* PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO*);
void SSL_CTX_set_alpn_select_cb(SSL_CTX*, SSL_CTX_alpn_select_cb_func, void*);
int OSSL_PARAM_get_double(const OSSL_PARAM*, double*);
stack_st_X509* X509_STORE_get1_all_certs(X509_STORE*);
IPAddressRange* d2i_IPAddressRange(IPAddressRange**, const unsigned char**, long);
X509_EXTENSION* X509_delete_ext(X509*, int);
OCSP_RESPID* d2i_OCSP_RESPID(OCSP_RESPID**, const unsigned char**, long);
int OCSP_RESPID_match(OCSP_RESPID*, X509*);
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX*, int);
void SSL_CTX_set0_CA_list(SSL_CTX*, stack_st_X509_NAME*);
EVP_PKEY* d2i_AutoPrivateKey(EVP_PKEY**, const unsigned char**, long);
X509_PUBKEY* d2i_X509_PUBKEY(X509_PUBKEY**, const unsigned char**, long);
const BIO_METHOD* BIO_s_connect();
void X509_set0_distinguishing_id(X509*, ASN1_OCTET_STRING*);
int EC_KEY_generate_key(EC_KEY*);
int SSL_SESSION_set1_master_key(SSL_SESSION*, const unsigned char*, size_t);
int (EVP_MD_CTX*, const EVP_MD_CTX*)* EVP_MD_meth_get_copy(const EVP_MD*);
int SSL_select_next_proto(unsigned char**, unsigned char*, const unsigned char*, unsigned int, const unsigned char*, unsigned int);
void EC_GROUP_set_point_conversion_form(EC_GROUP*, point_conversion_form_t);
int EVP_CIPHER_CTX_get_iv_length(const EVP_CIPHER_CTX*);
int OSSL_PARAM_set_uint(OSSL_PARAM*, unsigned int);
RSA* d2i_RSAPrivateKey_fp(FILE*, RSA**);
SCT* SCT_new_from_base64(unsigned char, const char*, ct_log_entry_type_t, uint64_t, const char*, const char*);
int EVP_PKEY_CTX_set_dsa_paramgen_type(EVP_PKEY_CTX*, const char*);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY*, const ASN1_OBJECT*, int, const unsigned char*, int);
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY**, int, int, const unsigned char*, int);
unsigned char* ASN1_STRING_data(ASN1_STRING*);
ENGINE* ENGINE_get_last();
DH* DSA_dup_DH(const DSA*);
void OSSL_PARAM_set_all_unmodified(OSSL_PARAM*);
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn*, CRYPTO_realloc_fn*, CRYPTO_free_fn*);
const EVP_CIPHER* EVP_rc2_ecb();
void X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX*, stack_st_X509*);
int OPENSSL_sk_num(const OPENSSL_STACK*);
int EVP_PBE_scrypt_ex(const char*, size_t, const unsigned char*, size_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char*, size_t, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_chacha20_poly1305();
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_txt(stack_st_X509_ATTRIBUTE**, const char*, int, const unsigned char*, int);
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD*, void (EVP_PKEY*)*);
int X509_STORE_load_locations_ex(X509_STORE*, const char*, const char*, OSSL_LIB_CTX*, const char*);
int UI_add_input_boolean(UI*, const char*, const char*, const char*, const char*, int,  char*);
int ASN1_TIME_print(BIO*, const ASN1_TIME*);
uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX*);
int i2d_ASIdentifiers(const ASIdentifiers*, unsigned char**);
int PKCS7_decrypt(PKCS7*, EVP_PKEY*, X509*, BIO*, int);
int PEM_write_DHparams(FILE*, const DH*);
int SSL_CTX_dane_enable(SSL_CTX*);
int EC_POINT_add(const EC_GROUP*, EC_POINT*, const EC_POINT*, const EC_POINT*, BN_CTX*);
int BN_RECP_CTX_set(BN_RECP_CTX*, const BIGNUM*, BN_CTX*);
const BIGNUM* EC_GROUP_get0_field(const EC_GROUP*);
int EVP_PKEY_CTX_set_dh_paramgen_subprime_len(EVP_PKEY_CTX*, int);
const EVP_CIPHER* EVP_aria_256_ccm();
int SSL_dane_enable(SSL*, const char*);
void SSL_CTX_set_default_passwd_cb(SSL_CTX*, pem_password_cb*);
int X509_STORE_load_store(X509_STORE*, const char*);
int SSL_config(SSL*, const char*);
int EVP_VerifyFinal(EVP_MD_CTX*, const unsigned char*, unsigned int, EVP_PKEY*);
int OCSP_RESPID_match_ex(OCSP_RESPID*, X509*, OSSL_LIB_CTX*, const char*);
int SSL_SESSION_up_ref(SSL_SESSION*);
char* ERR_error_string(unsigned long,  char*);
int EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER*, int (EVP_CIPHER_CTX*, ASN1_TYPE*)*);
int RAND_load_file(const char*, long);
int X509_REVOKED_add_ext(X509_REVOKED*, X509_EXTENSION*, int);
int PKCS5_PBE_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
const char* OBJ_nid2ln(int);
void OPENSSL_sk_free(OPENSSL_STACK*);
int DSA_generate_key(DSA*);
void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY*, ASN1_STRING*);
int i2d_EC_PUBKEY(const EC_KEY*, unsigned char**);
void SSL_set_default_read_buffer_len(SSL*, size_t);
const RSA_METHOD* RSA_get_default_method();
OSSL_LIB_CTX* OSSL_LIB_CTX_new_child(const OSSL_CORE_HANDLE*, const OSSL_DISPATCH*);
int OCSP_basic_sign(OCSP_BASICRESP*, X509*, EVP_PKEY*, const EVP_MD*, stack_st_X509*, unsigned long);
int X509_CRL_get0_by_cert(X509_CRL*, X509_REVOKED**, X509*);
int EVP_EncryptFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
POLICYQUALINFO* d2i_POLICYQUALINFO(POLICYQUALINFO**, const unsigned char**, long);
void BIO_vfree(BIO*);
int i2d_RSA_PUBKEY_bio(BIO*, const RSA*);
stack_st_SRTP_PROTECTION_PROFILE* SSL_get_srtp_profiles(SSL*);
void EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD*, void (EVP_PKEY_CTX*)**);
const OSSL_PARAM* EVP_RAND_gettable_params(const EVP_RAND*);
CONF_METHOD* NCONF_default();
int X509_LOOKUP_init(X509_LOOKUP*);
int BN_bn2lebinpad(const BIGNUM*, unsigned char*, int);
int SSL_set_session_id_context(SSL*, const unsigned char*, unsigned int);
int X509V3_add1_i2d(stack_st_X509_EXTENSION**, int, void*, int, unsigned long);
const char* EVP_ASYM_CIPHER_get0_name(const EVP_ASYM_CIPHER*);
X509_PUBKEY* X509_REQ_get_X509_PUBKEY(X509_REQ*);
void X509_STORE_CTX_free(X509_STORE_CTX*);
const EVP_CIPHER* EVP_des_ede_cbc();
int SSL_get_peer_signature_type_nid(const SSL*, int*);
int ASN1_STRING_set(ASN1_STRING*, const void*, int);
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE*);
EVP_PKEY_METHOD* EVP_PKEY_meth_new(int, int);
int PEM_write(FILE*, const char*, const char*, const unsigned char*, long);
int SSL_SESSION_set1_id_context(SSL_SESSION*, const unsigned char*, unsigned int);
const EVP_MD* EVP_get_digestbyname(const char*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE**, const char*, int, const unsigned char*, int);
const BIGNUM* BN_get0_nist_prime_192();
int RSA_generate_key_ex(RSA*, int, BIGNUM*, BN_GENCB*);
int SSL_SESSION_print_fp(FILE*, const SSL_SESSION*);
int i2d_OCSP_CERTSTATUS(const OCSP_CERTSTATUS*, unsigned char**);
const OSSL_PARAM* EVP_KEM_settable_ctx_params(const EVP_KEM*);
int PEM_read(FILE*,  char**,  char**, unsigned char**, long*);
const OSSL_PARAM* EVP_MAC_gettable_ctx_params(const EVP_MAC*);
void X509_STORE_CTX_set_error(X509_STORE_CTX*, int);
int i2d_RSAPublicKey(const RSA*, unsigned char**);
int OCSP_resp_find(OCSP_BASICRESP*, OCSP_CERTID*, int);
int (EVP_MD_CTX*)* EVP_MD_meth_get_init(const EVP_MD*);
int SMIME_write_ASN1_ex(BIO*, ASN1_VALUE*, BIO*, int, int, int, stack_st_X509_ALGOR*, const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int PEM_read_bio_ex(BIO*,  char**,  char**, unsigned char**, long*, unsigned int);
const ASN1_TIME* X509_CRL_get0_lastUpdate(const X509_CRL*);
int OSSL_PARAM_set_uint32(OSSL_PARAM*, uint32_t);
const OSSL_PARAM* EVP_KEYMGMT_gen_settable_params(const EVP_KEYMGMT*);
void OCSP_RESPDATA_free(OCSP_RESPDATA*);
X509_CRL* d2i_X509_CRL_fp(FILE*, X509_CRL**);
int SSL_CTX_set_async_callback_arg(SSL_CTX*, void*);
RSA* PEM_read_bio_RSAPrivateKey(BIO*, RSA**, pem_password_cb*, void*);
void EVP_EncodeInit(EVP_ENCODE_CTX*);
int SSL_CTX_set_purpose(SSL_CTX*, int);
int PEM_write_bio_ECPrivateKey(BIO*, const EC_KEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int BIO_set_ex_data(BIO*, int, void*);
PKCS7_SIGNER_INFO* d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO**, const unsigned char**, long);
int BN_nnmod(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int EVP_EncryptInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*);
int RSA_set0_factors(RSA*, BIGNUM*, BIGNUM*);
char* i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD*, const ASN1_OCTET_STRING*);
int ASYNC_WAIT_CTX_set_status(ASYNC_WAIT_CTX*, int);
int EVP_PKEY_CTX_set_rsa_oaep_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_KEYEXCH_is_a(const EVP_KEYEXCH*, const char*);
void AUTHORITY_KEYID_free(AUTHORITY_KEYID*);
const EVP_CIPHER* EVP_des_ede_cfb64();
int OPENSSL_strcasecmp(const char*, const char*);
int EVP_MAC_CTX_set_params(EVP_MAC_CTX*, const OSSL_PARAM[]);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY*, const char*, int, const unsigned char*, int);
int PEM_write_X509(FILE*, const X509*);
const EVP_CIPHER* EVP_aria_256_cfb8();
int X509_REQ_add1_attr_by_txt(X509_REQ*, const char*, int, const unsigned char*, int);
int i2d_ACCESS_DESCRIPTION(const ACCESS_DESCRIPTION*, unsigned char**);
unsigned int EVP_RAND_get_strength(EVP_RAND_CTX*);
void ERR_add_error_mem_bio(const char*, BIO*);
OCSP_RESPBYTES* d2i_OCSP_RESPBYTES(OCSP_RESPBYTES**, const unsigned char**, long);
int OPENSSL_init_ssl(uint64_t, const OPENSSL_INIT_SETTINGS*);
ASN1_OCTET_STRING* X509_EXTENSION_get_data(X509_EXTENSION*);
int ASYNC_WAIT_CTX_get_callback(ASYNC_WAIT_CTX*, ASYNC_callback_fn*, void**);
int SSL_CONF_cmd_argv(SSL_CONF_CTX*, int*,  char***);
int PEM_write_bio_PKCS8PrivateKey(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
int DSA_sign(int, const unsigned char*, int, unsigned char*, unsigned int*, DSA*);
void RSA_get0_factors(const RSA*, const BIGNUM**, const BIGNUM**);
int RSA_padding_check_PKCS1_type_1(unsigned char*, int, const unsigned char*, int, int);
long SSL_SESSION_get_timeout(const SSL_SESSION*);
int OCSP_single_get0_status(OCSP_SINGLERESP*, int*, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**);
const stack_st_X509_EXTENSION* X509_get0_extensions(const X509*);
void CRYPTO_clear_free(void*, size_t, const char*, int);
X509_CERT_AUX* d2i_X509_CERT_AUX(X509_CERT_AUX**, const unsigned char**, long);
IPAddressRange* IPAddressRange_new();
int i2d_SCT_LIST(const stack_st_SCT*, unsigned char**);
int EVP_MD_names_do_all(const EVP_MD*, void (const char*, void*)*, void*);
X509_CRL* PEM_read_bio_X509_CRL(BIO*, X509_CRL**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_rc4_hmac_md5();
int PKCS7_print_ctx(BIO*, const PKCS7*, int, const ASN1_PCTX*);
DH* DH_get_1024_160();
const EVP_CIPHER* EVP_aes_256_ccm();
int BIO_vprintf(BIO*, const char*, va_list);
int OSSL_HTTP_REQ_CTX_set_request_line(OSSL_HTTP_REQ_CTX*, int, const char*, const char*, const char*);
ASN1_INTEGER* BN_to_ASN1_INTEGER(const BIGNUM*, ASN1_INTEGER*);
void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD*, int (EVP_MD_CTX*, const ASN1_ITEM*, const void*, const X509_ALGOR*, const ASN1_BIT_STRING*, EVP_PKEY*)*, int (EVP_MD_CTX*, const ASN1_ITEM*, const void*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*)*);
const BIGNUM* RSA_get0_p(const RSA*);
int EVP_PKEY_is_a(const EVP_PKEY*, const char*);
int i2d_OCSP_ONEREQ(const OCSP_ONEREQ*, unsigned char**);
int EVP_RAND_nonce(EVP_RAND_CTX*, unsigned char*, size_t);
evp_pkey_st* SSL_get_privatekey(const SSL*);
X509* PEM_read_X509_AUX(FILE*, X509**, pem_password_cb*, void*);
int ASN1_TYPE_cmp(const ASN1_TYPE*, const ASN1_TYPE*);
int i2d_re_X509_tbs(X509*, unsigned char**);
int SSL_get0_dane_tlsa(SSL*, uint8_t*, uint8_t*, uint8_t*, const unsigned char**, size_t*);
int PEM_write_bio_PUBKEY(BIO*, const EVP_PKEY*);
NETSCAPE_SPKI* NETSCAPE_SPKI_new();
X509_NAME* X509_get_issuer_name(const X509*);
RSA* PEM_read_bio_RSAPublicKey(BIO*, RSA**, pem_password_cb*, void*);
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX*, int);
int EVP_PBE_find(int, int, int*, int*, EVP_PBE_KEYGEN**);
int BN_dec2bn(BIGNUM**, const char*);
DSA* d2i_DSA_PUBKEY_bio(BIO*, DSA**);
int SSL_CIPHER_get_bits(const SSL_CIPHER*, int*);
void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM*, unsigned int);
int DSA_size(const DSA*);
int OCSP_basic_verify(OCSP_BASICRESP*, stack_st_X509*, X509_STORE*, unsigned long);
const BIGNUM* RSA_get0_q(const RSA*);
void SSL_set_psk_find_session_callback(SSL*, SSL_psk_find_session_cb_func);
OCSP_CERTID* d2i_OCSP_CERTID(OCSP_CERTID**, const unsigned char**, long);
int EVP_CIPHER_CTX_get_key_length(const EVP_CIPHER_CTX*);
X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(const X509_STORE_CTX*);
int OSSL_PARAM_get_uint64(const OSSL_PARAM*, uint64_t*);
void EVP_PKEY_meth_get_digest_custom(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**);
ASN1_OBJECT* OBJ_dup(const ASN1_OBJECT*);
int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX*, const void*, int*, void**);
int EC_GROUP_set_curve_GFp(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
X509_PUBKEY* X509_get_X509_PUBKEY(const X509*);
const EVP_CIPHER* EVP_aes_128_wrap_pad();
void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, EVP_MD_CTX*)*);
const char* ERR_reason_error_string(unsigned long);
PROXY_CERT_INFO_EXTENSION* d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION**, const unsigned char**, long);
int RSA_generate_multi_prime_key(RSA*, int, int, BIGNUM*, BN_GENCB*);
const EVP_MD* HMAC_CTX_get_md(const HMAC_CTX*);
int EVP_DigestVerifyFinal(EVP_MD_CTX*, const unsigned char*, size_t);
BIO* BIO_new_accept(const char*);
EVP_PKEY* EVP_PKEY_new();
int (ssl_st*, SSL_SESSION*)* SSL_CTX_sess_get_new_cb(SSL_CTX*);
void* ASN1_item_d2i_bio_ex(const ASN1_ITEM*, BIO*, void*, OSSL_LIB_CTX*, const char*);
OSSL_PARAM OSSL_PARAM_construct_octet_string(const char*, void*, size_t);
int X509_LOOKUP_by_subject_ex(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, X509_OBJECT*, OSSL_LIB_CTX*, const char*);
PKCS7* PKCS7_dup(const PKCS7*);
ISSUER_SIGN_TOOL* d2i_ISSUER_SIGN_TOOL(ISSUER_SIGN_TOOL**, const unsigned char**, long);
X509_ALGOR* PKCS5_pbe2_set_iv_ex(const EVP_CIPHER*, int, unsigned char*, int, unsigned char*, int, OSSL_LIB_CTX*);
int i2d_X509_REQ_fp(FILE*, const X509_REQ*);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME*, const char*);
X509_CRL_INFO* d2i_X509_CRL_INFO(X509_CRL_INFO**, const unsigned char**, long);
int RSA_meth_set_pub_enc(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
int i2d_ASN1_T61STRING(const ASN1_T61STRING*, unsigned char**);
const ENGINE_CMD_DEFN* ENGINE_get_cmd_defns(const ENGINE*);
SSL_SESSION* PEM_read_SSL_SESSION(FILE*, SSL_SESSION**, pem_password_cb*, void*);
DH_METHOD* DH_meth_dup(const DH_METHOD*);
int RSA_check_key_ex(const RSA*, BN_GENCB*);
const ASN1_INTEGER* X509_REVOKED_get0_serialNumber(const X509_REVOKED*);
void* OPENSSL_LH_insert(OPENSSL_LHASH*, void*);
const BIGNUM* EC_KEY_get0_private_key(const EC_KEY*);
int SSL_get_changed_async_fds(SSL*, int*, size_t*, int*, size_t*);
void EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**);
void BN_BLINDING_set_flags(BN_BLINDING*, unsigned long);
int i2d_X509_PUBKEY_fp(FILE*, const X509_PUBKEY*);
void DSA_free(DSA*);
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM*);
const OSSL_PARAM* EVP_KEYMGMT_settable_params(const EVP_KEYMGMT*);
X509_STORE* X509_LOOKUP_get_store(const X509_LOOKUP*);
int (int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, const RSA*)* RSA_meth_get_sign(const RSA_METHOD*);
BIO* BIO_new_fd(int, int);
int BN_sub(BIGNUM*, const BIGNUM*, const BIGNUM*);
int i2d_ASN1_VISIBLESTRING(const ASN1_VISIBLESTRING*, unsigned char**);
int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(EVP_PKEY_CTX*, int);
int DSA_meth_set_paramgen(DSA_METHOD*, int (DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*)*);
DIST_POINT_NAME* DIST_POINT_NAME_new();
const NAMING_AUTHORITY* ADMISSIONS_get0_namingAuthority(const ADMISSIONS*);
int OCSP_id_get0_info(ASN1_OCTET_STRING**, ASN1_OBJECT**, ASN1_OCTET_STRING**, ASN1_INTEGER**, OCSP_CERTID*);
int i2d_ADMISSIONS(const ADMISSIONS*, unsigned char**);
int EVP_PKEY_CTX_set0_dh_kdf_ukm(EVP_PKEY_CTX*, unsigned char*, int);
EC_GROUP* EC_GROUP_new(const EC_METHOD*);
int (EVP_MD_CTX*)* EVP_MD_meth_get_cleanup(const EVP_MD*);
const EVP_CIPHER* EVP_camellia_192_ctr();
X509_ATTRIBUTE* EVP_PKEY_get_attr(const EVP_PKEY*, int);
uint64_t SSL_CTX_set_options(SSL_CTX*, uint64_t);
void SCT_LIST_free(stack_st_SCT*);
X509_NAME_ENTRY* d2i_X509_NAME_ENTRY(X509_NAME_ENTRY**, const unsigned char**, long);
int i2d_ASN1_GENERALSTRING(const ASN1_GENERALSTRING*, unsigned char**);
int EVP_DigestInit_ex2(EVP_MD_CTX*, const EVP_MD*, const OSSL_PARAM[]);
int EVP_PKEY_set1_EC_KEY(EVP_PKEY*, ec_key_st*);
int OSSL_PARAM_get_long(const OSSL_PARAM*, long int*);
int EVP_PKEY_CTX_get_ecdh_cofactor_mode(EVP_PKEY_CTX*);
void EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
int EVP_KEM_names_do_all(const EVP_KEM*, void (const char*, void*)*, void*);
unsigned long ERR_get_error_line(const char**, int*);
int NCONF_load(CONF*, const char*, long*);
int X509_CRL_digest(const X509_CRL*, const EVP_MD*, unsigned char*, unsigned int*);
int EVP_PKEY_eq(const EVP_PKEY*, const EVP_PKEY*);
EC_GROUP* EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS*);
EC_GROUP* EC_GROUP_new_from_ecparameters(const ECPARAMETERS*);
void EVP_KEYMGMT_free(EVP_KEYMGMT*);
BIGNUM* BN_CTX_get(BN_CTX*);
int ENGINE_set_init_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
int SCT_set0_log_id(SCT*, unsigned char*, size_t);
int PEM_write_bio_DSA_PUBKEY(BIO*, const DSA*);
int DH_meth_set_init(DH_METHOD*, int (DH*)*);
const RSA_METHOD* RSA_get_method(const RSA*);
NAMING_AUTHORITY* NAMING_AUTHORITY_new();
int EVP_PKEY_print_public(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
const EVP_CIPHER* EVP_aes_256_cfb8();
void EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
int PEM_write_PUBKEY_ex(FILE*, const EVP_PKEY*, OSSL_LIB_CTX*, const char*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new(EVP_PKEY*, ENGINE*);
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
int OSSL_PARAM_get_utf8_string(const OSSL_PARAM*,  char**, size_t);
int SSL_set1_param(SSL*, X509_VERIFY_PARAM*);
int (EVP_CIPHER_CTX*, const unsigned char*, const unsigned char*, int)* EVP_CIPHER_meth_get_init(const EVP_CIPHER*);
const char* EVP_MAC_get0_description(const EVP_MAC*);
const stack_st_X509_EXTENSION* X509_CRL_get0_extensions(const X509_CRL*);
const BIO_METHOD* BIO_s_fd();
int OPENSSL_sk_unshift(OPENSSL_STACK*, const void*);
size_t BUF_MEM_grow_clean(BUF_MEM*, size_t);
X509* d2i_X509_AUX(X509**, const unsigned char**, long);
int EVP_ASYM_CIPHER_up_ref(EVP_ASYM_CIPHER*);
const EVP_CIPHER* EVP_cast5_ofb();
int OCSP_resp_find_status(OCSP_BASICRESP*, OCSP_CERTID*, int*, int*, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**, ASN1_GENERALIZEDTIME**);
int EVP_PKEY_CTX_set_dh_paramgen_seed(EVP_PKEY_CTX*, const unsigned char*, size_t);
int EVP_CIPHER_CTX_get_block_size(const EVP_CIPHER_CTX*);
int SSL_set_ssl_method(SSL*, const SSL_METHOD*);
int SSL_get_signature_type_nid(const SSL*, int*);
int X509_NAME_digest(const X509_NAME*, const EVP_MD*, unsigned char*, unsigned int*);
GENERAL_NAME* GENERAL_NAME_new();
const ASN1_GENERALIZEDTIME* OCSP_resp_get0_produced_at(const OCSP_BASICRESP*);
int EVP_PKEY_decrypt(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
stack_st_X509* SSL_get0_verified_chain(const SSL*);
BIO* BIO_new_file(const char*, const char*);
EC_GROUP* EC_GROUP_new_curve_GFp(const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int RSA_check_key(const RSA*);
int ENGINE_free(ENGINE*);
const BIGNUM* ECDSA_SIG_get0_s(const ECDSA_SIG*);
SSL_SESSION* SSL_SESSION_new();
EC_GROUP* PEM_read_bio_ECPKParameters(BIO*, EC_GROUP**, pem_password_cb*, void*);
int EVP_MD_meth_set_result_size(EVP_MD*, int);
ASN1_OBJECT* ASN1_OBJECT_new();
void SSL_CTX_set_cert_cb(SSL_CTX*, int (SSL*, void*)*, void*);
void EVP_MAC_free(EVP_MAC*);
const OSSL_PARAM* EVP_KEM_gettable_ctx_params(const EVP_KEM*);
long (BIO*, int, BIO_info_cb*)* BIO_meth_get_callback_ctrl(const BIO_METHOD*);
int PKCS5_PBKDF2_HMAC_SHA1(const char*, int, const unsigned char*, int, int, int, unsigned char*);
int i2d_DHxparams(const DH*, unsigned char**);
int RSA_padding_add_PKCS1_OAEP(unsigned char*, int, const unsigned char*, int, const unsigned char*, int);
int EVP_PKEY_get_params(const EVP_PKEY*, OSSL_PARAM[]);
const char* SSL_group_to_name(SSL*, int);
EC_KEY* EC_KEY_new();
OPENSSL_STACK* OPENSSL_sk_new(OPENSSL_sk_compfunc);
int SSL_set_rfd(SSL*, int);
X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(const X509_LOOKUP_METHOD*);
int PEM_write_bio_DHparams(BIO*, const DH*);
void ASYNC_unblock_pause();
int X509_check_ca(X509*);
const char* SSL_CIPHER_standard_name(const SSL_CIPHER*);
int EVP_PBE_scrypt(const char*, size_t, const unsigned char*, size_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char*, size_t);
int OCSP_copy_nonce(OCSP_BASICRESP*, OCSP_REQUEST*);
void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
const BIO_METHOD* BIO_s_bio();
int X509_get_signature_info(X509*, int*, int*, int*, uint32_t*);
const EVP_CIPHER* EVP_aes_128_cfb8();
int EVP_PKEY_set1_DSA(EVP_PKEY*, dsa_st*);
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
const RSA_METHOD* ENGINE_get_RSA(const ENGINE*);
int EVP_MD_get_params(const EVP_MD*, OSSL_PARAM[]);
int EVP_PKEY_CTX_set_dsa_paramgen_q_bits(EVP_PKEY_CTX*, int);
int OCSP_request_onereq_count(OCSP_REQUEST*);
X509* X509_dup(const X509*);
X509_SIG* d2i_X509_SIG(X509_SIG**, const unsigned char**, long);
EVP_MD* EVP_MD_meth_dup(const EVP_MD*);
void SSL_CTX_set_verify_depth(SSL_CTX*, int);
void* BN_GENCB_get_arg(BN_GENCB*);
OPENSSL_INIT_SETTINGS* OPENSSL_INIT_new();
int OPENSSL_buf2hexstr_ex( char*, size_t, size_t*, const unsigned char*, size_t, const char);
unsigned long SSL_dane_clear_flags(SSL*, unsigned long);
BIO_ADDR* BIO_ADDR_new();
int EC_GROUP_get_order(const EC_GROUP*, BIGNUM*, BN_CTX*);
int EVP_PKEY_CTX_set1_id(EVP_PKEY_CTX*, const void*, int);
const EVP_CIPHER* EVP_seed_ecb();
int EVP_ASYM_CIPHER_is_a(const EVP_ASYM_CIPHER*, const char*);
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*, int, int, void*);
void EVP_ASYM_CIPHER_free(EVP_ASYM_CIPHER*);
int OSSL_PARAM_get_size_t(const OSSL_PARAM*, size_t*);
int SSL_get_shutdown(const SSL*);
pem_password_cb* SSL_get_default_passwd_cb(SSL*);
int EC_GROUP_set_curve_GF2m(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
void ERR_remove_state(unsigned long);
int SSL_is_server(const SSL*);
void ERR_add_error_txt(const char*, const char*);
void SSL_CTX_set_psk_find_session_callback(SSL_CTX*, SSL_psk_find_session_cb_func);
BIGNUM* BN_get_rfc3526_prime_3072(BIGNUM*);
int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DSA_meth_get_bn_mod_exp(const DSA_METHOD*);
X509* X509_STORE_CTX_get0_cert(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_camellia_128_cbc();
void BIO_set_next(BIO*, BIO*);
OPENSSL_STACK* OPENSSL_sk_new_null();
int EVP_PKEY_asn1_get_count();
int EVP_PKEY_get_raw_private_key(const EVP_PKEY*, unsigned char*, size_t*);
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED*);
void X509_REQ_set0_distinguishing_id(X509_REQ*, ASN1_OCTET_STRING*);
void CRL_DIST_POINTS_free(CRL_DIST_POINTS*);
BIO* BIO_new_dgram(int, int);
void PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO*, ASN1_OCTET_STRING*);
int RSA_get_multi_prime_extra_count(const RSA*);
X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(const X509_STORE*);
int DSA_test_flags(const DSA*, int);
int BN_add_word(BIGNUM*, unsigned long);
RSA* RSA_new_method(ENGINE*);
X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(const X509_LOOKUP_METHOD*);
int EVP_PKEY_decapsulate(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
void* OPENSSL_sk_shift(OPENSSL_STACK*);
const ASN1_INTEGER* X509_get0_authority_serial(X509*);
void OCSP_SIGNATURE_free(OCSP_SIGNATURE*);
int X509_STORE_load_file_ex(X509_STORE*, const char*, OSSL_LIB_CTX*, const char*);
long SSL_CTX_set_timeout(SSL_CTX*, long);
BIO_METHOD* BIO_meth_new(int, const char*);
X509_LOOKUP_METHOD* X509_LOOKUP_file();
int EVP_RAND_names_do_all(const EVP_RAND*, void (const char*, void*)*, void*);
ct_log_entry_type_t SCT_get_log_entry_type(const SCT*);
int EVP_DecodeFinal(EVP_ENCODE_CTX*, unsigned char*, int*);
int EVP_RAND_enable_locking(EVP_RAND_CTX*);
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX*,  char* (SSL*, void*)*);
const EVP_CIPHER* EVP_des_ede3_ecb();
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE*);
X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(const X509_LOOKUP_METHOD*);
void SSL_set_allow_early_data_cb(SSL*, SSL_allow_early_data_cb_fn, void*);
const BIO_METHOD* BIO_s_file();
int OSSL_HTTP_REQ_CTX_set_expected(OSSL_HTTP_REQ_CTX*, const char*, int, int, int);
void SSL_SESSION_get0_alpn_selected(const SSL_SESSION*, const unsigned char**, size_t*);
const OCSP_RESPDATA* OCSP_resp_get0_respdata(const OCSP_BASICRESP*);
const char* OPENSSL_cipher_name(const char*);
void* DH_meth_get0_app_data(const DH_METHOD*);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK*);
const unsigned char* EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX*);
X509_ALGOR* PKCS5_pbkdf2_set(int, unsigned char*, int, int, int);
int (RSA*)* RSA_meth_get_finish(const RSA_METHOD*);
void SSL_set_default_passwd_cb(SSL*, pem_password_cb*);
int SSL_CTX_use_certificate_chain_file(SSL_CTX*, const char*);
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM*, unsigned long);
const OSSL_PARAM* EVP_PKEY_settable_params(const EVP_PKEY*);
RSA* RSA_generate_key(int, unsigned long, void (int, int, void*)*, void*);
X509_REQ* X509_REQ_new_ex(OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aes_256_cbc_hmac_sha256();
void OPENSSL_LH_free(OPENSSL_LHASH*);
const OSSL_PARAM* EVP_RAND_settable_ctx_params(const EVP_RAND*);
int OSSL_PARAM_get_octet_ptr(const OSSL_PARAM*, const void**, size_t*);
int X509_REQ_verify(X509_REQ*, EVP_PKEY*);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE*);
const ASN1_STRING* NAMING_AUTHORITY_get0_authorityText(const NAMING_AUTHORITY*);
int BN_mod_exp(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char*, int, const unsigned char*, int, int, const unsigned char*, int, const EVP_MD*, const EVP_MD*);
X509_EXTENSION* X509v3_delete_ext(stack_st_X509_EXTENSION*, int);
void PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO*, NAMING_AUTHORITY*);
void NOTICEREF_free(NOTICEREF*);
int i2d_PBKDF2PARAM(const PBKDF2PARAM*, unsigned char**);
void OPENSSL_LH_doall(OPENSSL_LHASH*, OPENSSL_LH_DOALL_FUNC);
void* OPENSSL_sk_delete_ptr(OPENSSL_STACK*, const void*);
int PEM_write_SSL_SESSION(FILE*, const SSL_SESSION*);
EVP_MAC_CTX* EVP_MAC_CTX_dup(const EVP_MAC_CTX*);
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE*);
int X509_CRL_set1_nextUpdate(X509_CRL*, const ASN1_TIME*);
const char* SSL_alert_type_string(int);
ECDSA_SIG* ECDSA_do_sign_ex(const unsigned char*, int, const BIGNUM*, const BIGNUM*, EC_KEY*);
int X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD*, X509_LOOKUP_ctrl_fn);
int DSA_generate_parameters_ex(DSA*, int, const unsigned char*, int, int*, unsigned long*, BN_GENCB*);
const char* EVP_KEYMGMT_get0_description(const EVP_KEYMGMT*);
int PEM_write_bio_PKCS7_stream(BIO*, PKCS7*, BIO*, int);
void EVP_MD_CTX_free(EVP_MD_CTX*);
void EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, const EVP_PKEY_CTX*)**);
int i2d_PROXY_CERT_INFO_EXTENSION(const PROXY_CERT_INFO_EXTENSION*, unsigned char**);
BIGNUM* BN_get_rfc3526_prime_4096(BIGNUM*);
int BN_to_montgomery(BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH*, BIO*);
int OSSL_PARAM_modified(const OSSL_PARAM*);
const SSL_METHOD* TLSv1_2_client_method();
int i2d_RSA_PUBKEY_fp(FILE*, const RSA*);
int i2d_PKCS7(const PKCS7*, unsigned char**);
OCSP_CRLID* d2i_OCSP_CRLID(OCSP_CRLID**, const unsigned char**, long);
char* UI_construct_prompt(UI*, const char*, const char*);
void* EVP_PKEY_get_ex_data(const EVP_PKEY*, int);
void BN_clear(BIGNUM*);
int EVP_CIPHER_get_type(const EVP_CIPHER*);
void* UI_get0_user_data(UI*);
PKEY_USAGE_PERIOD* PKEY_USAGE_PERIOD_new();
X509_STORE_CTX* X509_STORE_CTX_new_ex(OSSL_LIB_CTX*, const char*);
void* RSA_get_ex_data(const RSA*, int);
unsigned long X509_subject_name_hash(X509*);
int EVP_MD_meth_get_app_datasize(const EVP_MD*);
int SHA512_Final(unsigned char*, SHA512_CTX*);
int EVP_MAC_names_do_all(const EVP_MAC*, void (const char*, void*)*, void*);
int (int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, const RSA*)* RSA_meth_get_verify(const RSA_METHOD*);
const BIGNUM* DSA_get0_pub_key(const DSA*);
int EVP_CIPHER_CTX_get_params(EVP_CIPHER_CTX*, OSSL_PARAM[]);
int SSL_CTX_add_client_custom_ext(SSL_CTX*, unsigned int, custom_ext_add_cb, custom_ext_free_cb, void*, custom_ext_parse_cb, void*);
unsigned long X509_issuer_name_hash(X509*);
unsigned long BN_mod_word(const BIGNUM*, unsigned long);
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL*);
void BIO_set_shutdown(BIO*, int);
int ENGINE_set_default_DH(ENGINE*);
int X509_STORE_set_default_paths_ex(X509_STORE*, OSSL_LIB_CTX*, const char*);
int ASN1_item_verify(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, EVP_PKEY*);
void BIO_meth_free(BIO_METHOD*);
void X509_NAME_free(X509_NAME*);
int EVP_PKEY_CTX_get_rsa_padding(EVP_PKEY_CTX*, int*);
void EVP_RAND_do_all_provided(OSSL_LIB_CTX*, void (EVP_RAND*, void*)*, void*);
long SSL_CTX_ctrl(SSL_CTX*, int, long, void*);
int DSA_print_fp(FILE*, const DSA*, int);
PKCS7* d2i_PKCS7(PKCS7**, const unsigned char**, long);
const char* OpenSSL_version(int);
int i2d_DISPLAYTEXT(const ASN1_STRING*, unsigned char**);
int i2d_EC_PUBKEY_bio(BIO*, const EC_KEY*);
OSSL_PARAM OSSL_PARAM_construct_utf8_ptr(const char*,  char**, size_t);
unsigned int OPENSSL_version_patch();
EC_POINT* EC_POINT_hex2point(const EC_GROUP*, const char*, EC_POINT*, BN_CTX*);
void SSL_CTX_set_cookie_verify_cb(SSL_CTX*, int (SSL*, const unsigned char*, unsigned int)*);
int SSL_CTX_set_default_verify_file(SSL_CTX*);
EVP_PKEY* PEM_read_bio_PUBKEY(BIO*, EVP_PKEY**, pem_password_cb*, void*);
int ASN1_TIME_check(const ASN1_TIME*);
void NETSCAPE_SPKI_free(NETSCAPE_SPKI*);
void SSL_CTX_set_record_padding_callback(SSL_CTX*, size_t (SSL*, int, size_t, void*)*);
const PROFESSION_INFOS* ADMISSIONS_get0_professionInfos(const ADMISSIONS*);
int EVP_DigestSignInit_ex(EVP_MD_CTX*, EVP_PKEY_CTX**, const char*, OSSL_LIB_CTX*, const char*, EVP_PKEY*, const OSSL_PARAM[]);
X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(const X509_STORE_CTX*);
BIGNUM* BN_bin2bn(const unsigned char*, int, BIGNUM*);
void CTLOG_STORE_free(CTLOG_STORE*);
void SSL_CTX_set1_cert_store(SSL_CTX*, X509_STORE*);
int X509_REQ_sign(X509_REQ*, EVP_PKEY*, const EVP_MD*);
void X509_STORE_set_get_issuer(X509_STORE*, X509_STORE_CTX_get_issuer_fn);
void EVP_MD_CTX_set_flags(EVP_MD_CTX*, int);
int BN_print_fp(FILE*, const BIGNUM*);
X509_CRL* PEM_read_X509_CRL(FILE*, X509_CRL**, pem_password_cb*, void*);
int ASN1_TIME_set_string(ASN1_TIME*, const char*);
const EVP_CIPHER* EVP_aria_192_cfb8();
int EVP_PKEY_verify_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int ERR_get_next_error_library();
int SSL_set_purpose(SSL*, int);
int X509_REQ_add_extensions_nid(X509_REQ*, const stack_st_X509_EXTENSION*, int);
int BN_check_prime(const BIGNUM*, BN_CTX*, BN_GENCB*);
int EVP_MD_CTX_reset(EVP_MD_CTX*);
void X509_LOOKUP_free(X509_LOOKUP*);
OCSP_ONEREQ* d2i_OCSP_ONEREQ(OCSP_ONEREQ**, const unsigned char**, long);
int BN_priv_rand_range(BIGNUM*, const BIGNUM*);
int ENGINE_set_cmd_defns(ENGINE*, const ENGINE_CMD_DEFN*);
OCSP_SINGLERESP* d2i_OCSP_SINGLERESP(OCSP_SINGLERESP**, const unsigned char**, long);
unsigned char* EC_GROUP_get0_seed(const EC_GROUP*);
BIO* BIO_new_ssl(SSL_CTX*, int);
int EVP_MD_meth_set_final(EVP_MD*, int (EVP_MD_CTX*, unsigned char*)*);
UI* UI_new_method(const UI_METHOD*);
size_t OPENSSL_strlcat( char*, const char*, size_t);
const char* EVP_MAC_get0_name(const EVP_MAC*);
void ERR_print_errors_cb(int (const char*, size_t, void*)*, void*);
void SSL_CTX_set_tmp_dh_callback(SSL_CTX*, DH* (SSL*, int, int)*);
int X509_NAME_get_text_by_OBJ(const X509_NAME*, const ASN1_OBJECT*,  char*, int);
int X509_OBJECT_set1_X509(X509_OBJECT*, X509*);
int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER*, int);
int UI_dup_input_string(UI*, const char*, int,  char*, int, int);
EVP_PKEY* PEM_read_PrivateKey_ex(FILE*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void* CRYPTO_secure_zalloc(size_t, const char*, int);
int i2d_X509(const X509*, unsigned char**);
int SSL_read_early_data(SSL*, void*, size_t, size_t*);
const DSA_METHOD* DSA_get_default_method();
ASN1_OCTET_STRING* X509_get0_distinguishing_id(X509*);
int BN_from_montgomery(BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY*, int, int, const unsigned char*, int);
int X509_load_cert_file_ex(X509_LOOKUP*, const char*, int, OSSL_LIB_CTX*, const char*);
void SSL_CTX_set_default_read_buffer_len(SSL_CTX*, size_t);
int X509_NAME_add_entry_by_txt(X509_NAME*, const char*, int, const unsigned char*, int, int, int);
int OCSP_response_status(OCSP_RESPONSE*);
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX*);
int i2d_PBEPARAM(const PBEPARAM*, unsigned char**);
IPAddressOrRange* IPAddressOrRange_new();
uint64_t SCT_get_timestamp(const SCT*);
int EC_KEY_check_key(const EC_KEY*);
const EVP_CIPHER* EVP_seed_cbc();
const BIGNUM* BN_get0_nist_prime_256();
const char* DSA_meth_get0_name(const DSA_METHOD*);
BIGNUM* BN_copy(BIGNUM*, const BIGNUM*);
int DTLSv1_listen(SSL*, BIO_ADDR*);
EC_KEY* EC_KEY_new_by_curve_name_ex(OSSL_LIB_CTX*, const char*, int);
PKCS7_ENVELOPE* PKCS7_ENVELOPE_new();
int RSA_blinding_on(RSA*, BN_CTX*);
int OBJ_ln2nid(const char*);
void* OPENSSL_LH_delete(OPENSSL_LHASH*, const void*);
OCSP_RESPONSE* d2i_OCSP_RESPONSE(OCSP_RESPONSE**, const unsigned char**, long);
int X509_set_ex_data(X509*, int, void*);
int EVP_PKEY_print_params_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
const EC_POINT* EC_GROUP_get0_generator(const EC_GROUP*);
int SSL_get_error(const SSL*, int);
X509_CRL* d2i_X509_CRL_bio(BIO*, X509_CRL**);
int EVP_EncryptInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*);
X509_CERT_AUX* X509_CERT_AUX_new();
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX*, int, int, int);
const OSSL_PARAM* EVP_KEYEXCH_settable_ctx_params(const EVP_KEYEXCH*);
int SSL_check_chain(SSL*, X509*, EVP_PKEY*, stack_st_X509*);
int EVP_PKEY_export(const EVP_PKEY*, int, OSSL_CALLBACK*, void*);
int ASN1_TIME_compare(const ASN1_TIME*, const ASN1_TIME*);
const SSL_METHOD* TLSv1_1_method();
ENGINE* DSA_get0_engine(DSA*);
const EVP_CIPHER* EVP_camellia_256_ecb();
const EVP_MD* EVP_sha512();
ASN1_INTEGER* d2i_ASN1_UINTEGER(ASN1_INTEGER**, const unsigned char**, long);
X509_LOOKUP* X509_STORE_add_lookup(X509_STORE*, X509_LOOKUP_METHOD*);
EC_KEY* d2i_ECPrivateKey_fp(FILE*, EC_KEY**);
OPENSSL_STACK* OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc, int);
void OSSL_PARAM_free(OSSL_PARAM*);
int SSL_CTX_set_session_id_context(SSL_CTX*, const unsigned char*, unsigned int);
int EVP_PKEY_public_check_quick(EVP_PKEY_CTX*);
USERNOTICE* d2i_USERNOTICE(USERNOTICE**, const unsigned char**, long);
int X509_load_cert_crl_file_ex(X509_LOOKUP*, const char*, int, OSSL_LIB_CTX*, const char*);
X509_NAME_ENTRY* X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY**, const char*, int, const unsigned char*, int);
EVP_PKEY* d2i_PrivateKey_fp(FILE*, EVP_PKEY**);
int EVP_CIPHER_CTX_get_original_iv(EVP_CIPHER_CTX*, void*, size_t);
int BIO_ssl_copy_session_id(BIO*, BIO*);
int SSL_CTX_load_verify_store(SSL_CTX*, const char*);
const EC_METHOD* EC_GF2m_simple_method();
int ASN1_INTEGER_set_int64(ASN1_INTEGER*, int64_t);
void BIO_set_callback(BIO*, BIO_callback_fn);
void OCSP_CERTID_free(OCSP_CERTID*);
int EVP_OpenFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
void X509_STORE_set_check_issued(X509_STORE*, X509_STORE_CTX_check_issued_fn);
X509_ATTRIBUTE* X509_REQ_get_attr(const X509_REQ*, int);
EVP_PKEY* EVP_PKEY_new_mac_key(int, ENGINE*, const unsigned char*, int);
int PEM_get_EVP_CIPHER_INFO( char*, EVP_CIPHER_INFO*);
EVP_PKEY* EVP_PKEY_Q_keygen(OSSL_LIB_CTX*, const char*, const char*);
const ASN1_OCTET_STRING* X509_get0_authority_key_id(X509*);
int SSL_CTX_set_srp_username_callback(SSL_CTX*, int (SSL*, int*, void*)*);
int PEM_write_PUBKEY(FILE*, const EVP_PKEY*);
int X509_REQ_digest(const X509_REQ*, const EVP_MD*, unsigned char*, unsigned int*);
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(EVP_PKEY_CTX*, const char*);
const EVP_CIPHER* EVP_aria_128_cfb128();
int EVP_PKEY_sign_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX*, const unsigned char*, long);
int X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int SSL_set_cipher_list(SSL*, const char*);
int i2d_EXTENDED_KEY_USAGE(const EXTENDED_KEY_USAGE*, unsigned char**);
unsigned long SSL_CTX_dane_set_flags(SSL_CTX*, unsigned long);
void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)*);
void SSL_CTX_set_info_callback(SSL_CTX*, void (const SSL*, int, int)*);
int (UI*)* UI_method_get_opener(const UI_METHOD*);
const BIO_METHOD* BIO_f_null();
void EVP_PKEY_meth_set_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
const ASN1_OCTET_STRING* PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO*);
OSSL_PROVIDER* EVP_ASYM_CIPHER_get0_provider(const EVP_ASYM_CIPHER*);
PKCS7_SIGNED* PKCS7_SIGNED_new();
const char* EVP_KEYMGMT_get0_name(const EVP_KEYMGMT*);
int PEM_write_bio(BIO*, const char*, const char*, const unsigned char*, long);
OPENSSL_STACK* OPENSSL_sk_deep_copy(const OPENSSL_STACK*, OPENSSL_sk_copyfunc, OPENSSL_sk_freefunc);
NETSCAPE_SPKAC* NETSCAPE_SPKAC_new();
int X509_REVOKED_get_ext_by_critical(const X509_REVOKED*, int, int);
int SSL_client_hello_get0_ext(SSL*, unsigned int, const unsigned char**, size_t*);
int X509_digest(const X509*, const EVP_MD*, unsigned char*, unsigned int*);
void X509_STORE_set_check_policy(X509_STORE*, X509_STORE_CTX_check_policy_fn);
const EVP_MD* EVP_shake256();
void RSA_PSS_PARAMS_free(RSA_PSS_PARAMS*);
int i2d_X509_PUBKEY(const X509_PUBKEY*, unsigned char**);
char* SSL_get_srp_username(SSL*);
OCSP_SIGNATURE* OCSP_SIGNATURE_new();
RSA* d2i_RSAPublicKey_fp(FILE*, RSA**);
const EVP_MD* EVP_ripemd160();
const SSL_METHOD* DTLSv1_2_server_method();
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const X509_PUBKEY*)*, int (X509_PUBKEY*, const EVP_PKEY*)*, int (const EVP_PKEY*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*, int (const EVP_PKEY*)*, int (const EVP_PKEY*)*);
SSL_SESSION* SSL_get_session(const SSL*);
int SSL_CONF_CTX_finish(SSL_CONF_CTX*);
int i2d_re_X509_CRL_tbs(X509_CRL*, unsigned char**);
int SSL_free_buffers(SSL*);
int X509_STORE_set_ex_data(X509_STORE*, int, void*);
unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH*);
BIO* OSSL_HTTP_REQ_CTX_exchange(OSSL_HTTP_REQ_CTX*);
int EVP_PKEY_CTX_set_rsa_keygen_primes(EVP_PKEY_CTX*, int);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_priv_enc(const RSA_METHOD*);
BIGNUM* BN_secure_new();
void ENGINE_register_all_ciphers();
int EVP_PKEY_asn1_get0_info(int*, int*, int*, const char**, const char**, const EVP_PKEY_ASN1_METHOD*);
int EVP_PKEY_type(int);
int i2d_RSAPrivateKey(const RSA*, unsigned char**);
int SSL_CTX_get_verify_mode(const SSL_CTX*);
int EVP_DecryptUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
void EVP_SIGNATURE_free(EVP_SIGNATURE*);
int RSA_public_encrypt(int, const unsigned char*, unsigned char*, RSA*, int);
const char* UI_get0_action_string(UI_STRING*);
int i2t_ASN1_OBJECT( char*, int, const ASN1_OBJECT*);
void X509_ATTRIBUTE_free(X509_ATTRIBUTE*);
int RAND_bytes(unsigned char*, int);
int EVP_PKEY_CTX_get_rsa_mgf1_md(EVP_PKEY_CTX*, const EVP_MD**);
int X509_REQ_sign_ctx(X509_REQ*, EVP_MD_CTX*);
int X509_STORE_load_file(X509_STORE*, const char*);
EVP_PKEY* d2i_PublicKey(int, EVP_PKEY**, const unsigned char**, long);
size_t OBJ_length(const ASN1_OBJECT*);
int UI_method_set_ex_data(UI_METHOD*, int, void*);
const EVP_CIPHER* EVP_bf_ofb();
void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int (unsigned char*, const BIGNUM*, DH*)* DH_meth_get_compute_key(const DH_METHOD*);
int EC_GROUP_set_generator(EC_GROUP*, const EC_POINT*, const BIGNUM*, const BIGNUM*);
OCSP_CERTID* OCSP_CERTID_new();
const stack_st_X509_ATTRIBUTE* PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO*);
int X509_check_ip_asc(X509*, const char*, unsigned int);
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX*, int (SSL*, void*)*);
const EC_METHOD* EC_GFp_nistp521_method();
void X509_SIG_get0(const X509_SIG*, const X509_ALGOR**, const ASN1_OCTET_STRING**);
int i2d_ASN1_SEQUENCE_ANY(const ASN1_SEQUENCE_ANY*, unsigned char**);
int X509_NAME_add_entry_by_OBJ(X509_NAME*, const ASN1_OBJECT*, int, const unsigned char*, int, int, int);
int EVP_CIPHER_get_mode(const EVP_CIPHER*);
int EC_METHOD_get_field_type(const EC_METHOD*);
unsigned long ERR_peek_last_error_line(const char**, int*);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD*);
int BN_bn2nativepad(const BIGNUM*, unsigned char*, int);
int ENGINE_cmd_is_executable(ENGINE*, int);
int EVP_MD_up_ref(EVP_MD*);
ASN1_TIME* X509_time_adj_ex(ASN1_TIME*, int, long, time_t*);
void SCRYPT_PARAMS_free(SCRYPT_PARAMS*);
void PBEPARAM_free(PBEPARAM*);
int EVP_default_properties_enable_fips(OSSL_LIB_CTX*, int);
int OCSP_resp_get1_id(const OCSP_BASICRESP*, ASN1_OCTET_STRING**, X509_NAME**);
ECPARAMETERS* ECPARAMETERS_new();
ASN1_OCTET_STRING* s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
int ASN1_TIME_diff(int*, int*, const ASN1_TIME*, const ASN1_TIME*);
int i2d_PublicKey(const EVP_PKEY*, unsigned char**);
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO_bio(BIO*, PKCS8_PRIV_KEY_INFO**);
size_t SSL_client_hello_get0_ciphers(SSL*, const unsigned char**);
EVP_PKEY* d2i_KeyParams_bio(int, EVP_PKEY**, BIO*);
void EVP_MD_meth_free(EVP_MD*);
X509_EXTENSION* X509_get_ext(const X509*, int);
void X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX*, stack_st_X509*);
int EVP_MAC_finalXOF(EVP_MAC_CTX*, unsigned char*, size_t);
int EVP_CIPHER_meth_set_cleanup(EVP_CIPHER*, int (EVP_CIPHER_CTX*)*);
void* X509_REVOKED_get_ext_d2i(const X509_REVOKED*, int, int*, int*);
int i2d_ASN1_BIT_STRING(const ASN1_BIT_STRING*, unsigned char**);
int i2d_ISSUING_DIST_POINT(const ISSUING_DIST_POINT*, unsigned char**);
RSA* PEM_read_RSA_PUBKEY(FILE*, RSA**, pem_password_cb*, void*);
void X509_ALGOR_get0(const ASN1_OBJECT**, int*, const void**, const X509_ALGOR*);
int SSL_add_store_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
const char* SSL_rstate_string(const SSL*);
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL*, const EVP_MD*, unsigned char*, unsigned int*);
int (EVP_MD_CTX*, const void*, size_t)* EVP_MD_meth_get_update(const EVP_MD*);
int EC_POINT_is_at_infinity(const EC_GROUP*, const EC_POINT*);
X509_ATTRIBUTE* X509_ATTRIBUTE_dup(const X509_ATTRIBUTE*);
void ERR_add_error_vdata(int, va_list);
void DIRECTORYSTRING_free(ASN1_STRING*);
int EVP_MAC_is_a(const EVP_MAC*, const char*);
int i2d_NETSCAPE_SPKAC(const NETSCAPE_SPKAC*, unsigned char**);
int EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER*, int (EVP_CIPHER_CTX*, ASN1_TYPE*)*);
const BIO_METHOD* BIO_s_socket();
int EVP_PKEY_CTX_is_a(EVP_PKEY_CTX*, const char*);
int RSA_get0_multi_prime_crt_params(const RSA*, const BIGNUM*[], const BIGNUM*[]);
void RSA_clear_flags(RSA*, int);
void X509V3_set_ctx(X509V3_CTX*, X509*, X509*, X509_REQ*, X509_CRL*, int);
int i2d_DSA_SIG(const DSA_SIG*, unsigned char**);
PKCS7_ENC_CONTENT* d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT**, const unsigned char**, long);
X509_EXTENSION* X509_REVOKED_get_ext(const X509_REVOKED*, int);
ENGINE* EVP_PKEY_get0_engine(const EVP_PKEY*);
const EVP_MD* EVP_sha3_384();
const EVP_CIPHER* EVP_aes_128_ecb();
void* X509_get_ex_data(const X509*, int);
BIO* ASN1_item_i2d_mem_bio(const ASN1_ITEM*, const ASN1_VALUE*);
int RAND_priv_bytes_ex(OSSL_LIB_CTX*, unsigned char*, size_t, unsigned int);
int OPENSSL_gmtime_diff(int*, int*, const tm*, const tm*);
X509_NAME* X509_NAME_dup(const X509_NAME*);
int BN_bn2binpad(const BIGNUM*, unsigned char*, int);
ENGINE* ENGINE_get_default_DH();
int PKCS8_pkey_add1_attr(PKCS8_PRIV_KEY_INFO*, X509_ATTRIBUTE*);
long X509_get_version(const X509*);
int SSL_set_record_padding_callback(SSL*, size_t (SSL*, int, size_t, void*)*);
void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**, int (EVP_PKEY_CTX*, const unsigned char*, int, EVP_MD_CTX*)**);
int DH_meth_set_generate_params(DH_METHOD*, int (DH*, int, int, BN_GENCB*)*);
int i2d_CRL_DIST_POINTS(const CRL_DIST_POINTS*, unsigned char**);
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX*);
const char* EVP_MD_get0_description(const EVP_MD*);
void EC_GROUP_set_curve_name(EC_GROUP*, int);
int CRYPTO_secure_allocated(const void*);
UI_string_types UI_get_string_type(UI_STRING*);
PBEPARAM* PBEPARAM_new();
OCSP_CERTSTATUS* OCSP_CERTSTATUS_new();
int EVP_MAC_get_params(EVP_MAC*, OSSL_PARAM[]);
int SHA224_Init(SHA256_CTX*);
int i2d_NAMING_AUTHORITY(const NAMING_AUTHORITY*, unsigned char**);
int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX*);
int SSL_ct_is_enabled(const SSL*);
const RAND_METHOD* RAND_get_rand_method();
int DH_meth_set0_app_data(DH_METHOD*, void*);
void SSL_set_info_callback(SSL*, void (const SSL*, int, int)*);
int UI_get_result_maxsize(UI_STRING*);
ASN1_GENERALIZEDTIME* ASN1_TIME_to_generalizedtime(const ASN1_TIME*, ASN1_GENERALIZEDTIME**);
int RSA_verify_ASN1_OCTET_STRING(int, const unsigned char*, unsigned int, unsigned char*, unsigned int, RSA*);
stack_st_X509* PKCS7_get0_signers(PKCS7*, stack_st_X509*, int);
void ERR_print_errors_fp(FILE*);
void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, const EVP_PKEY_CTX*)*);
int BN_is_prime_fasttest_ex(const BIGNUM*, int, BN_CTX*, int, BN_GENCB*);
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO*);
int X509_set1_notAfter(X509*, const ASN1_TIME*);
int EVP_RAND_generate(EVP_RAND_CTX*, unsigned char*, size_t, unsigned int, int, const unsigned char*, size_t);
void* CRYPTO_get_ex_data(const CRYPTO_EX_DATA*, int);
int UI_method_set_writer(UI_METHOD*, int (UI*, UI_STRING*)*);
int X509_REVOKED_get_ext_count(const X509_REVOKED*);
void* EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX*);
void CONF_modules_finish();
int DH_meth_set1_name(DH_METHOD*, const char*);
const char* SSL_COMP_get0_name(const SSL_COMP*);
int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED*, const ASN1_OBJECT*, int);
char* i2s_ASN1_INTEGER(X509V3_EXT_METHOD*, const ASN1_INTEGER*);
int EVP_RAND_get_params(EVP_RAND*, OSSL_PARAM[]);
ASIdOrRange* ASIdOrRange_new();
int UI_set_result(UI*, UI_STRING*, const char*);
int X509_STORE_add_crl(X509_STORE*, X509_CRL*);
int EVP_SIGNATURE_names_do_all(const EVP_SIGNATURE*, void (const char*, void*)*, void*);
int EVP_PKEY_CTX_set_group_name(EVP_PKEY_CTX*, const char*);
int SSL_set_alpn_protos(SSL*, const unsigned char*, unsigned int);
int DH_generate_parameters_ex(DH*, int, int, BN_GENCB*);
int SSL_CONF_cmd_value_type(SSL_CONF_CTX*, const char*);
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char*, int, const unsigned char*, int, const unsigned char*, int, const EVP_MD*, const EVP_MD*);
int EVP_PKEY_verify_recover(EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t);
int DH_size(const DH*);
BIO* BIO_find_type(BIO*, int);
X509_ALGOR* PKCS5_pbe2_set(const EVP_CIPHER*, int, unsigned char*, int);
int SSL_set_ct_validation_callback(SSL*, ssl_ct_validation_cb, void*);
int BN_rand(BIGNUM*, int, int, int);
int EVP_DigestSignFinal(EVP_MD_CTX*, unsigned char*, size_t*);
int OSSL_HTTP_is_alive(const OSSL_HTTP_REQ_CTX*);
const ASN1_TIME* X509_CRL_get0_nextUpdate(const X509_CRL*);
void ERR_print_errors(BIO*);
ASN1_OCTET_STRING* d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING**, const unsigned char**, long);
void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX*);
int OPENSSL_LH_error(OPENSSL_LHASH*);
unsigned long ERR_peek_error_line(const char**, int*);
const DH_METHOD* DH_OpenSSL();
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM*, int);
const EVP_CIPHER* EVP_aes_192_wrap_pad();
RSA* RSAPrivateKey_dup(const RSA*);
void ERR_vset_error(int, int, const char*, va_list);
int BN_rand_range_ex(BIGNUM*, const BIGNUM*, unsigned int, BN_CTX*);
EVP_CIPHER* EVP_CIPHER_meth_dup(const EVP_CIPHER*);
int BN_num_bits(const BIGNUM*);
const OSSL_PARAM* EVP_SIGNATURE_gettable_ctx_params(const EVP_SIGNATURE*);
const UI_METHOD* UI_null();
int RSA_set_ex_data(RSA*, int, void*);
int BN_security_bits(int, int);
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX*, SSL_CTX*);
int UI_ctrl(UI*, int, long, void*, void ()*);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX*, SSL_CTX_npn_select_cb_func, void*);
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE*);
void X509_STORE_set_cert_crl(X509_STORE*, X509_STORE_CTX_cert_crl_fn);
int EVP_PKEY_set_octet_string_param(EVP_PKEY*, const char*, const unsigned char*, size_t);
int SSL_CTX_get_security_level(const SSL_CTX*);
const GENERAL_NAME* ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX*);
EXTENDED_KEY_USAGE* d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE**, const unsigned char**, long);
const EVP_MD* EVP_blake2b512();
OSSL_PARAM OSSL_PARAM_construct_uint32(const char*, uint32_t*);
void POLICY_MAPPING_free(POLICY_MAPPING*);
int SSL_verify_client_post_handshake(SSL*);
int RAND_priv_bytes(unsigned char*, int);
int SCT_LIST_validate(const stack_st_SCT*, CT_POLICY_EVAL_CTX*);
X509_PUBKEY* PEM_read_X509_PUBKEY(FILE*, X509_PUBKEY**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_des_ede3_cfb64();
ASN1_INTEGER* s2i_ASN1_INTEGER(X509V3_EXT_METHOD*, const char*);
int i2d_X509_EXTENSIONS(const X509_EXTENSIONS*, unsigned char**);
int EVP_PKEY_todata(const EVP_PKEY*, int, OSSL_PARAM**);
int EVP_PKEY_print_params(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
unsigned long ERR_get_error_all(const char**, int*, const char**, const char**, int*);
const EVP_CIPHER* EVP_aria_256_cfb128();
int BN_priv_rand_ex(BIGNUM*, int, int, int, unsigned int, BN_CTX*);
size_t OSSL_HTTP_REQ_CTX_get_resp_len(const OSSL_HTTP_REQ_CTX*);
int X509_get_signature_nid(const X509*);
ASN1_STRING* d2i_DISPLAYTEXT(ASN1_STRING**, const unsigned char**, long);
unsigned long ERR_peek_error_line_data(const char**, int*, const char**, int*);
const BIGNUM* DSA_get0_g(const DSA*);
const ASN1_IA5STRING* NAMING_AUTHORITY_get0_authorityURL(const NAMING_AUTHORITY*);
CT_POLICY_EVAL_CTX* CT_POLICY_EVAL_CTX_new_ex(OSSL_LIB_CTX*, const char*);
int BN_div_recp(BIGNUM*, BIGNUM*, const BIGNUM*, BN_RECP_CTX*, BN_CTX*);
int DH_set_method(DH*, const DH_METHOD*);
int PKCS5_pbe_set0_algor(X509_ALGOR*, int, int, const unsigned char*, int);
int i2d_ASN1_TIME(const ASN1_TIME*, unsigned char**);
X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(const X509_STORE*);
char* X509_VERIFY_PARAM_get0_peername(const X509_VERIFY_PARAM*);
int SSL_add_file_cert_subjects_to_stack(stack_st_X509_NAME*, const char*);
int EVP_PKEY_print_public_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
long SSL_get_default_timeout(const SSL*);
BIGNUM* SSL_get_srp_N(SSL*);
DSA* PEM_read_DSA_PUBKEY(FILE*, DSA**, pem_password_cb*, void*);
int EVP_DigestVerify(EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t);
int ASN1_TIME_cmp_time_t(const ASN1_TIME*, time_t);
const BIO_METHOD* BIO_f_cipher();
EC_POINT* EC_POINT_dup(const EC_POINT*, const EC_GROUP*);
const char* SSL_get0_peername(SSL*);
const BIGNUM* DSA_get0_q(const DSA*);
void X509_REQ_set0_signature(X509_REQ*, ASN1_BIT_STRING*);
int UI_add_verify_string(UI*, const char*, int,  char*, int, int, const char*);
int BIO_get_line(BIO*,  char*, int);
X509_CINF* d2i_X509_CINF(X509_CINF**, const unsigned char**, long);
OSSL_LIB_CTX* EVP_PKEY_CTX_get0_libctx(EVP_PKEY_CTX*);
int EVP_PKEY_get_attr_count(const EVP_PKEY*);
const char* ASN1_tag2str(int);
int EVP_MAC_up_ref(EVP_MAC*);
int BN_GENCB_call(BN_GENCB*, int, int);
int ASYNC_WAIT_CTX_set_callback(ASYNC_WAIT_CTX*, ASYNC_callback_fn, void*);
long X509_get_proxy_pathlen(X509*);
int ENGINE_set_ctrl_function(ENGINE*, ENGINE_CTRL_FUNC_PTR);
void SSL_CTX_set_stateless_cookie_verify_cb(SSL_CTX*, int (SSL*, const unsigned char*, size_t)*);
POLICY_MAPPING* POLICY_MAPPING_new();
BIGNUM* BN_generate_prime(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, void (int, int, void*)*, void*);
void BN_GENCB_free(BN_GENCB*);
int UI_set_ex_data(UI*, int, void*);
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX*, X509_STORE_CTX_verify_cb);
int PEM_write_X509_CRL(FILE*, const X509_CRL*);
int BIO_vsnprintf( char*, size_t, const char*, va_list);
int i2d_ASN1_PRINTABLE(const ASN1_STRING*, unsigned char**);
const char* OSSL_HTTP_adapt_proxy(const char*, const char*, const char*, int);
int BN_BLINDING_invert(BIGNUM*, BN_BLINDING*, BN_CTX*);
int EVP_MD_meth_set_ctrl(EVP_MD*, int (EVP_MD_CTX*, int, int, void*)*);
int (RSA*, int, int, BIGNUM*, BN_GENCB*)* RSA_meth_get_multi_prime_keygen(const RSA_METHOD*);
uint64_t SSL_CTX_get_options(const SSL_CTX*);
int EC_GROUP_cmp(const EC_GROUP*, const EC_GROUP*, BN_CTX*);
int SSL_get0_dane_authority(SSL*, X509**, EVP_PKEY**);
uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION*);
void PROFESSION_INFO_set0_professionItems(PROFESSION_INFO*, stack_st_ASN1_STRING*);
void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
X509_CRL* X509_CRL_new();
void EVP_KEYEXCH_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEYEXCH*, void*)*, void*);
lhash_st_SSL_SESSION* SSL_CTX_sessions(SSL_CTX*);
PKCS7* PKCS7_new_ex(OSSL_LIB_CTX*, const char*);
int i2d_ASN1_UTCTIME(const ASN1_UTCTIME*, unsigned char**);
int SSL_use_certificate_ASN1(SSL*, const unsigned char*, int);
const EVP_MD* EVP_md5_sha1();
X509_NAME_ENTRY* X509_NAME_get_entry(const X509_NAME*, int);
const SSL_METHOD* SSL_get_ssl_method(const SSL*);
EDIPARTYNAME* d2i_EDIPARTYNAME(EDIPARTYNAME**, const unsigned char**, long);
const SSL_METHOD* TLSv1_1_client_method();
int X509_STORE_set1_param(X509_STORE*, const X509_VERIFY_PARAM*);
void* (UI*, void*)* UI_method_get_data_duplicator(const UI_METHOD*);
OCSP_SINGLERESP* OCSP_resp_get0(OCSP_BASICRESP*, int);
int DSA_do_verify(const unsigned char*, int, DSA_SIG*, DSA*);
void HMAC_CTX_free(HMAC_CTX*);
int BIO_lookup_ex(const char*, const char*, int, int, int, int, BIO_ADDRINFO**);
int (BIO*)* BIO_meth_get_create(const BIO_METHOD*);
const EVP_CIPHER* EVP_aria_256_cfb1();
void SSL_set_connect_state(SSL*);
X509_STORE* X509_STORE_new();
int EVP_PKEY_CTX_get0_rsa_oaep_label(EVP_PKEY_CTX*, unsigned char**);
int CONF_modules_load(const CONF*, const char*, unsigned long);
int EVP_MD_CTX_copy_ex(EVP_MD_CTX*, const EVP_MD_CTX*);
int EVP_PKEY_encapsulate(EVP_PKEY_CTX*, unsigned char*, size_t*, unsigned char*, size_t*);
SCRYPT_PARAMS* SCRYPT_PARAMS_new();
const BIGNUM* RSA_get0_e(const RSA*);
int UI_method_set_data_duplicator(UI_METHOD*, void* (UI*, void*)*, void (UI*, void*)*);
unsigned long BN_get_word(const BIGNUM*);
int SSL_get_security_level(const SSL*);
X509_ATTRIBUTE* X509_REQ_delete_attr(X509_REQ*, int);
int SCT_set_version(SCT*, sct_version_t);
const EC_POINT* EC_KEY_get0_public_key(const EC_KEY*);
int SSL_use_PrivateKey_file(SSL*, const char*, int);
X509_CRL* X509_CRL_load_http(const char*, BIO*, BIO*, int);
unsigned long EVP_MD_get_flags(const EVP_MD*);
int CRYPTO_new_ex_data(int, void*, CRYPTO_EX_DATA*);
void OCSP_BASICRESP_free(OCSP_BASICRESP*);
int BN_BLINDING_update(BN_BLINDING*, BN_CTX*);
int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_subject_fn);
ECDSA_SIG* d2i_ECDSA_SIG(ECDSA_SIG**, const unsigned char**, long);
int EVP_PKEY_CTX_get_signature_md(EVP_PKEY_CTX*, const EVP_MD**);
X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(const X509_STORE_CTX*);
EVP_CIPHER* EVP_CIPHER_CTX_get1_cipher(EVP_CIPHER_CTX*);
int OBJ_add_sigid(int, int, int);
int (UI*, UI_STRING*)* UI_method_get_writer(const UI_METHOD*);
int i2d_PKCS7_fp(FILE*, const PKCS7*);
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT*);
int EVP_CIPHER_get_nid(const EVP_CIPHER*);
void* BIO_ptr_ctrl(BIO*, int, long);
int EVP_MD_meth_set_copy(EVP_MD*, int (EVP_MD_CTX*, const EVP_MD_CTX*)*);
void* X509_CRL_get_ext_d2i(const X509_CRL*, int, int*, int*);
const ASN1_OCTET_STRING* OCSP_resp_get0_signature(const OCSP_BASICRESP*);
void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
int SSL_COMP_add_compression_method(int, COMP_METHOD*);
int EVP_MAC_init(EVP_MAC_CTX*, const unsigned char*, size_t, const OSSL_PARAM[]);
int (const DH*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DH_meth_get_bn_mod_exp(const DH_METHOD*);
const EVP_CIPHER* EVP_des_ede3_ofb();
int EVP_MD_CTX_set_params(EVP_MD_CTX*, const OSSL_PARAM[]);
DSA* d2i_DSA_PUBKEY_fp(FILE*, DSA**);
X509* SSL_SESSION_get0_peer(SSL_SESSION*);
void EVP_MD_free(EVP_MD*);
void ENGINE_load_builtin_engines();
int OBJ_obj2nid(const ASN1_OBJECT*);
int X509_REQ_set_subject_name(X509_REQ*, const X509_NAME*);
int EVP_DigestInit_ex(EVP_MD_CTX*, const EVP_MD*, ENGINE*);
void X509_CINF_free(X509_CINF*);
int i2d_OCSP_SINGLERESP(const OCSP_SINGLERESP*, unsigned char**);
int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX*, int*, size_t*);
int i2d_ASN1_OCTET_STRING(const ASN1_OCTET_STRING*, unsigned char**);
int SHA512_Init(SHA512_CTX*);
void SSL_SESSION_free(SSL_SESSION*);
const void* UI_method_get_ex_data(const UI_METHOD*, int);
int SSL_up_ref(SSL*);
void DSA_set_flags(DSA*, int);
X509_SIG* d2i_PKCS8_bio(BIO*, X509_SIG**);
int ENGINE_register_complete(ENGINE*);
const EVP_CIPHER* EVP_aes_256_ecb();
int SSL_CTX_set_ex_data(SSL_CTX*, int, void*);
unsigned long SSL_CTX_dane_clear_flags(SSL_CTX*, unsigned long);
BN_BLINDING* BN_BLINDING_new(const BIGNUM*, const BIGNUM*, BIGNUM*);
BIO* BIO_new_from_core_bio(OSSL_LIB_CTX*, OSSL_CORE_BIO*);
void SSL_set0_wbio(SSL*, BIO*);
int EVP_PKEY_get_octet_string_param(const EVP_PKEY*, const char*, unsigned char*, size_t, size_t*);
void* SSL_CTX_get_ex_data(const SSL_CTX*, int);
const EVP_CIPHER* EVP_des_ede3();
int SSL_CTX_ct_is_enabled(const SSL_CTX*);
int OCSP_basic_add1_nonce(OCSP_BASICRESP*, unsigned char*, int);
void BIO_free_all(BIO*);
const SSL_METHOD* DTLSv1_server_method();
int OSSL_PARAM_set_BN(OSSL_PARAM*, const BIGNUM*);
int RSA_set0_crt_params(RSA*, BIGNUM*, BIGNUM*, BIGNUM*);
int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_issuer_serial_fn);
stack_st_X509_EXTENSION* X509v3_add_ext(stack_st_X509_EXTENSION**, X509_EXTENSION*, int);
int BN_ucmp(const BIGNUM*, const BIGNUM*);
int X509_STORE_CTX_verify(X509_STORE_CTX*);
const char* EVP_SIGNATURE_get0_description(const EVP_SIGNATURE*);
const BIGNUM* DH_get0_p(const DH*);
int UI_method_set_opener(UI_METHOD*, int (UI*)*);
void* UI_add_user_data(UI*, void*);
const EVP_MD* EVP_MD_CTX_get0_md(const EVP_MD_CTX*);
unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX*, unsigned int);
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_OBJ(stack_st_X509_ATTRIBUTE**, const ASN1_OBJECT*, int, const unsigned char*, int);
int EVP_MAC_update(EVP_MAC_CTX*, const unsigned char*, size_t);
void X509_NAME_ENTRY_free(X509_NAME_ENTRY*);
void SSL_set_accept_state(SSL*);
int EVP_PKEY_CTX_get_ecdh_kdf_outlen(EVP_PKEY_CTX*, int*);
int i2d_X509_SIG(const X509_SIG*, unsigned char**);
char* X509_VERIFY_PARAM_get0_email(X509_VERIFY_PARAM*);
int EVP_PKEY_CTX_get_rsa_oaep_md_name(EVP_PKEY_CTX*,  char*, size_t);
void EVP_KEM_free(EVP_KEM*);
int CTLOG_STORE_load_file(CTLOG_STORE*, const char*);
int PEM_write_bio_PrivateKey_traditional(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int OSSL_PARAM_set_utf8_ptr(OSSL_PARAM*, const char*);
int i2d_X509_ATTRIBUTE(const X509_ATTRIBUTE*, unsigned char**);
int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO*, int, int, const unsigned char*, int);
int EC_KEY_set_public_key(EC_KEY*, const EC_POINT*);
void* CRYPTO_malloc(size_t, const char*, int);
EVP_MD_CTX* EVP_MD_CTX_new();
int SSL_CTX_load_verify_file(SSL_CTX*, const char*);
const BIO_METHOD* BIO_f_readbuffer();
int DSA_SIG_set0(DSA_SIG*, BIGNUM*, BIGNUM*);
const OSSL_PARAM* EVP_KEYMGMT_gettable_params(const EVP_KEYMGMT*);
int SSL_CTX_add_custom_ext(SSL_CTX*, unsigned int, unsigned int, SSL_custom_ext_add_cb_ex, SSL_custom_ext_free_cb_ex, void*, SSL_custom_ext_parse_cb_ex, void*);
const unsigned char* EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX*);
DH* DH_new_by_nid(int);
const EVP_MD* EVP_sm3();
void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(const X509_STORE*);
int EVP_DigestFinal_ex(EVP_MD_CTX*, unsigned char*, unsigned int*);
DSA_SIG* DSA_SIG_new();
int SSL_SESSION_get_protocol_version(const SSL_SESSION*);
int EC_GROUP_check_discriminant(const EC_GROUP*, BN_CTX*);
int X509v3_get_ext_count(const stack_st_X509_EXTENSION*);
int EVP_PKEY_set1_engine(EVP_PKEY*, ENGINE*);
OCSP_RESPDATA* d2i_OCSP_RESPDATA(OCSP_RESPDATA**, const unsigned char**, long);
X509_EXTENSION* X509_EXTENSION_dup(const X509_EXTENSION*);
int DHparams_print(BIO*, const DH*);
int X509_LOOKUP_by_fingerprint(X509_LOOKUP*, X509_LOOKUP_TYPE, const unsigned char*, int, X509_OBJECT*);
int BN_set_bit(BIGNUM*, int);
OSSL_PROVIDER* EVP_SIGNATURE_get0_provider(const EVP_SIGNATURE*);
X509* SSL_get_certificate(const SSL*);
EVP_KEYEXCH* EVP_KEYEXCH_fetch(OSSL_LIB_CTX*, const char*, const char*);
int OCSP_resp_get0_id(const OCSP_BASICRESP*, const ASN1_OCTET_STRING**, const X509_NAME**);
void EDIPARTYNAME_free(EDIPARTYNAME*);
void X509_free(X509*);
int ENGINE_register_ciphers(ENGINE*);
EVP_PKEY* PEM_read_bio_PUBKEY_ex(BIO*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
dh_st* EVP_PKEY_get1_DH(EVP_PKEY*);
int OSSL_PARAM_set_int32(OSSL_PARAM*, int32_t);
size_t BUF_MEM_grow(BUF_MEM*, size_t);
int EVP_OpenInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, int, const unsigned char*, EVP_PKEY*);
int RSA_get0_multi_prime_factors(const RSA*, const BIGNUM*[]);
const RSA_METHOD* RSA_PKCS1_OpenSSL();
BIO* OSSL_HTTP_REQ_CTX_get0_mem_bio(const OSSL_HTTP_REQ_CTX*);
size_t EC_get_builtin_curves(EC_builtin_curve*, size_t);
int (int, const unsigned char*, unsigned char*, RSA*, int)* RSA_meth_get_pub_dec(const RSA_METHOD*);
int EVP_KEYMGMT_names_do_all(const EVP_KEYMGMT*, void (const char*, void*)*, void*);
int i2o_SCT_LIST(const stack_st_SCT*, unsigned char**);
ECPKPARAMETERS* EC_GROUP_get_ecpkparameters(const EC_GROUP*, ECPKPARAMETERS*);
unsigned int SSL_client_hello_get0_legacy_version(SSL*);
int EVP_CIPHER_get_block_size(const EVP_CIPHER*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME*, time_t);
int PKCS7_verify(PKCS7*, stack_st_X509*, X509_STORE*, BIO*, BIO*, int);
int EVP_MD_get_type(const EVP_MD*);
int BN_sub_word(BIGNUM*, unsigned long);
SSL_CTX* SSL_CTX_new_ex(OSSL_LIB_CTX*, const char*, const SSL_METHOD*);
int SCT_validate(SCT*, const CT_POLICY_EVAL_CTX*);
int EVP_PBE_CipherInit(ASN1_OBJECT*, const char*, int, ASN1_TYPE*, EVP_CIPHER_CTX*, int);
int EVP_PKEY_CTX_set_dh_pad(EVP_PKEY_CTX*, int);
int EVP_PKEY_CTX_set_rsa_mgf1_md_name(EVP_PKEY_CTX*, const char*, const char*);
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD*);
int BN_cmp(const BIGNUM*, const BIGNUM*);
int EVP_PKEY_CTX_set_dsa_paramgen_md_props(EVP_PKEY_CTX*, const char*, const char*);
int PEM_write_bio_SSL_SESSION(BIO*, const SSL_SESSION*);
const char* SSL_rstate_string_long(const SSL*);
ENGINE* ENGINE_by_id(const char*);
void SSL_get0_alpn_selected(const SSL*, const unsigned char**, unsigned int*);
void BUF_reverse(unsigned char*, const unsigned char*, size_t);
void* DSA_get_ex_data(const DSA*, int);
int BIO_meth_set_write_ex(BIO_METHOD*, int (BIO*, const char*, size_t, size_t*)*);
const BIO_METHOD* BIO_f_base64();
EVP_PKEY* PEM_read_bio_Parameters(BIO*, EVP_PKEY**);
size_t SSL_client_hello_get0_compression_methods(SSL*, const unsigned char**);
int EVP_KEM_up_ref(EVP_KEM*);
int PEM_write_PKCS8(FILE*, const X509_SIG*);
const char* EVP_CIPHER_get0_name(const EVP_CIPHER*);
int SSL_SESSION_is_resumable(const SSL_SESSION*);
X509_CRL* X509_CRL_new_ex(OSSL_LIB_CTX*, const char*);
const OSSL_PARAM* EVP_ASYM_CIPHER_gettable_ctx_params(const EVP_ASYM_CIPHER*);
void PKCS7_free(PKCS7*);
int EVP_PKEY_CTX_set_dhx_rfc5114(EVP_PKEY_CTX*, int);
int i2d_PKEY_USAGE_PERIOD(const PKEY_USAGE_PERIOD*, unsigned char**);
void* SSL_get_default_passwd_cb_userdata(SSL*);
int EVP_CIPHER_CTX_get_nid(const EVP_CIPHER_CTX*);
void ENGINE_unregister_DSA(ENGINE*);
unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX*, unsigned int);
void EC_POINT_free(EC_POINT*);
int PEM_write_PrivateKey_ex(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aria_256_ecb();
int i2d_DIRECTORYSTRING(const ASN1_STRING*, unsigned char**);
EC_GROUP* d2i_ECPKParameters(EC_GROUP**, const unsigned char**, long);
ENGINE* ENGINE_get_default_DSA();
X509_SIG* PEM_read_PKCS8(FILE*, X509_SIG**, pem_password_cb*, void*);
int SSL_CTX_set_session_ticket_cb(SSL_CTX*, SSL_CTX_generate_session_ticket_fn, SSL_CTX_decrypt_session_ticket_fn, void*);
int SSL_use_certificate_chain_file(SSL*, const char*);
int PEM_write_RSAPublicKey(FILE*, const RSA*);
int i2d_X509_ALGORS(const X509_ALGORS*, unsigned char**);
void EVP_DecodeInit(EVP_ENCODE_CTX*);
int i2d_ECDSA_SIG(const ECDSA_SIG*, unsigned char**);
EC_KEY* EC_KEY_new_by_curve_name(int);
int EC_GROUP_check(const EC_GROUP*, BN_CTX*);
const EVP_MD* EVP_sha3_224();
int X509_load_crl_file(X509_LOOKUP*, const char*, int);
int SSL_COMP_get_id(const SSL_COMP*);
int HMAC_Init(HMAC_CTX*, const void*, int, const EVP_MD*);
int BN_BLINDING_invert_ex(BIGNUM*, const BIGNUM*, BN_BLINDING*, BN_CTX*);
int SSL_CTX_set_default_verify_paths(SSL_CTX*);
void ASN1_STRING_TABLE_cleanup();
BIO_callback_fn_ex BIO_get_callback_ex(const BIO*);
ASN1_STRING_TABLE* ASN1_STRING_TABLE_get(int);
void IPAddressOrRange_free(IPAddressOrRange*);
int i2d_PKCS8PrivateKey_nid_bio(BIO*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
void SSL_CTX_set_client_cert_cb(SSL_CTX*, int (SSL*, X509**, EVP_PKEY**)*);
long SSL_SESSION_set_time(SSL_SESSION*, long);
int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX*, uint8_t);
const OSSL_PARAM* EVP_CIPHER_gettable_params(const EVP_CIPHER*);
int SSL_CTX_has_client_custom_ext(const SSL_CTX*, unsigned int);
stack_st_X509_NAME* SSL_load_client_CA_file(const char*);
BN_RECP_CTX* BN_RECP_CTX_new();
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, int, long, void*)*);
PKCS7_ISSUER_AND_SERIAL* d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL**, const unsigned char**, long);
int i2d_ECPrivateKey_bio(BIO*, const EC_KEY*);
long BIO_debug_callback_ex(BIO*, int, const char*, size_t, int, long, int, size_t*);
int ECPKParameters_print(BIO*, const EC_GROUP*, int);
int i2d_OCSP_REVOKEDINFO(const OCSP_REVOKEDINFO*, unsigned char**);
int X509_REQ_get_attr_by_OBJ(const X509_REQ*, const ASN1_OBJECT*, int);
X509_VERIFY_PARAM* SSL_get0_param(SSL*);
void X509_get0_signature(const ASN1_BIT_STRING**, const X509_ALGOR**, const X509*);
int BIO_method_type(const BIO*);
int EVP_PKEY_decapsulate_init(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int X509_STORE_up_ref(X509_STORE*);
const EVP_CIPHER* EVP_aes_128_cbc_hmac_sha256();
unsigned char* SHA1(const unsigned char*, size_t, unsigned char*);
int EVP_PKEY_get_ec_point_conv_form(const EVP_PKEY*);
void EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE*);
int SSL_dane_tlsa_add(SSL*, uint8_t, uint8_t, uint8_t, const unsigned char*, size_t);
int i2b_PVK_bio(BIO*, const EVP_PKEY*, int, pem_password_cb*, void*);
X509_VERIFY_PARAM* X509_STORE_CTX_get0_param(const X509_STORE_CTX*);
int X509_STORE_CTX_set_purpose(X509_STORE_CTX*, int);
int RSA_meth_set_sign(RSA_METHOD*, int (int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, const RSA*)*);
PKCS7_SIGNER_INFO* PKCS7_SIGNER_INFO_new();
ASN1_SEQUENCE_ANY* d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY**, const unsigned char**, long);
void CRYPTO_free(void*, const char*, int);
RSA* d2i_RSAPrivateKey(RSA**, const unsigned char**, long);
int OBJ_cmp(const ASN1_OBJECT*, const ASN1_OBJECT*);
int DSA_set_method(DSA*, const DSA_METHOD*);
const EVP_CIPHER* EVP_seed_ofb();
int ENGINE_set_default_DSA(ENGINE*);
OCSP_RESPONSE* OCSP_response_create(int, OCSP_BASICRESP*);
ENGINE* ENGINE_get_default_RAND();
int PEM_write_bio_DSAparams(BIO*, const DSA*);
void PKCS7_SIGNED_free(PKCS7_SIGNED*);
X509_EXTENSION* X509V3_EXT_i2d(int, int, void*);
int X509_get_ext_by_critical(const X509*, int, int);
int SHA384_Update(SHA512_CTX*, const void*, size_t);
int ENGINE_register_RAND(ENGINE*);
int BIO_meth_set_gets(BIO_METHOD*, int (BIO*,  char*, int)*);
const SSL_METHOD* TLSv1_2_method();
const EVP_CIPHER* EVP_seed_cfb128();
int EVP_PKEY_CTX_set_rsa_oaep_md_name(EVP_PKEY_CTX*, const char*, const char*);
int RSA_meth_set_multi_prime_keygen(RSA_METHOD*, int (RSA*, int, int, BIGNUM*, BN_GENCB*)*);
NOTICEREF* NOTICEREF_new();
int SSL_use_RSAPrivateKey_ASN1(SSL*, const unsigned char*, long);
int SSL_renegotiate_abbreviated(SSL*);
ASN1_TYPE* ASN1_generate_nconf(const char*, CONF*);
int SSL_CONF_cmd(SSL_CONF_CTX*, const char*, const char*);
int EVP_PKEY_CTX_set_dh_kdf_type(EVP_PKEY_CTX*, int);
void ADMISSIONS_set0_professionInfos(ADMISSIONS*, PROFESSION_INFOS*);
void HMAC_CTX_set_flags(HMAC_CTX*, unsigned long);
int X509_check_host(X509*, const char*, size_t, unsigned int,  char**);
int X509_subject_name_cmp(const X509*, const X509*);
int X509_up_ref(X509*);
int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM*, const unsigned char*, size_t);
int EVP_MD_CTX_test_flags(const EVP_MD_CTX*, int);
int EVP_PKEY_CTX_set0_rsa_oaep_label(EVP_PKEY_CTX*, void*, int);
int EVP_RAND_verify_zeroization(EVP_RAND_CTX*);
OCSP_REQINFO* d2i_OCSP_REQINFO(OCSP_REQINFO**, const unsigned char**, long);
int (EVP_MD_CTX*, unsigned char*)* EVP_MD_meth_get_final(const EVP_MD*);
int EVP_PKEY_CTX_set_dsa_paramgen_bits(EVP_PKEY_CTX*, int);
ADMISSIONS* d2i_ADMISSIONS(ADMISSIONS**, const unsigned char**, long);
const EVP_MD* EVP_sha224();
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX*, void*);
const EVP_MD* EVP_md4();
int UI_method_set_reader(UI_METHOD*, int (UI*, UI_STRING*)*);
long SSL_ctrl(SSL*, int, long, void*);
ASN1_INTEGER* d2i_ASN1_INTEGER(ASN1_INTEGER**, const unsigned char**, long);
stack_st_SSL_CIPHER* SSL_get1_supported_ciphers(SSL*);
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS*);
void ERR_remove_thread_state(void*);
size_t EC_KEY_key2buf(const EC_KEY*, point_conversion_form_t, unsigned char**, BN_CTX*);
int X509_REQ_add1_attr_by_OBJ(X509_REQ*, const ASN1_OBJECT*, int, const unsigned char*, int);
int BN_clear_bit(BIGNUM*, int);
int EVP_PKEY_CTX_set_params(EVP_PKEY_CTX*, const OSSL_PARAM*);
const stack_st_X509_NAME* SSL_get0_peer_CA_list(const SSL*);
int EC_POINT_oct2point(const EC_GROUP*, EC_POINT*, const unsigned char*, size_t, BN_CTX*);
void CRYPTO_secure_clear_free(void*, size_t, const char*, int);
void X509_REQ_free(X509_REQ*);
X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(const X509_STORE*);
int ENGINE_set_ciphers(ENGINE*, ENGINE_CIPHERS_PTR);
ASN1_VALUE* ASN1_item_d2i_ex(ASN1_VALUE**, const unsigned char**, long, const ASN1_ITEM*, OSSL_LIB_CTX*, const char*);
int (BIGNUM*, const BIGNUM*, RSA*, BN_CTX*)* RSA_meth_get_mod_exp(const RSA_METHOD*);
int CTLOG_new_from_base64_ex(CTLOG**, const char*, const char*, OSSL_LIB_CTX*, const char*);
int ENGINE_set_RSA(ENGINE*, const RSA_METHOD*);
int i2d_ASIdentifierChoice(const ASIdentifierChoice*, unsigned char**);
BASIC_CONSTRAINTS* d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS**, const unsigned char**, long);
OSSL_PARAM OSSL_PARAM_construct_ulong(const char*, unsigned long int*);
int BN_print(BIO*, const BIGNUM*);
void X509_VAL_free(X509_VAL*);
int EC_POINT_set_compressed_coordinates(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
PKCS7_SIGNED* d2i_PKCS7_SIGNED(PKCS7_SIGNED**, const unsigned char**, long);
int EC_KEY_oct2priv(EC_KEY*, const unsigned char*, size_t);
X509_ATTRIBUTE* X509at_get_attr(const stack_st_X509_ATTRIBUTE*, int);
X509_REQ* d2i_X509_REQ_bio(BIO*, X509_REQ**);
EVP_PKEY* PEM_read_bio_PrivateKey_ex(BIO*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void RSA_blinding_off(RSA*);
int EC_GROUP_get_curve_GFp(const EC_GROUP*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
const ASN1_ITEM* ISSUER_SIGN_TOOL_it();
ASN1_NULL* d2i_ASN1_NULL(ASN1_NULL**, const unsigned char**, long);
void SSL_set_record_padding_callback_arg(SSL*, void*);
int BIO_wait(BIO*, time_t, unsigned int);
const OSSL_PARAM* EVP_MD_CTX_settable_params(EVP_MD_CTX*);
int EVP_DigestUpdate(EVP_MD_CTX*, const void*, size_t);
int ENGINE_add(ENGINE*);
stack_st_X509_ATTRIBUTE* X509at_add1_attr(stack_st_X509_ATTRIBUTE**, X509_ATTRIBUTE*);
int UI_method_set_flusher(UI_METHOD*, int (UI*)*);
const OSSL_PARAM* EVP_PKEY_fromdata_settable(EVP_PKEY_CTX*, int);
const CTLOG* CTLOG_STORE_get0_log_by_id(const CTLOG_STORE*, const uint8_t*, size_t);
int EC_KEY_get_flags(const EC_KEY*);
const unsigned char* EVP_PKEY_get0_hmac(const EVP_PKEY*, size_t*);
void OSSL_LIB_CTX_free(OSSL_LIB_CTX*);
int X509_STORE_CTX_init(X509_STORE_CTX*, X509_STORE*, X509*, stack_st_X509*);
int RAND_write_file(const char*);
int OCSP_RESPID_set_by_key_ex(OCSP_RESPID*, X509*, OSSL_LIB_CTX*, const char*);
int SSL_set_wfd(SSL*, int);
int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_alias_fn);
const X509_ALGOR* OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP*);
int EVP_PKEY_get_id(const EVP_PKEY*);
int EVP_KEYEXCH_up_ref(EVP_KEYEXCH*);
BUF_MEM* BUF_MEM_new();
int SSL_CTX_set0_tmp_dh_pkey(SSL_CTX*, EVP_PKEY*);
const EVP_CIPHER* EVP_aria_256_gcm();
int BIO_socket_wait(int, int, time_t);
int SSL_CIPHER_get_kx_nid(const SSL_CIPHER*);
void* SSL_get0_security_ex_data(const SSL*);
const EVP_MD* EVP_sha384();
int i2d_ASN1_OBJECT(const ASN1_OBJECT*, unsigned char**);
void X509_STORE_CTX_set0_untrusted(X509_STORE_CTX*, stack_st_X509*);
int OSSL_PARAM_set_double(OSSL_PARAM*, double);
ASIdentifiers* d2i_ASIdentifiers(ASIdentifiers**, const unsigned char**, long);
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC*);
int X509_add_ext(X509*, X509_EXTENSION*, int);
SSL* SSL_new(SSL_CTX*);
X509_EXTENSION* X509_EXTENSION_create_by_NID(X509_EXTENSION**, int, int, ASN1_OCTET_STRING*);
int EVP_PKEY_CTX_get_rsa_oaep_md(EVP_PKEY_CTX*, const EVP_MD**);
size_t BIO_ctrl_get_read_request(BIO*);
int (DSA*, BN_CTX*, BIGNUM**, BIGNUM**)* DSA_meth_get_sign_setup(const DSA_METHOD*);
char* CRYPTO_strdup(const char*, const char*, int);
X509_STORE_CTX* X509_STORE_CTX_new();
const EVP_CIPHER* EVP_camellia_192_cbc();
int BN_mod_sub(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const unsigned char* ASN1_STRING_get0_data(const ASN1_STRING*);
int i2d_X509_CERT_AUX(const X509_CERT_AUX*, unsigned char**);
void BN_GENCB_set_old(BN_GENCB*, void (int, int, void*)*, void*);
int PEM_write_bio_EC_PUBKEY(BIO*, const EC_KEY*);
int OBJ_create(const char*, const char*, const char*);
int i2d_POLICYQUALINFO(const POLICYQUALINFO*, unsigned char**);
sct_source_t SCT_get_source(const SCT*);
void SXNETID_free(SXNETID*);
EVP_PKEY* PEM_read_PUBKEY(FILE*, EVP_PKEY**, pem_password_cb*, void*);
void* RSA_meth_get0_app_data(const RSA_METHOD*);
ASN1_ENUMERATED* BN_to_ASN1_ENUMERATED(const BIGNUM*, ASN1_ENUMERATED*);
ISSUING_DIST_POINT* d2i_ISSUING_DIST_POINT(ISSUING_DIST_POINT**, const unsigned char**, long);
const EVP_CIPHER* EVP_sm4_cfb128();
int EVP_PBE_alg_add(int, const EVP_CIPHER*, const EVP_MD*, EVP_PBE_KEYGEN*);
int EVP_PKEY_derive(EVP_PKEY_CTX*, unsigned char*, size_t*);
int OSSL_PARAM_set_int64(OSSL_PARAM*, int64_t);
size_t EC_GROUP_set_seed(EC_GROUP*, const unsigned char*, size_t);
void* BIO_get_ex_data(const BIO*, int);
const BIO_METHOD* BIO_f_buffer();
int X509_SIG_INFO_get(const X509_SIG_INFO*, int*, int*, int*, uint32_t*);
void ENGINE_unregister_RSA(ENGINE*);
EVP_MD* EVP_MD_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_MD_meth_get_result_size(const EVP_MD*);
const char* SSL_CIPHER_get_name(const SSL_CIPHER*);
void DSA_get0_key(const DSA*, const BIGNUM**, const BIGNUM**);
void DISPLAYTEXT_free(ASN1_STRING*);
unsigned char* OPENSSL_hexstr2buf(const char*, long*);
int SSL_SESSION_print(BIO*, const SSL_SESSION*);
int SSL_get_wfd(const SSL*);
int EVP_MD_meth_get_input_blocksize(const EVP_MD*);
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM*, ASN1_OBJECT*);
int SSL_enable_ct(SSL*, int);
RSA* PEM_read_RSAPublicKey(FILE*, RSA**, pem_password_cb*, void*);
void* OPENSSL_sk_pop(OPENSSL_STACK*);
int OCSP_id_issuer_cmp(const OCSP_CERTID*, const OCSP_CERTID*);
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BIGNUM*, BN_CTX*);
const EVP_MD* EVP_blake2s256();
tm* OPENSSL_gmtime(const time_t*, tm*);
OSSL_PARAM* OSSL_PARAM_dup(const OSSL_PARAM*);
RSA* d2i_RSA_PUBKEY_bio(BIO*, RSA**);
OCSP_BASICRESP* OCSP_BASICRESP_new();
int X509_STORE_load_store_ex(X509_STORE*, const char*, OSSL_LIB_CTX*, const char*);
int BN_mod_sqr(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK*);
int EVP_PKEY_CTX_set_dsa_paramgen_seed(EVP_PKEY_CTX*, const unsigned char*, size_t);
int BN_mod_mul_montgomery(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_MONT_CTX*, BN_CTX*);
int OPENSSL_sk_find(OPENSSL_STACK*, const void*);
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
int i2d_RSA_PSS_PARAMS(const RSA_PSS_PARAMS*, unsigned char**);
ASN1_IA5STRING* d2i_ASN1_IA5STRING(ASN1_IA5STRING**, const unsigned char**, long);
stack_st_X509_INFO* PEM_X509_INFO_read_bio(BIO*, stack_st_X509_INFO*, pem_password_cb*, void*);
int ECDSA_size(const EC_KEY*);
EVP_MAC* EVP_MAC_CTX_get0_mac(EVP_MAC_CTX*);
int X509_ATTRIBUTE_count(const X509_ATTRIBUTE*);
ASN1_TYPE* X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE*, int);
void ERR_set_debug(const char*, int, const char*);
int SCT_set1_extensions(SCT*, const unsigned char*, size_t);
int PEM_write_EC_PUBKEY(FILE*, const EC_KEY*);
const EVP_CIPHER* EVP_des_ecb();
int X509_CRL_set_issuer_name(X509_CRL*, const X509_NAME*);
DH_METHOD* DH_meth_new(const char*, int);
DH* d2i_DHparams(DH**, const unsigned char**, long);
const EVP_CIPHER* EVP_rc2_cfb64();
void EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
sct_validation_status_t SCT_get_validation_status(const SCT*);
EVP_PKEY* d2i_PrivateKey(int, EVP_PKEY**, const unsigned char**, long);
int i2d_DSA_PUBKEY_bio(BIO*, const DSA*);
int X509_ALGOR_cmp(const X509_ALGOR*, const X509_ALGOR*);
int EVP_PKEY_CTX_set1_rsa_keygen_pubexp(EVP_PKEY_CTX*, BIGNUM*);
size_t BIO_ctrl_pending(BIO*);
int SSL_SESSION_set1_id(SSL_SESSION*, const unsigned char*, unsigned int);
void BIO_set_callback_ex(BIO*, BIO_callback_fn_ex);
int EVP_CIPHER_CTX_is_encrypting(const EVP_CIPHER_CTX*);
ACCESS_DESCRIPTION* ACCESS_DESCRIPTION_new();
int i2d_ADMISSION_SYNTAX(const ADMISSION_SYNTAX*, unsigned char**);
int i2d_ECParameters(const EC_KEY*, unsigned char**);
void UI_free(UI*);
int ASYNC_init_thread(size_t, size_t);
unsigned long X509_VERIFY_PARAM_get_flags(const X509_VERIFY_PARAM*);
EVP_PKEY* d2i_AutoPrivateKey_ex(EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_CIPHER_CTX_get0_cipher(const EVP_CIPHER_CTX*);
X509_REVOKED* d2i_X509_REVOKED(X509_REVOKED**, const unsigned char**, long);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY*, int, const unsigned char*, int);
int ASN1_UTCTIME_print(BIO*, const ASN1_UTCTIME*);
void OPENSSL_config(const char*);
const char* SSL_CIPHER_get_version(const SSL_CIPHER*);
int i2d_PKCS7_SIGN_ENVELOPE(const PKCS7_SIGN_ENVELOPE*, unsigned char**);
void OPENSSL_LH_node_stats(const OPENSSL_LHASH*, FILE*);
X509_EXTENSION* X509_EXTENSION_new();
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, int, BN_CTX*);
const SSL_METHOD* SSL_CTX_get_ssl_method(const SSL_CTX*);
DIST_POINT_NAME* d2i_DIST_POINT_NAME(DIST_POINT_NAME**, const unsigned char**, long);
PKCS7* PKCS7_new();
OCSP_REVOKEDINFO* d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO**, const unsigned char**, long);
const EVP_CIPHER* EVP_camellia_128_cfb1();
void OCSP_CERTSTATUS_free(OCSP_CERTSTATUS*);
int i2d_ASN1_ENUMERATED(const ASN1_ENUMERATED*, unsigned char**);
uint32_t X509_get_key_usage(X509*);
int UI_add_info_string(UI*, const char*);
int PEM_write_ECPrivateKey(FILE*, const EC_KEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
const BIO_METHOD* BIO_s_datagram();
int SSL_CTX_set_srp_username(SSL_CTX*,  char*);
void BN_free(BIGNUM*);
const ASN1_TIME* X509_get0_notAfter(const X509*);
int (BIO*, const char*)* BIO_meth_get_puts(const BIO_METHOD*);
X509_NAME* d2i_X509_NAME(X509_NAME**, const unsigned char**, long);
const char* OSSL_EC_curve_nid2name(int);
int (EVP_CIPHER_CTX*, int, int, void*)* EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER*);
OCSP_RESPONSE* OCSP_sendreq_bio(BIO*, const char*, OCSP_REQUEST*);
int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX*, X509*);
PKCS7_RECIP_INFO* PKCS7_RECIP_INFO_new();
int EC_GROUP_get_cofactor(const EC_GROUP*, BIGNUM*, BN_CTX*);
int SSL_CTX_set_tlsext_ticket_key_evp_cb(SSL_CTX*, int (SSL*, unsigned char*, unsigned char*, EVP_CIPHER_CTX*, EVP_MAC_CTX*, int)*);
void X509_STORE_set_get_crl(X509_STORE*, X509_STORE_CTX_get_crl_fn);
int PEM_do_header(EVP_CIPHER_INFO*, unsigned char*, long*, pem_password_cb*, void*);
int i2d_OCSP_CRLID(const OCSP_CRLID*, unsigned char**);
void SCT_set0_extensions(SCT*, unsigned char*, size_t);
void X509_get0_uids(const X509*, const ASN1_BIT_STRING**, const ASN1_BIT_STRING**);
void ASIdentifiers_free(ASIdentifiers*);
PKEY_USAGE_PERIOD* d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD**, const unsigned char**, long);
X509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(const X509_STORE_CTX*);
const SSL_METHOD* TLSv1_1_server_method();
int ENGINE_set_RAND(ENGINE*, const RAND_METHOD*);
void BN_BLINDING_set_current_thread(BN_BLINDING*);
void EVP_PKEY_free(EVP_PKEY*);
int X509_set_version(X509*, long);
void RSA_OAEP_PARAMS_free(RSA_OAEP_PARAMS*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_from_pkey(OSSL_LIB_CTX*, EVP_PKEY*, const char*);
int EVP_PKEY_get_security_bits(const EVP_PKEY*);
int i2d_GENERAL_NAME(const GENERAL_NAME*, unsigned char**);
int EVP_PKEY_set_type_by_keymgmt(EVP_PKEY*, EVP_KEYMGMT*);
int X509_CRL_add1_ext_i2d(X509_CRL*, int, void*, int, unsigned long);
int RAND_status();
stack_st_X509_EXTENSION* X509_REQ_get_extensions(X509_REQ*);
void SSL_CTX_set_psk_client_callback(SSL_CTX*, SSL_psk_client_cb_func);
int BIO_meth_set_create(BIO_METHOD*, int (BIO*)*);
void BN_BLINDING_free(BN_BLINDING*);
int i2d_ASN1_IA5STRING(const ASN1_IA5STRING*, unsigned char**);
PKCS7_ENCRYPT* PKCS7_ENCRYPT_new();
int BN_sqr(BIGNUM*, const BIGNUM*, BN_CTX*);
EC_KEY* EC_KEY_copy(EC_KEY*, const EC_KEY*);
void X509_CRL_free(X509_CRL*);
X509_EXTENSION* d2i_X509_EXTENSION(X509_EXTENSION**, const unsigned char**, long);
int DSA_set0_pqg(DSA*, BIGNUM*, BIGNUM*, BIGNUM*);
const SSL_METHOD* DTLSv1_client_method();
void X509_SIG_getm(X509_SIG*, X509_ALGOR**, ASN1_OCTET_STRING**);
int i2d_ASN1_BMPSTRING(const ASN1_BMPSTRING*, unsigned char**);
stack_st_X509* X509_STORE_CTX_get0_chain(const X509_STORE_CTX*);
int i2d_DSAparams(const DSA*, unsigned char**);
int OCSP_RESPID_set_by_name(OCSP_RESPID*, X509*);
const BIO_METHOD* BIO_f_md();
const EVP_CIPHER* EVP_cast5_ecb();
int ASN1_TIME_to_tm(const ASN1_TIME*, tm*);
const OSSL_PARAM* EVP_MAC_CTX_gettable_params(EVP_MAC_CTX*);
BIO* BIO_get_retry_BIO(BIO*, int*);
PKCS7* PKCS7_sign(X509*, EVP_PKEY*, stack_st_X509*, BIO*, int);
int PEM_write_PKCS8PrivateKey(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
const EVP_CIPHER* EVP_aes_128_cfb128();
EVP_PKEY* X509_PUBKEY_get0(const X509_PUBKEY*);
OSSL_PROVIDER* EVP_KEM_get0_provider(const EVP_KEM*);
void ASRange_free(ASRange*);
int PEM_write_bio_PKCS8PrivateKey_nid(BIO*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
int i2d_OTHERNAME(const OTHERNAME*, unsigned char**);
int ENGINE_set_name(ENGINE*, const char*);
int EVP_DecodeUpdate(EVP_ENCODE_CTX*, unsigned char*, int*, const unsigned char*, int);
int EVP_PKEY_set_int_param(EVP_PKEY*, const char*, int);
int X509_CRL_set_version(X509_CRL*, long);
const char* EVP_MD_get0_name(const EVP_MD*);
const OSSL_PARAM* EVP_SIGNATURE_settable_ctx_params(const EVP_SIGNATURE*);
RSA* PEM_read_bio_RSA_PUBKEY(BIO*, RSA**, pem_password_cb*, void*);
void ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX*, stack_st_ADMISSIONS*);
int X509_REVOKED_set_serialNumber(X509_REVOKED*, ASN1_INTEGER*);
int ASN1_ENUMERATED_set(ASN1_ENUMERATED*, long);
int EC_GROUP_get_field_type(const EC_GROUP*);
int CRYPTO_secure_malloc_initialized();
void EVP_PKEY_meth_set_digestverify(EVP_PKEY_METHOD*, int (EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)*);
int OSSL_PARAM_set_time_t(OSSL_PARAM*, time_t);
const stack_st_X509_EXTENSION* X509_REVOKED_get0_extensions(const X509_REVOKED*);
int OSSL_PARAM_get_octet_string_ptr(const OSSL_PARAM*, const void**, size_t*);
int SSL_CTX_use_certificate_file(SSL_CTX*, const char*, int);
const char* OSSL_default_cipher_list();
EVP_PKEY* EVP_PKCS82PKEY_ex(const PKCS8_PRIV_KEY_INFO*, OSSL_LIB_CTX*, const char*);
int SSL_peek(SSL*, void*, int);
const EVP_CIPHER* EVP_des_ede();
int ECDSA_SIG_set0(ECDSA_SIG*, BIGNUM*, BIGNUM*);
const OSSL_PARAM* EVP_PKEY_CTX_gettable_params(const EVP_PKEY_CTX*);
int SSL_SESSION_set_ex_data(SSL_SESSION*, int, void*);
CRYPTO_RWLOCK* CRYPTO_THREAD_lock_new();
int X509_STORE_set_purpose(X509_STORE*, int);
TLS_FEATURE* TLS_FEATURE_new();
void IPAddressChoice_free(IPAddressChoice*);
void EVP_MAC_CTX_free(EVP_MAC_CTX*);
GENERAL_NAME* d2i_GENERAL_NAME(GENERAL_NAME**, const unsigned char**, long);
int SSL_use_certificate(SSL*, X509*);
void POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS*);
void* OPENSSL_sk_set(OPENSSL_STACK*, int, const void*);
int UI_dup_input_boolean(UI*, const char*, const char*, const char*, const char*, int,  char*);
BIGNUM* BN_mod_inverse(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
const EVP_MD* EVP_MD_CTX_md(const EVP_MD_CTX*);
long BIO_debug_callback(BIO*, int, const char*, int, long, long);
int i2d_X509_fp(FILE*, const X509*);
RSA_OAEP_PARAMS* d2i_RSA_OAEP_PARAMS(RSA_OAEP_PARAMS**, const unsigned char**, long);
OPENSSL_LHASH* OPENSSL_LH_new(OPENSSL_LH_HASHFUNC, OPENSSL_LH_COMPFUNC);
const char* EVP_SIGNATURE_get0_name(const EVP_SIGNATURE*);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE*, const PKCS8_PRIV_KEY_INFO*);
int EVP_PKEY_CTX_get_dh_kdf_type(EVP_PKEY_CTX*);
void ASYNC_cleanup_thread();
char* BIO_ADDR_service_string(const BIO_ADDR*, int);
int EVP_PKEY_CTX_set_kem_op(EVP_PKEY_CTX*, const char*);
int SSL_set_block_padding(SSL*, size_t);
void ENGINE_register_all_RSA();
const OSSL_PARAM* EVP_MD_gettable_params(const EVP_MD*);
void OPENSSL_LH_stats_bio(const OPENSSL_LHASH*, BIO*);
const EVP_CIPHER* EVP_aria_128_cfb1();
int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX*, X509*);
int X509_CRL_get_signature_nid(const X509_CRL*);
EVP_PKEY* ENGINE_load_public_key(ENGINE*, const char*, UI_METHOD*, void*);
PKCS7_ISSUER_AND_SERIAL* PKCS7_ISSUER_AND_SERIAL_new();
const DH_METHOD* ENGINE_get_DH(const ENGINE*);
OSSL_PROVIDER* EVP_KEYEXCH_get0_provider(const EVP_KEYEXCH*);
int EVP_EncodeBlock(unsigned char*, const unsigned char*, int);
BIO* BIO_new_mem_buf(const void*, int);
void DSA_get0_pqg(const DSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
OCSP_SIGNATURE* d2i_OCSP_SIGNATURE(OCSP_SIGNATURE**, const unsigned char**, long);
int SSL_CTX_load_verify_locations(SSL_CTX*, const char*, const char*);
DSA_METHOD* DSA_meth_dup(const DSA_METHOD*);
int ERR_load_strings(int, ERR_STRING_DATA*);
int i2d_OCSP_REQINFO(const OCSP_REQINFO*, unsigned char**);
void GENERAL_SUBTREE_free(GENERAL_SUBTREE*);
int SSL_get_read_ahead(const SSL*);
EVP_PKEY* X509_REQ_get0_pubkey(X509_REQ*);
int SSL_CTX_use_psk_identity_hint(SSL_CTX*, const char*);
const EVP_CIPHER* EVP_des_ede3_cbc();
const EVP_CIPHER* EVP_desx_cbc();
X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(const X509_STORE_CTX*);
int ENGINE_set_DSA(ENGINE*, const DSA_METHOD*);
int BIO_puts(BIO*, const char*);
void ASIdOrRange_free(ASIdOrRange*);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_get0_asn1(const EVP_PKEY*);
int X509V3_set_issuer_pkey(X509V3_CTX*, EVP_PKEY*);
int SHA512_Update(SHA512_CTX*, const void*, size_t);
const char* EVP_KEM_get0_description(const EVP_KEM*);
void EVP_CIPHER_meth_free(EVP_CIPHER*);
const char* EVP_KEM_get0_name(const EVP_KEM*);
OCSP_BASICRESP* d2i_OCSP_BASICRESP(OCSP_BASICRESP**, const unsigned char**, long);
void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION*);
BIGNUM* BN_get_rfc3526_prime_8192(BIGNUM*);
void* OPENSSL_LH_retrieve(OPENSSL_LHASH*, const void*);
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD*);
ASN1_OCTET_STRING* X509_digest_sig(const X509*, EVP_MD**, int*);
X509* PEM_read_X509(FILE*, X509**, pem_password_cb*, void*);
int EVP_PKEY_CTX_set_dh_paramgen_gindex(EVP_PKEY_CTX*, int);
const char* SSL_get_servername(const SSL*, const int);
const BIGNUM* EC_GROUP_get0_cofactor(const EC_GROUP*);
const RSA_PSS_PARAMS* RSA_get0_pss_params(const RSA*);
void OPENSSL_thread_stop_ex(OSSL_LIB_CTX*);
NETSCAPE_SPKI* d2i_NETSCAPE_SPKI(NETSCAPE_SPKI**, const unsigned char**, long);
int SHA256_Update(SHA256_CTX*, const void*, size_t);
int (EVP_CIPHER_CTX*, ASN1_TYPE*)* EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER*);
int BN_BLINDING_is_current_thread(BN_BLINDING*);
int EC_GROUP_order_bits(const EC_GROUP*);
unsigned short BIO_ADDR_rawport(const BIO_ADDR*);
void BIO_ADDR_clear(BIO_ADDR*);
int EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX*, int);
int (EVP_MD_CTX*, const void*, size_t)* EVP_MD_CTX_update_fn(EVP_MD_CTX*);
BIO* BIO_new_fp(FILE*, int);
int EVP_PKEY_verify_init(EVP_PKEY_CTX*);
int SSL_CTX_set_ciphersuites(SSL_CTX*, const char*);
const stack_st_SCT* SSL_get0_peer_scts(SSL*);
int EVP_PKEY_CTX_get_params(EVP_PKEY_CTX*, OSSL_PARAM*);
IPAddressOrRange* d2i_IPAddressOrRange(IPAddressOrRange**, const unsigned char**, long);
int i2d_X509_EXTENSION(const X509_EXTENSION*, unsigned char**);
int ENGINE_set_default_digests(ENGINE*);
int BIO_ADDR_rawmake(BIO_ADDR*, int, const void*, size_t, unsigned short);
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO*);
int EVP_PKEY_CTX_set_dh_kdf_md(EVP_PKEY_CTX*, const EVP_MD*);
int EVP_MD_is_a(const EVP_MD*, const char*);
void PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO*, ASN1_PRINTABLESTRING*);
int ENGINE_ctrl_cmd(ENGINE*, const char*, long, void*, void ()*, int);
int DH_generate_key(DH*);
int EVP_PKEY_get_field_type(const EVP_PKEY*);
int EVP_PKEY_fromdata_init(EVP_PKEY_CTX*);
int OSSL_LIB_CTX_load_config(OSSL_LIB_CTX*, const char*);
void BIO_set_data(BIO*, void*);
int EVP_DecryptInit(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*);
int CRYPTO_atomic_add(int*, int, int*, CRYPTO_RWLOCK*);
DH* DH_generate_parameters(int, int, void (int, int, void*)*, void*);
int EVP_MD_CTX_get_params(EVP_MD_CTX*, OSSL_PARAM[]);
int SSL_session_reused(const SSL*);
int SSL_CTX_use_serverinfo(SSL_CTX*, const unsigned char*, size_t);
SSL_CTX* SSL_CTX_new(const SSL_METHOD*);
int SSL_CTX_dane_mtype_set(SSL_CTX*, const EVP_MD*, uint8_t, uint8_t);
PBKDF2PARAM* d2i_PBKDF2PARAM(PBKDF2PARAM**, const unsigned char**, long);
EVP_PKEY* CTLOG_get0_public_key(const CTLOG*);
int EC_POINT_set_to_infinity(const EC_GROUP*, EC_POINT*);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find_str(ENGINE**, const char*, int);
void RSA_meth_free(RSA_METHOD*);
ASN1_OBJECT* OBJ_nid2obj(int);
int PEM_read_bio(BIO*,  char**,  char**, unsigned char**, long*);
int EVP_SealFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int EC_GROUP_get_curve_name(const EC_GROUP*);
void RAND_seed(const void*, int);
int X509_REQ_get_attr_by_NID(const X509_REQ*, int, int);
int SSL_set_tlsext_use_srtp(SSL*, const char*);
void EVP_KEYMGMT_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEYMGMT*, void*)*, void*);
int SSL_CTX_set1_param(SSL_CTX*, X509_VERIFY_PARAM*);
const ASN1_ITEM* ISSUING_DIST_POINT_it();
void SCT_print(const SCT*, BIO*, int, const CTLOG_STORE*);
ASN1_UTCTIME* d2i_ASN1_UTCTIME(ASN1_UTCTIME**, const unsigned char**, long);
void* ASN1_item_d2i_fp(const ASN1_ITEM*, FILE*, void*);
DIST_POINT* d2i_DIST_POINT(DIST_POINT**, const unsigned char**, long);
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX*);
int SSL_renegotiate_pending(const SSL*);
void SSL_set_msg_callback(SSL*, void (int, int, int, const void*, size_t, SSL*, void*)*);
int SSL_stateless(SSL*);
ASN1_TIME* ASN1_TIME_dup(const ASN1_TIME*);
const char* UI_get0_output_string(UI_STRING*);
int SSL_add_client_CA(SSL*, X509*);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY*, int, int);
EVP_ASYM_CIPHER* EVP_ASYM_CIPHER_fetch(OSSL_LIB_CTX*, const char*, const char*);
EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_new(int, int, const char*, const char*);
void* SSL_SESSION_get_ex_data(const SSL_SESSION*, int);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD*);
const EVP_CIPHER* EVP_aes_128_xts();
ASN1_TIME* X509_getm_notBefore(const X509*);
int BN_is_word(const BIGNUM*, const unsigned long);
uint32_t SSL_get_recv_max_early_data(const SSL*);
SXNETID* d2i_SXNETID(SXNETID**, const unsigned char**, long);
void SSL_free(SSL*);
int EVP_PKEY_CTX_get0_dh_kdf_oid(EVP_PKEY_CTX*, ASN1_OBJECT**);
PKCS7* PEM_read_bio_PKCS7(BIO*, PKCS7**, pem_password_cb*, void*);
int i2d_RSA_PUBKEY(const RSA*, unsigned char**);
int SSL_SESSION_set_protocol_version(SSL_SESSION*, int);
int i2d_ASIdOrRange(const ASIdOrRange*, unsigned char**);
void ASN1_TYPE_set(ASN1_TYPE*, int, void*);
int X509_set_pubkey(X509*, EVP_PKEY*);
const EVP_CIPHER* EVP_camellia_192_cfb1();
int SSL_read(SSL*, void*, int);
size_t EC_KEY_priv2buf(const EC_KEY*, unsigned char**);
EVP_PKEY* d2i_PrivateKey_bio(BIO*, EVP_PKEY**);
int X509_LOOKUP_by_alias(X509_LOOKUP*, X509_LOOKUP_TYPE, const char*, int, X509_OBJECT*);
void EVP_PKEY_meth_get0_info(int*, int*, const EVP_PKEY_METHOD*);
int ENGINE_ctrl_cmd_string(ENGINE*, const char*, const char*, int);
DSA* d2i_DSAPrivateKey_fp(FILE*, DSA**);
long BIO_ctrl(BIO*, int, long, void*);
int PEM_write_DSA_PUBKEY(FILE*, const DSA*);
uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM*);
int ASN1_item_verify_ctx(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, EVP_MD_CTX*);
const OSSL_PARAM* OSSL_PARAM_locate_const(const OSSL_PARAM*, const char*);
int PEM_write_bio_X509_PUBKEY(BIO*, const X509_PUBKEY*);
void UI_set_default_method(const UI_METHOD*);
int EC_POINT_set_affine_coordinates(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
ENGINE* ENGINE_get_cipher_engine(int);
void ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX*, GENERAL_NAME*);
void ADMISSIONS_set0_namingAuthority(ADMISSIONS*, NAMING_AUTHORITY*);
EC_KEY* PEM_read_EC_PUBKEY(FILE*, EC_KEY**, pem_password_cb*, void*);
EVP_KEYMGMT* EVP_KEYMGMT_fetch(OSSL_LIB_CTX*, const char*, const char*);
void EVP_RAND_CTX_free(EVP_RAND_CTX*);
int SSL_CTX_get_quiet_shutdown(const SSL_CTX*);
int ASN1_ENUMERATED_get_int64(int64_t*, const ASN1_ENUMERATED*);
int i2d_X509_REQ_INFO(const X509_REQ_INFO*, unsigned char**);
void X509_CRL_get0_signature(const X509_CRL*, const ASN1_BIT_STRING**, const X509_ALGOR**);
BIO* BIO_new_ex(OSSL_LIB_CTX*, const BIO_METHOD*);
int EVP_RAND_get_state(EVP_RAND_CTX*);
int SSL_set_recv_max_early_data(SSL*, uint32_t);
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO*);
void POLICYQUALINFO_free(POLICYQUALINFO*);
ASN1_IA5STRING* s2i_ASN1_IA5STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
void (const SSL*, int, int)* SSL_get_info_callback(const SSL*);
const EC_METHOD* EC_POINT_method_of(const EC_POINT*);
PKCS7* PKCS7_encrypt_ex(stack_st_X509*, BIO*, const EVP_CIPHER*, int, OSSL_LIB_CTX*, const char*);
long X509_REQ_get_version(const X509_REQ*);
PKCS7_DIGEST* PKCS7_DIGEST_new();
uint32_t SSL_CIPHER_get_id(const SSL_CIPHER*);
const ASN1_TIME* X509_REVOKED_get0_revocationDate(const X509_REVOKED*);
stack_st_X509_INFO* PEM_X509_INFO_read_ex(FILE*, stack_st_X509_INFO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
X509* d2i_X509_fp(FILE*, X509**);
int EVP_PKEY_CTX_set_ecdh_kdf_outlen(EVP_PKEY_CTX*, int);
int DSA_sign_setup(DSA*, BN_CTX*, BIGNUM**, BIGNUM**);
IPAddressFamily* d2i_IPAddressFamily(IPAddressFamily**, const unsigned char**, long);
int ENGINE_register_DSA(ENGINE*);
int EVP_RAND_up_ref(EVP_RAND*);
int (X509_LOOKUP*)* X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD*);
ENGINE* ENGINE_get_prev(ENGINE*);
int EVP_RAND_CTX_get_params(EVP_RAND_CTX*, OSSL_PARAM[]);
SSL_SESSION* PEM_read_bio_SSL_SESSION(BIO*, SSL_SESSION**, pem_password_cb*, void*);
const char* OPENSSL_version_pre_release();
int EVP_PKEY_CTX_get_dh_kdf_md(EVP_PKEY_CTX*, const EVP_MD**);
int SSL_new_session_ticket(SSL*);
POLICYQUALINFO* POLICYQUALINFO_new();
int OSSL_PARAM_set_ulong(OSSL_PARAM*, unsigned long int);
EC_KEY* d2i_ECPrivateKey_bio(BIO*, EC_KEY**);
OSSL_PARAM OSSL_PARAM_construct_int(const char*, int*);
X509_STORE* SSL_CTX_get_cert_store(const SSL_CTX*);
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO*);
int X509_REQ_check_private_key(X509_REQ*, EVP_PKEY*);
int DSA_verify(int, const unsigned char*, int, const unsigned char*, int, DSA*);
int SSL_get_sigalgs(SSL*, int, int*, int*, int*, unsigned char*, unsigned char*);
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO*, const NETSCAPE_CERT_SEQUENCE*);
int SSL_CTX_set_ssl_version(SSL_CTX*, const SSL_METHOD*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_dup(const ASN1_GENERALIZEDTIME*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE**, int, int, const void*, int);
int X509_cmp_current_time(const ASN1_TIME*);
BN_BLINDING* BN_BLINDING_create_param(BN_BLINDING*, const BIGNUM*, BIGNUM*, BN_CTX*, int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*, BN_MONT_CTX*);
void IPAddressFamily_free(IPAddressFamily*);
char* i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD*, const ASN1_ENUMERATED*);
EDIPARTYNAME* EDIPARTYNAME_new();
unsigned long EVP_MD_meth_get_flags(const EVP_MD*);
const unsigned char* EVP_PKEY_get0_poly1305(const EVP_PKEY*, size_t*);
int EVP_PKEY_asn1_add_alias(int, int);
int X509_CRL_get_ext_by_NID(const X509_CRL*, int, int);
const EVP_PKEY_ASN1_METHOD* EVP_PKEY_asn1_find(ENGINE**, int);
X509_ATTRIBUTE* X509_ATTRIBUTE_new();
int i2d_PKCS8_fp(FILE*, const X509_SIG*);
ASN1_TIME* ASN1_TIME_adj(ASN1_TIME*, time_t, int, long);
int DH_meth_set_finish(DH_METHOD*, int (DH*)*);
int i2d_OCSP_SIGNATURE(const OCSP_SIGNATURE*, unsigned char**);
int EVP_PKEY_CTX_set_rsa_padding(EVP_PKEY_CTX*, int);
int SSL_SESSION_set_cipher(SSL_SESSION*, const SSL_CIPHER*);
int OSSL_HTTP_close(OSSL_HTTP_REQ_CTX*, int);
EVP_PKEY_CTX* EVP_PKEY_CTX_dup(const EVP_PKEY_CTX*);
const BIGNUM* EC_GROUP_get0_order(const EC_GROUP*);
int EVP_PKEY_parameters_eq(const EVP_PKEY*, const EVP_PKEY*);
int PEM_write_ECPKParameters(FILE*, const EC_GROUP*);
void EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
int X509_REQ_add_extensions(X509_REQ*, const stack_st_X509_EXTENSION*);
int i2d_ASRange(const ASRange*, unsigned char**);
X509* X509_new_ex(OSSL_LIB_CTX*, const char*);
OCSP_CERTSTATUS* d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS**, const unsigned char**, long);
int BIO_parse_hostserv(const char*,  char**,  char**, BIO_hostserv_priorities);
OSSL_LIB_CTX* OSSL_LIB_CTX_get0_global_default();
const OSSL_PARAM* EVP_RAND_gettable_ctx_params(const EVP_RAND*);
int ASN1_INTEGER_get_uint64(uint64_t*, const ASN1_INTEGER*);
const ec_key_st* EVP_PKEY_get0_EC_KEY(const EVP_PKEY*);
int EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(EVP_PKEY_CTX*, const char*, const char*);
int i2d_IPAddressFamily(const IPAddressFamily*, unsigned char**);
int (const unsigned char*, int, DSA_SIG*, DSA*)* DSA_meth_get_verify(const DSA_METHOD*);
const EVP_CIPHER* EVP_camellia_128_cfb8();
stack_st_X509_NAME* SSL_CTX_get_client_CA_list(const SSL_CTX*);
const char* SSL_SESSION_get0_hostname(const SSL_SESSION*);
unsigned long SSL_dane_set_flags(SSL*, unsigned long);
int EVP_PKEY_set_params(EVP_PKEY*, OSSL_PARAM[]);
int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD*);
OCSP_ONEREQ* OCSP_request_onereq_get0(OCSP_REQUEST*, int);
EVP_PKEY* EVP_PKEY_new_CMAC_key(ENGINE*, const unsigned char*, size_t, const EVP_CIPHER*);
int UI_dup_error_string(UI*, const char*);
RSA_METHOD* RSA_meth_new(const char*, int);
unsigned long EVP_CIPHER_get_flags(const EVP_CIPHER*);
void ECDSA_SIG_free(ECDSA_SIG*);
const BIGNUM* DH_get0_pub_key(const DH*);
int EC_KEY_up_ref(EC_KEY*);
const stack_st_X509_NAME* SSL_get0_CA_list(const SSL*);
int i2d_PKCS8_PRIV_KEY_INFO(const PKCS8_PRIV_KEY_INFO*, unsigned char**);
ASN1_TYPE* d2i_ASN1_TYPE(ASN1_TYPE**, const unsigned char**, long);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY*, const ASN1_OBJECT*, int);
int SSL_version(const SSL*);
int (RSA*)* RSA_meth_get_init(const RSA_METHOD*);
void* BIO_get_data(BIO*);
int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)* SSL_CTX_get_security_callback(const SSL_CTX*);
int i2d_X509_ALGOR(const X509_ALGOR*, unsigned char**);
void DH_set_flags(DH*, int);
int ENGINE_set_default_RSA(ENGINE*);
DSA_SIG* (const unsigned char*, int, DSA*)* DSA_meth_get_sign(const DSA_METHOD*);
size_t SSL_get_num_tickets(const SSL*);
void* SSL_get_record_padding_callback_arg(const SSL*);
X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(const X509_STORE*);
AUTHORITY_INFO_ACCESS* d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS**, const unsigned char**, long);
void X509_PUBKEY_free(X509_PUBKEY*);
int BIO_meth_set_read_ex(BIO_METHOD*, int (BIO*,  char*, size_t, size_t*)*);
void OCSP_CRLID_free(OCSP_CRLID*);
int BN_is_odd(const BIGNUM*);
void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int UI_get_result_minsize(UI_STRING*);
EC_GROUP* EC_GROUP_new_by_curve_name_ex(OSSL_LIB_CTX*, const char*, int);
int RSA_padding_check_none(unsigned char*, int, const unsigned char*, int, int);
X509_EXTENSION* X509_CRL_get_ext(const X509_CRL*, int);
void DH_get0_pqg(const DH*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
long ASN1_INTEGER_get(const ASN1_INTEGER*);
int RSA_padding_check_PKCS1_type_2(unsigned char*, int, const unsigned char*, int, int);
DSA_SIG* d2i_DSA_SIG(DSA_SIG**, const unsigned char**, long);
const RAND_METHOD* ENGINE_get_RAND(const ENGINE*);
int X509_REQ_get_signature_nid(const X509_REQ*);
int (DSA*)* DSA_meth_get_init(const DSA_METHOD*);
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX*);
int SSL_add1_to_CA_list(SSL*, const X509*);
int BN_pseudo_rand_range(BIGNUM*, const BIGNUM*);
NOTICEREF* d2i_NOTICEREF(NOTICEREF**, const unsigned char**, long);
void GENERAL_NAME_free(GENERAL_NAME*);
int ASN1_item_sign_ex(const ASN1_ITEM*, X509_ALGOR*, X509_ALGOR*, ASN1_BIT_STRING*, const void*, const ASN1_OCTET_STRING*, EVP_PKEY*, const EVP_MD*, OSSL_LIB_CTX*, const char*);
int EVP_DecryptFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
int EC_GROUP_set_curve(EC_GROUP*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME*, const char*);
const EVP_CIPHER* EVP_aes_256_ofb();
const char* UI_get0_result(UI*, int);
unsigned long ERR_peek_last_error_all(const char**, int*, const char**, const char**, int*);
const char* ENGINE_get_id(const ENGINE*);
int OCSP_request_sign(OCSP_REQUEST*, X509*, EVP_PKEY*, const EVP_MD*, stack_st_X509*, unsigned long);
int RAND_bytes_ex(OSSL_LIB_CTX*, unsigned char*, size_t, unsigned int);
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const PKCS8_PRIV_KEY_INFO*)*, int (PKCS8_PRIV_KEY_INFO*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*);
X509_CRL* d2i_X509_CRL(X509_CRL**, const unsigned char**, long);
int i2d_PKCS7_SIGNER_INFO(const PKCS7_SIGNER_INFO*, unsigned char**);
unsigned long ERR_peek_last_error_line_data(const char**, int*, const char**, int*);
stack_st_CONF_VALUE* NCONF_get_section(const CONF*, const char*);
BIGNUM* EC_POINT_point2bn(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, BIGNUM*, BN_CTX*);
const BIO_ADDRINFO* BIO_ADDRINFO_next(const BIO_ADDRINFO*);
int SSL_get_verify_depth(const SSL*);
X509* X509_STORE_CTX_get_current_cert(const X509_STORE_CTX*);
void OPENSSL_load_builtin_modules();
void OPENSSL_LH_doall_arg(OPENSSL_LHASH*, OPENSSL_LH_DOALL_FUNCARG, void*);
int EVP_PKEY_get_default_digest_name(EVP_PKEY*,  char*, size_t);
int EVP_PKEY_set1_encoded_public_key(EVP_PKEY*, const unsigned char*, size_t);
int EVP_PKEY_public_check(EVP_PKEY_CTX*);
int SSL_CTX_use_certificate(SSL_CTX*, X509*);
const char* EVP_RAND_get0_name(const EVP_RAND*);
int EVP_CipherInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int, const OSSL_PARAM[]);
EC_GROUP* EC_GROUP_new_by_curve_name(int);
const EVP_CIPHER* EVP_aria_128_ofb();
int OBJ_sn2nid(const char*);
int (BIO*, const char*, int)* BIO_meth_get_write(const BIO_METHOD*);
uint64_t SSL_clear_options(SSL*, uint64_t);
const EVP_CIPHER* EVP_des_ede3_cfb1();
const EVP_MD* EVP_sha1();
void OCSP_RESPBYTES_free(OCSP_RESPBYTES*);
void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD*, void (EVP_PKEY_CTX*)*);
int BN_abs_is_word(const BIGNUM*, const unsigned long);
const EVP_CIPHER* EVP_aria_256_ofb();
int ASN1_STRING_cmp(const ASN1_STRING*, const ASN1_STRING*);
void PROFESSION_INFO_free(PROFESSION_INFO*);
int i2d_DSAPrivateKey(const DSA*, unsigned char**);
int X509_PUBKEY_set(X509_PUBKEY**, EVP_PKEY*);
int OPENSSL_sk_find_all(OPENSSL_STACK*, const void*, int*);
unsigned long X509_NAME_hash_ex(const X509_NAME*, OSSL_LIB_CTX*, const char*, int*);
int EC_GROUP_get_pentanomial_basis(const EC_GROUP*, unsigned int*, unsigned int*, unsigned int*);
int PEM_bytes_read_bio(unsigned char**, long*,  char**, const char*, BIO*, pem_password_cb*, void*);
int SSL_in_init(const SSL*);
const EVP_CIPHER* EVP_aes_192_gcm();
int RAND_poll();
int SSL_get_all_async_fds(SSL*, int*, size_t*);
ENGINE* ENGINE_get_digest_engine(int);
void BN_CTX_end(BN_CTX*);
NETSCAPE_CERT_SEQUENCE* PEM_read_NETSCAPE_CERT_SEQUENCE(FILE*, NETSCAPE_CERT_SEQUENCE**, pem_password_cb*, void*);
unsigned long ERR_peek_error_all(const char**, int*, const char**, const char**, int*);
const SSL_METHOD* TLSv1_client_method();
void X509_STORE_CTX_set_cert(X509_STORE_CTX*, X509*);
stack_st_SSL_CIPHER* SSL_get_ciphers(const SSL*);
const char* OPENSSL_info(int);
const EVP_CIPHER* EVP_camellia_256_cfb128();
int X509_CRL_get_ext_count(const X509_CRL*);
const char* SSL_alert_desc_string_long(int);
int SHA224_Final(unsigned char*, SHA256_CTX*);
void SSL_CTX_set_cert_verify_callback(SSL_CTX*, int (X509_STORE_CTX*, void*)*, void*);
int EVP_PKEY_encapsulate_init(EVP_PKEY_CTX*, const OSSL_PARAM[]);
HMAC_CTX* HMAC_CTX_new();
int EVP_PKEY_CTX_get_ecdh_kdf_type(EVP_PKEY_CTX*);
int SSL_set_ex_data(SSL*, int, void*);
char* BN_bn2hex(const BIGNUM*);
EVP_CIPHER* EVP_CIPHER_fetch(OSSL_LIB_CTX*, const char*, const char*);
int BIO_snprintf( char*, size_t, const char*);
BIGNUM* BN_get_rfc3526_prime_2048(BIGNUM*);
void SSL_CONF_CTX_free(SSL_CONF_CTX*);
int i2d_PKCS8PrivateKey_fp(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
int i2d_ECPrivateKey_fp(FILE*, const EC_KEY*);
int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS*, const char*);
int SSL_CTX_set_srp_strength(SSL_CTX*, int);
void* X509_STORE_get_ex_data(const X509_STORE*, int);
int PEM_write_DSAparams(FILE*, const DSA*);
stack_st_X509_ATTRIBUTE* X509at_add1_attr_by_NID(stack_st_X509_ATTRIBUTE**, int, int, const unsigned char*, int);
int OCSP_request_add1_nonce(OCSP_REQUEST*, unsigned char*, int);
SSL_CTX* SSL_get_SSL_CTX(const SSL*);
int SCT_set_log_entry_type(SCT*, ct_log_entry_type_t);
X509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(const X509_STORE_CTX*);
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
int i2d_ASN1_PRINTABLESTRING(const ASN1_PRINTABLESTRING*, unsigned char**);
int EC_POINT_invert(const EC_GROUP*, EC_POINT*, BN_CTX*);
const SSL_METHOD* DTLSv1_method();
const stack_st_X509_NAME* SSL_CTX_get0_CA_list(const SSL_CTX*);
ASN1_BMPSTRING* d2i_ASN1_BMPSTRING(ASN1_BMPSTRING**, const unsigned char**, long);
X509* PEM_read_bio_X509_AUX(BIO*, X509**, pem_password_cb*, void*);
const EVP_CIPHER* EVP_des_ede_ecb();
int SSL_CTX_set_srp_password(SSL_CTX*,  char*);
RSA* d2i_RSAPublicKey(RSA**, const unsigned char**, long);
int SSL_SESSION_set1_hostname(SSL_SESSION*, const char*);
X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD*);
int i2d_PKCS8PrivateKey_nid_fp(FILE*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
ASN1_UTF8STRING* d2i_ASN1_UTF8STRING(ASN1_UTF8STRING**, const unsigned char**, long);
PKCS7* SMIME_read_PKCS7_ex(BIO*, BIO**, PKCS7**);
int i2d_RSAPrivateKey_fp(FILE*, const RSA*);
OSSL_PARAM OSSL_PARAM_construct_int64(const char*, int64_t*);
int ERR_set_mark();
int EC_GROUP_check_named_curve(const EC_GROUP*, int, BN_CTX*);
const EVP_CIPHER* EVP_aes_128_gcm();
OSSL_PARAM OSSL_PARAM_construct_octet_ptr(const char*, void**, size_t);
void ENGINE_register_all_DSA();
void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)**, int (EVP_PKEY_CTX*, unsigned char*, size_t*, EVP_MD_CTX*)**);
const OSSL_PARAM* EVP_CIPHER_CTX_gettable_params(EVP_CIPHER_CTX*);
ASN1_STRING* ASN1_STRING_dup(const ASN1_STRING*);
int X509_NAME_entry_count(const X509_NAME*);
int EVP_PKEY_sign_init(EVP_PKEY_CTX*);
int i2d_PBE2PARAM(const PBE2PARAM*, unsigned char**);
int i2d_PKCS8PrivateKey_bio(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const char*, int, pem_password_cb*, void*);
X509_ALGOR* PKCS5_pbe2_set_scrypt(const EVP_CIPHER*, const unsigned char*, int, unsigned char*, uint64_t, uint64_t, uint64_t);
void* SSL_get_ex_data(const SSL*, int);
int X509_NAME_get_index_by_NID(const X509_NAME*, int, int);
UI_METHOD* UI_UTIL_wrap_read_pem_callback(pem_password_cb*, int);
int EVP_PKEY_CTX_set_dh_kdf_outlen(EVP_PKEY_CTX*, int);
int DH_bits(const DH*);
const EVP_CIPHER* EVP_aria_128_cfb8();
void SSL_set0_CA_list(SSL*, stack_st_X509_NAME*);
void DSA_clear_flags(DSA*, int);
void PKCS7_DIGEST_free(PKCS7_DIGEST*);
const ASN1_ITEM* ASN1_ITEM_lookup(const char*);
void ADMISSIONS_set0_admissionAuthority(ADMISSIONS*, GENERAL_NAME*);
int EVP_KEM_is_a(const EVP_KEM*, const char*);
const DSA_METHOD* DSA_OpenSSL();
int ENGINE_set_DH(ENGINE*, const DH_METHOD*);
int SSL_CTX_up_ref(SSL_CTX*);
int BN_is_prime(const BIGNUM*, int, void (int, int, void*)*, BN_CTX*, void*);
const OSSL_PROVIDER* EVP_MD_get0_provider(const EVP_MD*);
int X509_STORE_CTX_set_trust(X509_STORE_CTX*, int);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER*);
DSA* PEM_read_DSAPrivateKey(FILE*, DSA**, pem_password_cb*, void*);
stack_st_X509* X509_build_chain(X509*, stack_st_X509*, X509_STORE*, int, OSSL_LIB_CTX*, const char*);
int UI_dup_info_string(UI*, const char*);
stack_st_X509_NAME* SSL_load_client_CA_file_ex(const char*, OSSL_LIB_CTX*, const char*);
int SSL_set_num_tickets(SSL*, size_t);
const EVP_CIPHER* EVP_camellia_256_cbc();
int RSA_meth_get_flags(const RSA_METHOD*);
int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX*, const EVP_ENCODE_CTX*);
void USERNOTICE_free(USERNOTICE*);
int SSL_in_before(const SSL*);
OSSL_LIB_CTX* OSSL_LIB_CTX_new();
int SSL_CTX_set_trust(SSL_CTX*, int);
EVP_MD* EVP_MD_CTX_get1_md(EVP_MD_CTX*);
int BIO_read(BIO*, void*, int);
EVP_PKEY* X509_PUBKEY_get(const X509_PUBKEY*);
X509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(const X509_STORE_CTX*);
int X509_EXTENSION_set_object(X509_EXTENSION*, const ASN1_OBJECT*);
X509_ATTRIBUTE* EVP_PKEY_delete_attr(EVP_PKEY*, int);
void SSL_CTX_set_security_level(SSL_CTX*, int);
int HMAC_Final(HMAC_CTX*, unsigned char*, unsigned int*);
int EC_KEY_set_ex_data(EC_KEY*, int, void*);
OSSL_PARAM OSSL_PARAM_construct_BN(const char*, unsigned char*, size_t);
ASN1_T61STRING* d2i_ASN1_T61STRING(ASN1_T61STRING**, const unsigned char**, long);
const EVP_CIPHER* EVP_camellia_128_ecb();
const EVP_CIPHER* EVP_rc4_40();
int X509_CRL_get0_by_serial(X509_CRL*, X509_REVOKED**, const ASN1_INTEGER*);
int EVP_PKEY_cmp(const EVP_PKEY*, const EVP_PKEY*);
SSL_SESSION* SSL_get1_session(SSL*);
int i2d_OCSP_BASICRESP(const OCSP_BASICRESP*, unsigned char**);
int EVP_PKEY_set1_RSA(EVP_PKEY*, rsa_st*);
int SSL_add1_host(SSL*, const char*);
void* CRYPTO_clear_realloc(void*, size_t, size_t, const char*, int);
DH* DH_new_method(ENGINE*);
void* EC_KEY_get_ex_data(const EC_KEY*, int);
void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX*, SSL*);
DSA* DSA_new();
const char* SSL_get_cipher_list(const SSL*, int);
int ASN1_STRING_to_UTF8(unsigned char**, const ASN1_STRING*);
int (DH*, int, int, BN_GENCB*)* DH_meth_get_generate_params(const DH_METHOD*);
int X509_CRL_cmp(const X509_CRL*, const X509_CRL*);
void EC_KEY_free(EC_KEY*);
int X509_load_cert_crl_file(X509_LOOKUP*, const char*, int);
void DH_get0_key(const DH*, const BIGNUM**, const BIGNUM**);
const EVP_CIPHER* EVP_rc2_ofb();
int X509_REQ_set_pubkey(X509_REQ*, EVP_PKEY*);
int DSAparams_print_fp(FILE*, const DSA*);
const unsigned char* OBJ_get0_data(const ASN1_OBJECT*);
DH* PEM_read_bio_DHparams(BIO*, DH**, pem_password_cb*, void*);
int CRYPTO_atomic_load(uint64_t*, uint64_t*, CRYPTO_RWLOCK*);
int DH_test_flags(const DH*, int);
int RSA_size(const RSA*);
void X509_STORE_set_lookup_crls(X509_STORE*, X509_STORE_CTX_lookup_crls_fn);
EVP_PKEY* PEM_read_bio_PrivateKey(BIO*, EVP_PKEY**, pem_password_cb*, void*);
ASN1_TIME* d2i_ASN1_TIME(ASN1_TIME**, const unsigned char**, long);
ASN1_STRING* ASN1_STRING_type_new(int);
int SSL_CTX_set_max_early_data(SSL_CTX*, uint32_t);
const BIGNUM* RSA_get0_dmq1(const RSA*);
void EC_KEY_set_flags(EC_KEY*, int);
int RSA_meth_set_keygen(RSA_METHOD*, int (RSA*, int, BIGNUM*, BN_GENCB*)*);
int (UI*, UI_STRING*)* UI_method_get_reader(const UI_METHOD*);
int DSA_bits(const DSA*);
int SSL_has_pending(const SSL*);
void* UI_get_ex_data(const UI*, int);
DH* d2i_DHxparams(DH**, const unsigned char**, long);
unsigned char* SHA512(const unsigned char*, size_t, unsigned char*);
X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(const X509_STORE*);
int PEM_write_PKCS7(FILE*, const PKCS7*);
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO*, const PKCS8_PRIV_KEY_INFO*);
int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD*, X509_LOOKUP_get_by_fingerprint_fn);
BIGNUM* BN_dup(const BIGNUM*);
int i2d_ISSUER_SIGN_TOOL(const ISSUER_SIGN_TOOL*, unsigned char**);
int SSL_set_generate_session_id(SSL*, GEN_SESSION_CB);
int RSA_padding_add_PKCS1_type_2(unsigned char*, int, const unsigned char*, int);
int BN_priv_rand_range_ex(BIGNUM*, const BIGNUM*, unsigned int, BN_CTX*);
int X509_check_ip(X509*, const unsigned char*, size_t, unsigned int);
int SSL_extension_supported(unsigned int);
int OSSL_HTTP_proxy_connect(BIO*, const char*, const char*, const char*, const char*, int, BIO*, const char*);
int EVP_DecryptInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*);
void SSL_CTX_set_stateless_cookie_generate_cb(SSL_CTX*, int (SSL*, unsigned char*, size_t*)*);
const OSSL_PROVIDER* EVP_PKEY_get0_provider(const EVP_PKEY*);
const dsa_st* EVP_PKEY_get0_DSA(const EVP_PKEY*);
int EVP_CIPHER_meth_set_flags(EVP_CIPHER*, unsigned long);
int X509_CRL_add0_revoked(X509_CRL*, X509_REVOKED*);
int OSSL_PARAM_get_int32(const OSSL_PARAM*, int32_t*);
int SSL_write_early_data(SSL*, const void*, size_t, size_t*);
int ASN1_item_verify_ex(const ASN1_ITEM*, const X509_ALGOR*, const ASN1_BIT_STRING*, const void*, const ASN1_OCTET_STRING*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
DSA_METHOD* DSA_meth_new(const char*, int);
size_t SSL_client_hello_get0_session_id(SSL*, const unsigned char**);
int EVP_PKEY_CTX_set_ecdh_kdf_type(EVP_PKEY_CTX*, int);
int i2d_ASN1_NULL(const ASN1_NULL*, unsigned char**);
int ASN1_INTEGER_get_int64(int64_t*, const ASN1_INTEGER*);
int ASYNC_start_job(ASYNC_JOB**, ASYNC_WAIT_CTX*, int*, int (void*)*, void*, size_t);
int OBJ_txt2nid(const char*);
const EVP_CIPHER* EVP_rc4();
void EVP_EncodeFinal(EVP_ENCODE_CTX*, unsigned char*, int*);
OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK*, OPENSSL_sk_compfunc);
const rsa_st* EVP_PKEY_get0_RSA(const EVP_PKEY*);
CTLOG_STORE* CTLOG_STORE_new_ex(OSSL_LIB_CTX*, const char*);
int X509_CRL_sign_ctx(X509_CRL*, EVP_MD_CTX*);
int EC_POINT_cmp(const EC_GROUP*, const EC_POINT*, const EC_POINT*, BN_CTX*);
int SSL_do_handshake(SSL*);
int i2d_PUBKEY(const EVP_PKEY*, unsigned char**);
int X509_CRL_add_ext(X509_CRL*, X509_EXTENSION*, int);
const EVP_CIPHER* EVP_des_cfb64();
int (UI*)* UI_method_get_closer(const UI_METHOD*);
char* BIO_get_callback_arg(const BIO*);
OCSP_RESPDATA* OCSP_RESPDATA_new();
EVP_KEM* EVP_KEM_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_PKEY_private_check(EVP_PKEY_CTX*);
const EC_METHOD* EC_GFp_nist_method();
int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX*, int*, size_t*, int*, size_t*);
const BIGNUM* RSA_get0_iqmp(const RSA*);
size_t EVP_MAC_CTX_get_block_size(EVP_MAC_CTX*);
void BN_MONT_CTX_free(BN_MONT_CTX*);
int CRYPTO_alloc_ex_data(int, void*, CRYPTO_EX_DATA*, int);
void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, int, int, void*)**, int (EVP_PKEY_CTX*, const char*, const char*)**);
BIO* OSSL_HTTP_exchange(OSSL_HTTP_REQ_CTX*,  char**);
int EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(EVP_PKEY_CTX*, int);
int EVP_PKEY_print_private_fp(FILE*, const EVP_PKEY*, int, ASN1_PCTX*);
int SSL_check_private_key(const SSL*);
int PEM_write_NETSCAPE_CERT_SEQUENCE(FILE*, const NETSCAPE_CERT_SEQUENCE*);
int RAND_set_DRBG_type(OSSL_LIB_CTX*, const char*, const char*, const char*, const char*);
const EVP_CIPHER* EVP_camellia_256_ofb();
PKCS7_SIGN_ENVELOPE* d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE**, const unsigned char**, long);
int X509_STORE_CTX_set_default(X509_STORE_CTX*, const char*);
unsigned long BN_div_word(BIGNUM*, unsigned long);
const unsigned char* SSL_SESSION_get_id(const SSL_SESSION*, unsigned int*);
size_t SCT_get0_extensions(const SCT*, unsigned char**);
size_t SSL_get_client_random(const SSL*, unsigned char*, size_t);
int BN_set_word(BIGNUM*, unsigned long);
const char* EVP_KEYEXCH_get0_name(const EVP_KEYEXCH*);
void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*, int (EVP_PKEY_CTX*, const unsigned char*, int, EVP_MD_CTX*)*);
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn, CRYPTO_realloc_fn, CRYPTO_free_fn);
int X509_get_ext_count(const X509*);
const char* SCT_validation_status_string(const SCT*);
const ASN1_INTEGER* X509_get0_serialNumber(const X509*);
const stack_st_ASN1_OBJECT* PROFESSION_INFO_get0_professionOIDs(const PROFESSION_INFO*);
void OPENSSL_sk_zero(OPENSSL_STACK*);
const char* SSL_alert_desc_string(int);
const EVP_CIPHER* EVP_camellia_128_cfb128();
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM*, int);
const EVP_CIPHER* EVP_aria_128_ecb();
const EVP_CIPHER* EVP_aria_192_gcm();
void EVP_MAC_do_all_provided(OSSL_LIB_CTX*, void (EVP_MAC*, void*)*, void*);
X509_VAL* d2i_X509_VAL(X509_VAL**, const unsigned char**, long);
ECPARAMETERS* EC_GROUP_get_ecparameters(const EC_GROUP*, ECPARAMETERS*);
int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD*);
int EVP_PKEY_can_sign(const EVP_PKEY*);
void* CRYPTO_realloc(void*, size_t, const char*, int);
int EC_POINT_dbl(const EC_GROUP*, EC_POINT*, const EC_POINT*, BN_CTX*);
NETSCAPE_CERT_SEQUENCE* d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE**, const unsigned char**, long);
int EVP_PKEY_pairwise_check(EVP_PKEY_CTX*);
int X509_LOOKUP_ctrl(X509_LOOKUP*, int, const char*, long,  char**);
int BIO_do_connect_retry(BIO*, int, int);
EVP_PKEY* b2i_PVK_bio_ex(BIO*, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
int BN_MONT_CTX_set(BN_MONT_CTX*, const BIGNUM*, BN_CTX*);
void EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD*, int (EVP_PKEY*)**);
int X509_CRL_get_ext_by_critical(const X509_CRL*, int, int);
int BIO_listen(int, const BIO_ADDR*, int);
int PKCS5_v2_PBE_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
int BN_num_bits_word(unsigned long);
void RSA_get0_key(const RSA*, const BIGNUM**, const BIGNUM**, const BIGNUM**);
RSA_PSS_PARAMS* d2i_RSA_PSS_PARAMS(RSA_PSS_PARAMS**, const unsigned char**, long);
int X509_CRL_get_ext_by_OBJ(const X509_CRL*, const ASN1_OBJECT*, int);
unsigned long ERR_peek_error_data(const char**, int*);
void BN_swap(BIGNUM*, BIGNUM*);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK*);
const EVP_MD* EVP_sha3_512();
int EVP_PKEY_set_type(EVP_PKEY*, int);
int i2d_IPAddressRange(const IPAddressRange*, unsigned char**);
int SHA1_Update(SHA_CTX*, const void*, size_t);
int OSSL_PARAM_set_int(OSSL_PARAM*, int);
int EC_KEY_set_group(EC_KEY*, const EC_GROUP*);
OCSP_SERVICELOC* d2i_OCSP_SERVICELOC(OCSP_SERVICELOC**, const unsigned char**, long);
void OPENSSL_LH_set_down_load(OPENSSL_LHASH*, unsigned long);
void RSA_set_flags(RSA*, int);
const BIO_METHOD* BIO_f_prefix();
void PBE2PARAM_free(PBE2PARAM*);
int X509_STORE_load_path(X509_STORE*, const char*);
int X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int i2d_OCSP_RESPONSE(const OCSP_RESPONSE*, unsigned char**);
EVP_RAND_CTX* EVP_RAND_CTX_new(EVP_RAND*, EVP_RAND_CTX*);
int DH_meth_set_generate_key(DH_METHOD*, int (DH*)*);
const EVP_MD* EVP_shake128();
const SSL_METHOD* DTLS_client_method();
int ASYNC_pause_job();
int SSL_CTX_set_default_verify_dir(SSL_CTX*);
int i2d_PKCS7_RECIP_INFO(const PKCS7_RECIP_INFO*, unsigned char**);
int X509_LOOKUP_ctrl_ex(X509_LOOKUP*, int, const char*, long,  char**, OSSL_LIB_CTX*, const char*);
int i2d_ASN1_UNIVERSALSTRING(const ASN1_UNIVERSALSTRING*, unsigned char**);
int EVP_PKEY_set_ex_data(EVP_PKEY*, int, void*);
OPENSSL_STACK* OPENSSL_sk_dup(const OPENSSL_STACK*);
int i2d_X509_NAME_ENTRY(const X509_NAME_ENTRY*, unsigned char**);
GENERAL_NAMES* GENERAL_NAMES_new();
int OSSL_HTTP_set1_request(OSSL_HTTP_REQ_CTX*, const char*, const stack_st_CONF_VALUE*, const char*, BIO*, const char*, int, size_t, int, int);
void SSL_set_bio(SSL*, BIO*, BIO*);
int ECDSA_verify(int, const unsigned char*, int, const unsigned char*, int, EC_KEY*);
int EVP_PKEY_derive_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
int i2d_PKCS7_SIGNED(const PKCS7_SIGNED*, unsigned char**);
EVP_PKEY* d2i_PUBKEY_fp(FILE*, EVP_PKEY**);
EVP_MD* EVP_MD_meth_new(int, int);
int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK*);
PROXY_CERT_INFO_EXTENSION* PROXY_CERT_INFO_EXTENSION_new();
int EVP_PKEY_check(EVP_PKEY_CTX*);
const EVP_CIPHER* EVP_aes_192_ccm();
void ERR_error_string_n(unsigned long,  char*, size_t);
uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION*);
const unsigned char* EVP_PKEY_get0_siphash(const EVP_PKEY*, size_t*);
int HMAC_Init_ex(HMAC_CTX*, const void*, int, const EVP_MD*, ENGINE*);
OTHERNAME* d2i_OTHERNAME(OTHERNAME**, const unsigned char**, long);
int SCT_set1_signature(SCT*, const unsigned char*, size_t);
int EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX*, int);
dsa_st* EVP_PKEY_get1_DSA(EVP_PKEY*);
const NAMING_AUTHORITY* PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO*);
int X509_NAME_get_index_by_OBJ(const X509_NAME*, const ASN1_OBJECT*, int);
long BIO_callback_ctrl(BIO*, int, BIO_info_cb*);
const EVP_CIPHER* EVP_aes_192_ofb();
stack_st_SCT* d2i_SCT_LIST(stack_st_SCT**, const unsigned char**, long);
CT_POLICY_EVAL_CTX* CT_POLICY_EVAL_CTX_new();
int i2d_PKCS7_NDEF(const PKCS7*, unsigned char**);
int RSA_padding_add_none(unsigned char*, int, const unsigned char*, int);
X509_NAME* X509_CRL_get_issuer(const X509_CRL*);
size_t EVP_MAC_CTX_get_mac_size(EVP_MAC_CTX*);
BIO* OSSL_HTTP_transfer(OSSL_HTTP_REQ_CTX**, const char*, const char*, const char*, int, const char*, const char*, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, const stack_st_CONF_VALUE*, const char*, BIO*, const char*, int, size_t, int, int);
PKCS7_SIGN_ENVELOPE* PKCS7_SIGN_ENVELOPE_new();
void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX*, uint64_t);
X509_ALGOR* PKCS5_pbe2_set_iv(const EVP_CIPHER*, int, unsigned char*, int, unsigned char*, int);
ASN1_TIME* X509_time_adj(ASN1_TIME*, long, time_t*);
int DSA_meth_set_sign_setup(DSA_METHOD*, int (DSA*, BN_CTX*, BIGNUM**, BIGNUM**)*);
SSL* SSL_dup(SSL*);
const EVP_CIPHER* EVP_aes_192_ocb();
void X509_STORE_set_check_revocation(X509_STORE*, X509_STORE_CTX_check_revocation_fn);
AUTHORITY_KEYID* AUTHORITY_KEYID_new();
int BN_bn2bin(const BIGNUM*, unsigned char*);
int X509_STORE_add_cert(X509_STORE*, X509*);
int RSA_meth_set_priv_dec(RSA_METHOD*, int (int, const unsigned char*, unsigned char*, RSA*, int)*);
unsigned long ERR_get_error_line_data(const char**, int*, const char**, int*);
X509* SSL_get1_peer_certificate(const SSL*);
void OCSP_SERVICELOC_free(OCSP_SERVICELOC*);
DSA* DSA_generate_parameters(int, unsigned char*, int, int*, unsigned long*, void (int, int, void*)*, void*);
CONF* NCONF_new_ex(OSSL_LIB_CTX*, CONF_METHOD*);
char* BN_bn2dec(const BIGNUM*);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO*, const PKCS8_PRIV_KEY_INFO*);
const BIGNUM* DH_get0_g(const DH*);
const BIGNUM* ECDSA_SIG_get0_r(const ECDSA_SIG*);
X509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(const X509_STORE_CTX*);
char* X509_NAME_oneline(const X509_NAME*,  char*, int);
int ASN1_STRING_length(const ASN1_STRING*);
int BN_is_prime_ex(const BIGNUM*, int, BN_CTX*, BN_GENCB*);
const EVP_CIPHER* EVP_camellia_256_cfb1();
int X509_REVOKED_set_revocationDate(X509_REVOKED*, ASN1_TIME*);
int PKCS8_pkey_add1_attr_by_OBJ(PKCS8_PRIV_KEY_INFO*, const ASN1_OBJECT*, int, const unsigned char*, int);
void SSL_set_psk_client_callback(SSL*, SSL_psk_client_cb_func);
int OPENSSL_sk_find_ex(OPENSSL_STACK*, const void*);
const OSSL_PROVIDER* EVP_KEYMGMT_get0_provider(const EVP_KEYMGMT*);
void EVP_PKEY_meth_get_digestverify(const EVP_PKEY_METHOD*, int (EVP_MD_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)**);
int DH_check(const DH*, int*);
ASN1_BIT_STRING* d2i_ASN1_BIT_STRING(ASN1_BIT_STRING**, const unsigned char**, long);
int ENGINE_set_default_ciphers(ENGINE*);
int i2d_X509_bio(BIO*, const X509*);
void SSL_CTX_set_psk_server_callback(SSL_CTX*, SSL_psk_server_cb_func);
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX*, const char*);
int EVP_DigestInit(EVP_MD_CTX*, const EVP_MD*);
stack_st_OPENSSL_CSTRING* NCONF_get_section_names(const CONF*);
const stack_st_ADMISSIONS* ADMISSION_SYNTAX_get0_contentsOfAdmissions(const ADMISSION_SYNTAX*);
EC_KEY* d2i_EC_PUBKEY(EC_KEY**, const unsigned char**, long);
void OPENSSL_LH_flush(OPENSSL_LHASH*);
int CTLOG_new_from_base64(CTLOG**, const char*, const char*);
int UI_get_input_flags(UI_STRING*);
PBE2PARAM* PBE2PARAM_new();
int OSSL_HTTP_REQ_CTX_nbio(OSSL_HTTP_REQ_CTX*);
void (X509_LOOKUP*)* X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD*);
BN_GENCB* BN_GENCB_new();
int EVP_PKEY_CTX_md(EVP_PKEY_CTX*, int, int, const char*);
unsigned long OpenSSL_version_num();
void X509_CRL_INFO_free(X509_CRL_INFO*);
int EVP_PKEY_CTX_set_dh_paramgen_prime_len(EVP_PKEY_CTX*, int);
ASYNC_WAIT_CTX* ASYNC_get_wait_ctx(ASYNC_JOB*);
int X509_PUBKEY_get0_param(ASN1_OBJECT**, const unsigned char**, int*, X509_ALGOR**, const X509_PUBKEY*);
ASN1_STRING* d2i_DIRECTORYSTRING(ASN1_STRING**, const unsigned char**, long);
X509_LOOKUP_METHOD* X509_LOOKUP_hash_dir();
char* CONF_get1_default_config_file();
void EVP_SIGNATURE_do_all_provided(OSSL_LIB_CTX*, void (EVP_SIGNATURE*, void*)*, void*);
int EVP_PKEY_set_size_t_param(EVP_PKEY*, const char*, size_t);
int PEM_write_X509_AUX(FILE*, const X509*);
int DH_meth_set_compute_key(DH_METHOD*, int (unsigned char*, const BIGNUM*, DH*)*);
char* OPENSSL_buf2hexstr(const unsigned char*, long);
int X509_LOOKUP_by_subject(X509_LOOKUP*, X509_LOOKUP_TYPE, const X509_NAME*, X509_OBJECT*);
const SSL_METHOD* DTLSv1_2_client_method();
void OCSP_SINGLERESP_free(OCSP_SINGLERESP*);
const OSSL_PARAM* EVP_CIPHER_CTX_settable_params(EVP_CIPHER_CTX*);
void OCSP_RESPID_free(OCSP_RESPID*);
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX*);
EVP_PKEY* d2i_PrivateKey_ex(int, EVP_PKEY**, const unsigned char**, long, OSSL_LIB_CTX*, const char*);
int PEM_write_bio_DHxparams(BIO*, const DH*);
int SSL_set_srp_server_param_pw(SSL*, const char*, const char*, const char*);
void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS*);
ASN1_TIME* X509_getm_notAfter(const X509*);
int PKCS5_v2_scrypt_keyivgen_ex(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int, OSSL_LIB_CTX*, const char*);
int i2d_NETSCAPE_SPKI(const NETSCAPE_SPKI*, unsigned char**);
ASN1_VALUE* ASN1_item_new(const ASN1_ITEM*);
ECPKPARAMETERS* ECPKPARAMETERS_new();
EC_KEY* PEM_read_bio_EC_PUBKEY(BIO*, EC_KEY**, pem_password_cb*, void*);
int EVP_PKEY_CTX_set_rsa_mgf1_md(EVP_PKEY_CTX*, const EVP_MD*);
ASN1_UTCTIME* ASN1_UTCTIME_adj(ASN1_UTCTIME*, time_t, int, long);
void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD*);
OCSP_CERTID* OCSP_cert_id_new(const EVP_MD*, const X509_NAME*, const ASN1_BIT_STRING*, const ASN1_INTEGER*);
int SSL_set0_tmp_dh_pkey(SSL*, EVP_PKEY*);
stack_st_X509_INFO* PEM_X509_INFO_read(FILE*, stack_st_X509_INFO*, pem_password_cb*, void*);
int ENGINE_register_digests(ENGINE*);
void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX*);
OSSL_PARAM OSSL_PARAM_construct_double(const char*, double*);
int EVP_PKEY_CTX_set_rsa_keygen_pubexp(EVP_PKEY_CTX*, BIGNUM*);
const X509_ALGOR* X509_get0_tbs_sigalg(const X509*);
int HMAC_CTX_reset(HMAC_CTX*);
OCSP_SERVICELOC* OCSP_SERVICELOC_new();
int X509_STORE_set_depth(X509_STORE*, int);
int ENGINE_set_load_privkey_function(ENGINE*, ENGINE_LOAD_KEY_PTR);
PKCS7* SMIME_read_PKCS7(BIO*, BIO**);
int i2d_IPAddressChoice(const IPAddressChoice*, unsigned char**);
const EVP_CIPHER* EVP_chacha20();
void* X509V3_get_d2i(const stack_st_X509_EXTENSION*, int, int*, int*);
int EC_GROUP_get_basis_type(const EC_GROUP*);
int BIO_set_cipher(BIO*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, int);
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD*);
int EVP_PKEY_set_utf8_string_param(EVP_PKEY*, const char*, const char*);
int DH_meth_get_flags(const DH_METHOD*);
size_t SCT_get0_signature(const SCT*, unsigned char**);
int OCSP_id_cmp(const OCSP_CERTID*, const OCSP_CERTID*);
void RAND_add(const void*, int, double);
int PEM_write_PKCS8PrivateKey_nid(FILE*, const EVP_PKEY*, int, const char*, int, pem_password_cb*, void*);
X509_SIG* PEM_read_bio_PKCS8(BIO*, X509_SIG**, pem_password_cb*, void*);
void EVP_PKEY_meth_get_digestsign(const EVP_PKEY_METHOD*, int (EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)**);
int EVP_PKEY_CTX_set_ecdh_cofactor_mode(EVP_PKEY_CTX*, int);
void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*)*);
void EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*, unsigned char*, size_t*)*);
int EVP_PKEY_CTX_set_mac_key(EVP_PKEY_CTX*, const unsigned char*, int);
int i2d_DHparams(const DH*, unsigned char**);
RSA* d2i_RSA_PUBKEY_fp(FILE*, RSA**);
const EVP_CIPHER* EVP_camellia_256_ctr();
void OTHERNAME_free(OTHERNAME*);
int ENGINE_set_default_string(ENGINE*, const char*);
int BN_mul(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
int X509_CRL_match(const X509_CRL*, const X509_CRL*);
int SSL_get_ex_data_X509_STORE_CTX_idx();
DSA* d2i_DSAPrivateKey_bio(BIO*, DSA**);
int EVP_PKEY_type_names_do_all(const EVP_PKEY*, void (const char*, void*)*, void*);
int i2d_DSAPrivateKey_fp(FILE*, const DSA*);
void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
int PEM_write_RSAPrivateKey(FILE*, const RSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
pem_password_cb* SSL_CTX_get_default_passwd_cb(SSL_CTX*);
int BIO_gets(BIO*,  char*, int);
int i2d_AUTHORITY_KEYID(const AUTHORITY_KEYID*, unsigned char**);
size_t EC_GROUP_get_seed_len(const EC_GROUP*);
AUTHORITY_KEYID* d2i_AUTHORITY_KEYID(AUTHORITY_KEYID**, const unsigned char**, long);
const EVP_CIPHER* EVP_bf_cbc();
unsigned char* EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX*);
X509* SSL_get0_peer_certificate(const SSL*);
X509_PUBKEY* d2i_X509_PUBKEY_fp(FILE*, X509_PUBKEY**);
int SSL_waiting_for_async(SSL*);
void X509_STORE_CTX_cleanup(X509_STORE_CTX*);
const BIGNUM* DH_get0_priv_key(const DH*);
const EVP_CIPHER* EVP_aria_256_ctr();
BIO* OSSL_HTTP_get(const char*, const char*, const char*, BIO*, BIO*, OSSL_HTTP_bio_cb_t, void*, int, const stack_st_CONF_VALUE*, const char*, int, size_t, int);
int EVP_DecodeBlock(unsigned char*, const unsigned char*, int);
int PEM_write_DSAPrivateKey(FILE*, const DSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int OSSL_PARAM_set_utf8_string(OSSL_PARAM*, const char*);
int EVP_CipherUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
void OCSP_ONEREQ_free(OCSP_ONEREQ*);
int EVP_PBE_alg_add_type(int, int, int, int, EVP_PBE_KEYGEN*);
const EVP_CIPHER* EVP_aes_192_wrap();
int SSL_client_hello_get1_extensions_present(SSL*, int**, size_t*);
int BIO_meth_set_read(BIO_METHOD*, int (BIO*,  char*, int)*);
int OSSL_PARAM_get_octet_string(const OSSL_PARAM*, void**, size_t, size_t*);
int EVP_Digest(const void*, size_t, unsigned char*, unsigned int*, const EVP_MD*, ENGINE*);
void OCSP_RESPONSE_free(OCSP_RESPONSE*);
int ENGINE_set_flags(ENGINE*, int);
void* ENGINE_get_ex_data(const ENGINE*, int);
BIGNUM* ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED*, BIGNUM*);
int OPENSSL_hexstr2buf_ex(unsigned char*, size_t, size_t*, const char*, const char);
const char* OSSL_default_ciphersuites();
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP*, EC_POINT*, const BIGNUM*, const BIGNUM*, BN_CTX*);
long SSL_get_verify_result(const SSL*);
int EVP_PKEY_param_check(EVP_PKEY_CTX*);
void IPAddressRange_free(IPAddressRange*);
int X509_STORE_CTX_get_num_untrusted(const X509_STORE_CTX*);
void RSA_set_default_method(const RSA_METHOD*);
const EVP_CIPHER* EVP_aria_192_ecb();
const OSSL_PROVIDER* EVP_CIPHER_get0_provider(const EVP_CIPHER*);
void DSA_SIG_get0(const DSA_SIG*, const BIGNUM**, const BIGNUM**);
stack_st_X509* SSL_get_peer_cert_chain(const SSL*);
X509* d2i_X509_bio(BIO*, X509**);
int DSA_meth_set_flags(DSA_METHOD*, int);
const EVP_CIPHER* EVP_aria_192_cfb1();
const EVP_CIPHER* EVP_des_ede3_wrap();
int OSSL_PARAM_set_octet_string(OSSL_PARAM*, const void*, size_t);
int DSA_meth_set_bn_mod_exp(DSA_METHOD*, int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int EC_KEY_set_method(EC_KEY*, const EC_KEY_METHOD*);
void SSL_CTX_set_cookie_generate_cb(SSL_CTX*, int (SSL*, unsigned char*, unsigned int*)*);
int SSL_write_ex(SSL*, const void*, size_t, size_t*);
NAME_CONSTRAINTS* NAME_CONSTRAINTS_new();
int SSL_CTX_use_PrivateKey_ASN1(int, SSL_CTX*, const unsigned char*, long);
int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER*, int (EVP_CIPHER_CTX*, unsigned char*, const unsigned char*, size_t)*);
int SSL_CTX_set_ctlog_list_file(SSL_CTX*, const char*);
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX*, int);
RAND_METHOD* RAND_OpenSSL();
int EVP_KEYEXCH_names_do_all(const EVP_KEYEXCH*, void (const char*, void*)*, void*);
OCSP_BASICRESP* OCSP_response_get1_basic(OCSP_RESPONSE*);
unsigned long BN_BLINDING_get_flags(const BN_BLINDING*);
const EVP_CIPHER* EVP_enc_null();
X509_CRL* X509_CRL_dup(const X509_CRL*);
int EC_POINTs_make_affine(const EC_GROUP*, size_t, EC_POINT*[], BN_CTX*);
int i2d_X509_REQ(const X509_REQ*, unsigned char**);
PBKDF2PARAM* PBKDF2PARAM_new();
int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME*);
const dh_st* EVP_PKEY_get0_DH(const EVP_PKEY*);
const SSL_METHOD* TLSv1_2_server_method();
int X509_set_serialNumber(X509*, ASN1_INTEGER*);
int i2d_PKCS7_ENCRYPT(const PKCS7_ENCRYPT*, unsigned char**);
void X509_STORE_free(X509_STORE*);
X509_REQ_INFO* d2i_X509_REQ_INFO(X509_REQ_INFO**, const unsigned char**, long);
unsigned char* SHA224(const unsigned char*, size_t, unsigned char*);
BIO* BIO_next(BIO*);
int EVP_SIGNATURE_is_a(const EVP_SIGNATURE*, const char*);
int PEM_write_bio_PrivateKey_ex(BIO*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
const EVP_CIPHER* EVP_aes_256_cfb128();
int BN_lshift(BIGNUM*, const BIGNUM*, int);
void EVP_KEYEXCH_free(EVP_KEYEXCH*);
int BIO_get_init(BIO*);
DH* DH_new();
ASN1_STRING* DIRECTORYSTRING_new();
void PROXY_POLICY_free(PROXY_POLICY*);
int EVP_PKEY_param_check_quick(EVP_PKEY_CTX*);
int i2d_PUBKEY_bio(BIO*, const EVP_PKEY*);
int BN_is_one(const BIGNUM*);
int SHA256_Final(unsigned char*, SHA256_CTX*);
int (DSA*)* DSA_meth_get_keygen(const DSA_METHOD*);
void EVP_PKEY_meth_set_digestsign(EVP_PKEY_METHOD*, int (EVP_MD_CTX*, unsigned char*, size_t*, const unsigned char*, size_t)*);
void X509_STORE_set_verify(X509_STORE*, X509_STORE_CTX_verify_fn);
void SSL_set_read_ahead(SSL*, int);
stack_st_SSL_CIPHER* SSL_get_client_ciphers(const SSL*);
int SSL_use_PrivateKey(SSL*, EVP_PKEY*);
int EVP_PKEY_get_size(const EVP_PKEY*);
int SSL_client_hello_isv2(SSL*);
int X509_STORE_lock(X509_STORE*);
const OSSL_PARAM* EVP_RAND_CTX_gettable_params(EVP_RAND_CTX*);
const SSL_CIPHER* SSL_SESSION_get0_cipher(const SSL_SESSION*);
const EVP_CIPHER* EVP_aes_256_ocb();
int EVP_PKEY_derive_set_peer_ex(EVP_PKEY_CTX*, EVP_PKEY*, int);
ASN1_OBJECT* X509_EXTENSION_get_object(X509_EXTENSION*);
const char* EVP_CIPHER_get0_description(const EVP_CIPHER*);
RSA* d2i_RSAPrivateKey_bio(BIO*, RSA**);
int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM*);
void EC_KEY_clear_flags(EC_KEY*, int);
void CRYPTO_free_ex_data(int, void*, CRYPTO_EX_DATA*);
OCSP_CERTID* OCSP_cert_to_id(const EVP_MD*, const X509*, const X509*);
long X509_get_pathlen(X509*);
int RSA_security_bits(const RSA*);
GENERAL_NAMES* d2i_GENERAL_NAMES(GENERAL_NAMES**, const unsigned char**, long);
int EVP_DigestFinalXOF(EVP_MD_CTX*, unsigned char*, size_t);
int X509_STORE_load_locations(X509_STORE*, const char*, const char*);
ENGINE* EC_KEY_get0_engine(const EC_KEY*);
X509_NAME_ENTRY* X509_NAME_ENTRY_new();
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX*, int, void*);
void SSL_CTX_set_quiet_shutdown(SSL_CTX*, int);
void ERR_set_error(int, int, const char*);
DH* PEM_read_DHparams(FILE*, DH**, pem_password_cb*, void*);
int i2d_X509_AUX(const X509*, unsigned char**);
X509_ALGOR* X509_ALGOR_new();
int SSL_CTX_set_block_padding(SSL_CTX*, size_t);
int X509_CRL_sort(X509_CRL*);
int SSL_SESSION_set_max_early_data(SSL_SESSION*, uint32_t);
int CRYPTO_set_ex_data(CRYPTO_EX_DATA*, int, void*);
int BN_mod_exp_mont_consttime(BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*);
int ENGINE_set_default_RAND(ENGINE*);
int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void SSL_CTX_set_allow_early_data_cb(SSL_CTX*, SSL_allow_early_data_cb_fn, void*);
int EVP_VerifyFinal_ex(EVP_MD_CTX*, const unsigned char*, unsigned int, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
DIST_POINT* DIST_POINT_new();
BN_CTX* BN_CTX_new();
int PEM_write_PKCS8_PRIV_KEY_INFO(FILE*, const PKCS8_PRIV_KEY_INFO*);
int EVP_CIPHER_up_ref(EVP_CIPHER*);
int X509_check_private_key(const X509*, const EVP_PKEY*);
int BIO_bind(int, const BIO_ADDR*, int);
int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM*, const char*, size_t);
int i2d_PKCS7_DIGEST(const PKCS7_DIGEST*, unsigned char**);
int EC_GROUP_get_degree(const EC_GROUP*);
int PEM_write_X509_PUBKEY(FILE*, const X509_PUBKEY*);
void X509_REQ_get0_signature(const X509_REQ*, const ASN1_BIT_STRING**, const X509_ALGOR**);
int SSL_CTX_load_verify_dir(SSL_CTX*, const char*);
int X509_ALGOR_copy(X509_ALGOR*, const X509_ALGOR*);
int EVP_PKEY_CTX_set_ec_param_enc(EVP_PKEY_CTX*, int);
void EVP_MD_do_all_provided(OSSL_LIB_CTX*, void (EVP_MD*, void*)*, void*);
void SSL_CTX_set_msg_callback(SSL_CTX*, void (int, int, int, const void*, size_t, SSL*, void*)*);
int (BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* RSA_meth_get_bn_mod_exp(const RSA_METHOD*);
EVP_PKEY* EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX*);
void GENERAL_NAMES_free(GENERAL_NAMES*);
void DH_meth_free(DH_METHOD*);
OCSP_ONEREQ* OCSP_request_add0_id(OCSP_REQUEST*, OCSP_CERTID*);
void DH_free(DH*);
int EVP_CIPHER_CTX_get_updated_iv(EVP_CIPHER_CTX*, void*, size_t);
const EVP_CIPHER* EVP_des_ede3_cfb8();
DSA* d2i_DSAPrivateKey(DSA**, const unsigned char**, long);
stack_st_X509_NAME* SSL_get_client_CA_list(const SSL*);
int EVP_PKEY_print_private(BIO*, const EVP_PKEY*, int, ASN1_PCTX*);
rsa_st* EVP_PKEY_get1_RSA(EVP_PKEY*);
int BN_mod_mul_reciprocal(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_RECP_CTX*, BN_CTX*);
int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER*, int);
int i2o_SCT(const SCT*, unsigned char**);
int SSL_want(const SSL*);
void* X509_get_ext_d2i(const X509*, int, int*, int*);
PKCS8_PRIV_KEY_INFO* d2i_PKCS8_PRIV_KEY_INFO_fp(FILE*, PKCS8_PRIV_KEY_INFO**);
X509_ALGOR* PKCS5_pbkdf2_set_ex(int, unsigned char*, int, int, int, OSSL_LIB_CTX*);
int X509_CRL_verify(X509_CRL*, EVP_PKEY*);
void X509_STORE_set_lookup_certs(X509_STORE*, X509_STORE_CTX_lookup_certs_fn);
OSSL_LIB_CTX* OSSL_LIB_CTX_set0_default(OSSL_LIB_CTX*);
int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX*, const void*);
int SSL_CTX_use_PrivateKey(SSL_CTX*, EVP_PKEY*);
int ASN1_UTCTIME_check(const ASN1_UTCTIME*);
ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE*);
int EVP_PKEY_generate(EVP_PKEY_CTX*, EVP_PKEY**);
PKCS7* d2i_PKCS7_bio(BIO*, PKCS7**);
int ENGINE_set_digests(ENGINE*, ENGINE_DIGESTS_PTR);
int CRYPTO_THREAD_run_once(CRYPTO_ONCE*, void ()*);
X509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_camellia_192_cfb128();
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(EVP_PKEY_CTX*, const EVP_MD*);
int ECDSA_do_verify(const unsigned char*, int, const ECDSA_SIG*, EC_KEY*);
void OPENSSL_LH_stats(const OPENSSL_LHASH*, FILE*);
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX*, ASN1_TYPE*);
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char**, int)*, int (const EVP_PKEY*, unsigned char**)*, int (const EVP_PKEY*)*, int (EVP_PKEY*, const EVP_PKEY*)*, int (const EVP_PKEY*, const EVP_PKEY*)*, int (BIO*, const EVP_PKEY*, int, ASN1_PCTX*)*);
char* SSL_CIPHER_description(const SSL_CIPHER*,  char*, int);
long DH_get_length(const DH*);
int UI_process(UI*);
int DSA_meth_get_flags(const DSA_METHOD*);
int SSL_CTX_use_serverinfo_ex(SSL_CTX*, unsigned int, const unsigned char*, size_t);
void SSL_set_psk_use_session_callback(SSL*, SSL_psk_use_session_cb_func);
int PEM_bytes_read_bio_secmem(unsigned char**, long*,  char**, const char*, BIO*, pem_password_cb*, void*);
int OSSL_PARAM_get_uint32(const OSSL_PARAM*, uint32_t*);
const char* ERR_lib_error_string(unsigned long);
GENERAL_NAME* GENERAL_NAME_dup(const GENERAL_NAME*);
OSSL_PARAM OSSL_PARAM_construct_end();
void ERR_new();
int EVP_MD_CTX_copy(EVP_MD_CTX*, const EVP_MD_CTX*);
const EVP_MD* EVP_sha512_256();
const DH_METHOD* DH_get_default_method();
int X509_STORE_CTX_get1_issuer(X509**, X509_STORE_CTX*, X509*);
void POLICYINFO_free(POLICYINFO*);
int i2d_AUTHORITY_INFO_ACCESS(const AUTHORITY_INFO_ACCESS*, unsigned char**);
BIGNUM* BN_get_rfc2409_prime_1024(BIGNUM*);
void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY*, ASN1_IA5STRING*);
void OPENSSL_fork_parent();
DSA* PEM_read_bio_DSAparams(BIO*, DSA**, pem_password_cb*, void*);
void X509_STORE_set_verify_cb(X509_STORE*, X509_STORE_CTX_verify_cb);
int i2d_PKCS7_bio_stream(BIO*, PKCS7*, BIO*, int);
int X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD*, int (X509_LOOKUP*)*);
int BIO_get_new_index();
size_t EVP_PKEY_get1_encoded_public_key(EVP_PKEY*, unsigned char**);
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM*, int);
const EVP_MD* EVP_whirlpool();
int (DH*)* DH_meth_get_init(const DH_METHOD*);
unsigned EC_KEY_get_enc_flags(const EC_KEY*);
OSSL_LIB_CTX* NCONF_get0_libctx(const CONF*);
const EVP_CIPHER* EVP_aes_192_ctr();
int EVP_EncryptUpdate(EVP_CIPHER_CTX*, unsigned char*, int*, const unsigned char*, int);
const EVP_MD* SSL_CIPHER_get_handshake_digest(const SSL_CIPHER*);
int RSA_set0_multi_prime_params(RSA*, BIGNUM*[], BIGNUM*[], BIGNUM*[], int);
X509_EXTENSION* X509v3_get_ext(const stack_st_X509_EXTENSION*, int);
void SSL_CTX_set_post_handshake_auth(SSL_CTX*, int);
X509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(const X509_STORE_CTX*);
int SSL_get_servername_type(const SSL*);
int EVP_CipherFinal(EVP_CIPHER_CTX*, unsigned char*, int*);
PKCS7_ENC_CONTENT* PKCS7_ENC_CONTENT_new();
int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)* SSL_get_security_callback(const SSL*);
PKCS8_PRIV_KEY_INFO* PKCS8_PRIV_KEY_INFO_new();
const EVP_CIPHER* EVP_aes_256_ctr();
IPAddressChoice* d2i_IPAddressChoice(IPAddressChoice**, const unsigned char**, long);
int SSL_use_RSAPrivateKey(SSL*, RSA*);
long SSL_callback_ctrl(SSL*, int, void ()*);
int DSA_meth_set_mod_exp(DSA_METHOD*, int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE*, int, const void*, int);
void SSL_CTX_set_security_callback(SSL_CTX*, int (const SSL*, const SSL_CTX*, int, int, int, void*, void*)*);
const EVP_CIPHER* EVP_camellia_192_cfb8();
BIO_callback_fn BIO_get_callback(const BIO*);
const BIGNUM* BN_value_one();
int DH_meth_set_bn_mod_exp(DH_METHOD*, int (const DH*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)*);
int EVP_MD_get_pkey_type(const EVP_MD*);
EVP_RAND* EVP_RAND_fetch(OSSL_LIB_CTX*, const char*, const char*);
PKCS7_DIGEST* d2i_PKCS7_DIGEST(PKCS7_DIGEST**, const unsigned char**, long);
const BIO_METHOD* BIO_s_accept();
const EVP_CIPHER* EVP_camellia_192_ofb();
int PEM_write_PrivateKey(FILE*, const EVP_PKEY*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
void* DSA_meth_get0_app_data(const DSA_METHOD*);
int SSL_SESSION_set1_alpn_selected(SSL_SESSION*, const unsigned char*, size_t);
void EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char*, size_t)*);
int i2d_NETSCAPE_CERT_SEQUENCE(const NETSCAPE_CERT_SEQUENCE*, unsigned char**);
int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX*, int, int, int, uint64_t);
ENGINE* ENGINE_get_next(ENGINE*);
OCSP_CERTID* OCSP_CERTID_dup(const OCSP_CERTID*);
const EVP_CIPHER* EVP_aes_128_cbc_hmac_sha1();
int OSSL_PARAM_get_int(const OSSL_PARAM*, int*);
BN_CTX* BN_CTX_secure_new();
void DH_clear_flags(DH*, int);
ISSUING_DIST_POINT* ISSUING_DIST_POINT_new();
ASN1_VALUE* SMIME_read_ASN1(BIO*, BIO**, const ASN1_ITEM*);
CERTIFICATEPOLICIES* CERTIFICATEPOLICIES_new();
void BN_GENCB_set(BN_GENCB*, int (int, int, BN_GENCB*)*, void*);
int SSL_set_max_early_data(SSL*, uint32_t);
int X509_LOOKUP_set_method_data(X509_LOOKUP*, void*);
void EC_KEY_set_enc_flags(EC_KEY*, unsigned int);
int EVP_PKEY_keygen_init(EVP_PKEY_CTX*);
EVP_PKEY* d2i_PUBKEY(EVP_PKEY**, const unsigned char**, long);
int BIO_get_shutdown(BIO*);
void NAME_CONSTRAINTS_free(NAME_CONSTRAINTS*);
EC_KEY* d2i_EC_PUBKEY_fp(FILE*, EC_KEY**);
int DSA_meth_set1_name(DSA_METHOD*, const char*);
int BIO_meth_set_ctrl(BIO_METHOD*, long (BIO*, int, long, void*)*);
int ENGINE_set_load_pubkey_function(ENGINE*, ENGINE_LOAD_KEY_PTR);
const EVP_CIPHER* EVP_aria_192_ctr();
void UI_destroy_method(UI_METHOD*);
int EVP_CipherInit_ex(EVP_CIPHER_CTX*, const EVP_CIPHER*, ENGINE*, const unsigned char*, const unsigned char*, int);
void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION*);
int RSA_meth_set_verify(RSA_METHOD*, int (int, const unsigned char*, unsigned int, const unsigned char*, unsigned int, const RSA*)*);
BIO* BIO_new_socket(int, int);
int i2d_X509_CRL_bio(BIO*, const X509_CRL*);
int i2d_KeyParams(const EVP_PKEY*, unsigned char**);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY*, const ASN1_OBJECT*);
uint32_t SSL_CTX_get_max_early_data(const SSL_CTX*);
const BIGNUM* DSA_get0_p(const DSA*);
X509_CINF* X509_CINF_new();
ASYNC_JOB* ASYNC_get_current_job();
int EVP_MD_meth_set_init(EVP_MD*, int (EVP_MD_CTX*)*);
long (BIO*, int, long, void*)* BIO_meth_get_ctrl(const BIO_METHOD*);
ASN1_UTF8STRING* s2i_ASN1_UTF8STRING(X509V3_EXT_METHOD*, X509V3_CTX*, const char*);
const EVP_CIPHER* EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX*);
size_t OPENSSL_strlcpy( char*, const char*, size_t);
void SSL_CTX_sess_set_get_cb(SSL_CTX*, SSL_SESSION* (ssl_st*, const unsigned char*, int, int*)*);
IPAddressChoice* IPAddressChoice_new();
void* X509V3_EXT_d2i(X509_EXTENSION*);
unsigned char* HMAC(const EVP_MD*, const void*, int, const unsigned char*, size_t, unsigned char*, unsigned int*);
long SSL_CTX_callback_ctrl(SSL_CTX*, int, void ()*);
int RSA_sign_ASN1_OCTET_STRING(int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, RSA*);
X509_PUBKEY* PEM_read_bio_X509_PUBKEY(BIO*, X509_PUBKEY**, pem_password_cb*, void*);
int OSSL_HTTP_REQ_CTX_nbio_d2i(OSSL_HTTP_REQ_CTX*, ASN1_VALUE**, const ASN1_ITEM*);
const char* CTLOG_get0_name(const CTLOG*);
const EVP_PKEY_METHOD* EVP_PKEY_meth_get0(size_t);
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM*, time_t);
void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, EVP_PKEY*)**);
void NAMING_AUTHORITY_free(NAMING_AUTHORITY*);
X509* X509_load_http(const char*, BIO*, BIO*, int);
void X509_STORE_set_check_crl(X509_STORE*, X509_STORE_CTX_check_crl_fn);
unsigned int OPENSSL_version_minor();
int X509_issuer_name_cmp(const X509*, const X509*);
void BIO_ADDR_free(BIO_ADDR*);
void CONF_modules_unload(int);
void ENGINE_register_all_digests();
int DH_security_bits(const DH*);
int ASN1_STRING_type(const ASN1_STRING*);
void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)**, int (EVP_PKEY_CTX*, const unsigned char*, size_t, const unsigned char*, size_t)**);
void SSL_CTX_set0_security_ex_data(SSL_CTX*, void*);
void BIO_set_callback_arg(BIO*,  char*);
int SSL_get_async_status(SSL*, int*);
int X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD*, void (X509_LOOKUP*)*);
int PEM_write_bio_DSAPrivateKey(BIO*, const DSA*, const EVP_CIPHER*, const unsigned char*, int, pem_password_cb*, void*);
int i2d_KeyParams_bio(BIO*, const EVP_PKEY*);
void X509_set_proxy_pathlen(X509*, long);
int CONF_modules_load_file_ex(OSSL_LIB_CTX*, const char*, const char*, unsigned long);
int X509v3_get_ext_by_OBJ(const stack_st_X509_EXTENSION*, const ASN1_OBJECT*, int);
int PEM_write_bio_ECPKParameters(BIO*, const EC_GROUP*);
int BIO_ADDR_rawaddress(const BIO_ADDR*, void*, size_t*);
const BIGNUM* DH_get0_q(const DH*);
uint32_t SSL_get_max_early_data(const SSL*);
unsigned long ERR_peek_last_error_func(const char**);
NETSCAPE_CERT_SEQUENCE* PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO*, NETSCAPE_CERT_SEQUENCE**, pem_password_cb*, void*);
int SSL_get_fd(const SSL*);
int EVP_CIPHER_CTX_get_tag_length(const EVP_CIPHER_CTX*);
ASN1_UTCTIME* ASN1_UTCTIME_set(ASN1_UTCTIME*, time_t);
X509_LOOKUP_METHOD* X509_LOOKUP_meth_new(const char*);
int UI_set_result_ex(UI*, UI_STRING*, const char*, int);
int X509_PUBKEY_eq(const X509_PUBKEY*, const X509_PUBKEY*);
int i2d_X509_NAME(const X509_NAME*, unsigned char**);
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM*, unsigned long);
EC_POINT* EC_POINT_bn2point(const EC_GROUP*, const BIGNUM*, EC_POINT*, BN_CTX*);
EVP_PKEY* EVP_PKEY_dup(EVP_PKEY*);
void* DH_get_ex_data(const DH*, int);
int RAND_set_rand_method(const RAND_METHOD*);
ASN1_TIME* ASN1_TIME_set(ASN1_TIME*, time_t);
size_t EC_POINT_point2oct(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, unsigned char*, size_t, BN_CTX*);
void SSL_set0_rbio(SSL*, BIO*);
int RSA_set0_key(RSA*, BIGNUM*, BIGNUM*, BIGNUM*);
ASN1_GENERALIZEDTIME* ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME*, time_t, int, long);
int ASN1_TYPE_set1(ASN1_TYPE*, int, const void*);
const BIGNUM* BN_get0_nist_prime_521();
stack_st_X509* X509_STORE_CTX_get0_untrusted(const X509_STORE_CTX*);
const EVP_CIPHER* EVP_aes_192_cfb8();
int X509_NAME_add_entry_by_NID(X509_NAME*, int, int, const unsigned char*, int, int, int);
PKCS8_PRIV_KEY_INFO* PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO*, PKCS8_PRIV_KEY_INFO**, pem_password_cb*, void*);
const char* EVP_ASYM_CIPHER_get0_description(const EVP_ASYM_CIPHER*);
int BIO_meth_set_destroy(BIO_METHOD*, int (BIO*)*);
EVP_MAC_CTX* EVP_MAC_CTX_new(EVP_MAC*);
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX*, const char*, int, ASN1_TYPE*, const EVP_CIPHER*, const EVP_MD*, int);
int EC_POINT_get_affine_coordinates(const EC_GROUP*, const EC_POINT*, BIGNUM*, BIGNUM*, BN_CTX*);
void X509_STORE_set_cleanup(X509_STORE*, X509_STORE_CTX_cleanup_fn);
ECDSA_SIG* ECDSA_do_sign(const unsigned char*, int, EC_KEY*);
void OPENSSL_cleanup();
int RSA_flags(const RSA*);
void EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*, unsigned char*, size_t*)*);
void BN_CTX_free(BN_CTX*);
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE*);
void X509_STORE_CTX_set0_crls(X509_STORE_CTX*, stack_st_X509_CRL*);
int BIO_meth_set_write(BIO_METHOD*, int (BIO*, const char*, int)*);
void X509_STORE_CTX_set_error_depth(X509_STORE_CTX*, int);
const OSSL_PROVIDER* EVP_RAND_get0_provider(const EVP_RAND*);
void DIST_POINT_free(DIST_POINT*);
int UI_get_result_length(UI*, int);
const char* EVP_PKEY_get0_type_name(const EVP_PKEY*);
int (UI*)* UI_method_get_flusher(const UI_METHOD*);
int PEM_write_bio_RSA_PUBKEY(BIO*, const RSA*);
char* EC_POINT_point2hex(const EC_GROUP*, const EC_POINT*, point_conversion_form_t, BN_CTX*);
int SSL_CTX_add_session(SSL_CTX*, SSL_SESSION*);
int EVP_DigestSignInit(EVP_MD_CTX*, EVP_PKEY_CTX**, const EVP_MD*, ENGINE*, EVP_PKEY*);
stack_st_SCT* o2i_SCT_LIST(stack_st_SCT**, const unsigned char**, size_t);
int (DSA*, BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*, BN_MONT_CTX*)* DSA_meth_get_mod_exp(const DSA_METHOD*);
int X509_REQ_verify_ex(X509_REQ*, EVP_PKEY*, OSSL_LIB_CTX*, const char*);
int UI_dup_user_data(UI*, void*);
X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(const X509_STORE*);
int PEM_write_X509_REQ_NEW(FILE*, const X509_REQ*);
int EVP_KEYMGMT_is_a(const EVP_KEYMGMT*, const char*);
void* ASN1_item_d2i_fp_ex(const ASN1_ITEM*, FILE*, void*, OSSL_LIB_CTX*, const char*);
int DSA_set_ex_data(DSA*, int, void*);
int EVP_PKEY_CTX_get_group_name(EVP_PKEY_CTX*,  char*, size_t);
int RSA_private_decrypt(int, const unsigned char*, unsigned char*, RSA*, int);
NAMING_AUTHORITY* d2i_NAMING_AUTHORITY(NAMING_AUTHORITY**, const unsigned char**, long);
void EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
DSA* d2i_DSAparams(DSA**, const unsigned char**, long);
X509_LOOKUP_METHOD* X509_LOOKUP_store();
ENGINE* ENGINE_get_default_RSA();
PKCS7* PKCS7_encrypt(stack_st_X509*, BIO*, const EVP_CIPHER*, int);
int SSL_SESSION_get0_ticket_appdata(SSL_SESSION*, void**, size_t*);
int i2d_DSAPrivateKey_bio(BIO*, const DSA*);
int EVP_KEYMGMT_up_ref(EVP_KEYMGMT*);
ASN1_TYPE* ASN1_TYPE_pack_sequence(const ASN1_ITEM*, void*, ASN1_TYPE**);
void* EVP_PKEY_get0(const EVP_PKEY*);
void DSA_set_default_method(const DSA_METHOD*);
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX*, const char*, const char*);
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX*, int);
void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH*, FILE*);
ASN1_ENUMERATED* d2i_ASN1_ENUMERATED(ASN1_ENUMERATED**, const unsigned char**, long);
void ENGINE_register_all_RAND();
BIO* BIO_new_buffer_ssl_connect(SSL_CTX*);
int ENGINE_set_default(ENGINE*, unsigned int);
int ECDSA_sign_setup(EC_KEY*, BN_CTX*, BIGNUM**, BIGNUM**);
unsigned long ERR_peek_error_func(const char**);
const OSSL_PARAM* EVP_PKEY_CTX_settable_params(const EVP_PKEY_CTX*);
BIO* SSL_get_wbio(const SSL*);
int RSA_print_fp(FILE*, const RSA*, int);
int EVP_PKEY_verify_recover_init_ex(EVP_PKEY_CTX*, const OSSL_PARAM[]);
DSA* PEM_read_bio_DSAPrivateKey(BIO*, DSA**, pem_password_cb*, void*);
int EVP_PKEY_CTX_set_dsa_paramgen_gindex(EVP_PKEY_CTX*, int);
int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX*, const void*, int, void*, void (ASYNC_WAIT_CTX*, const void*, int, void*)*);
X509_ATTRIBUTE* X509_ATTRIBUTE_create(int, int, void*);
int EVP_MAC_final(EVP_MAC_CTX*, unsigned char*, size_t*, size_t);
void DSA_meth_free(DSA_METHOD*);
int i2d_X509_REQ_bio(BIO*, const X509_REQ*);
int RSA_meth_set_mod_exp(RSA_METHOD*, int (BIGNUM*, const BIGNUM*, RSA*, BN_CTX*)*);
ASN1_VALUE* ASN1_item_d2i(ASN1_VALUE**, const unsigned char**, long, const ASN1_ITEM*);
void X509_ALGOR_set_md(X509_ALGOR*, const EVP_MD*);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED*, int, void*, int, unsigned long);
int i2d_GENERAL_NAMES(const GENERAL_NAMES*, unsigned char**);
EVP_PKEY* EVP_PKEY_new_raw_private_key(int, ENGINE*, const unsigned char*, size_t);
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD*, const EVP_PKEY_ASN1_METHOD*);
PBEPARAM* d2i_PBEPARAM(PBEPARAM**, const unsigned char**, long);
const EC_METHOD* EC_GFp_mont_method();
int i2d_SXNET(const SXNET*, unsigned char**);
void SSL_CTX_set_psk_use_session_callback(SSL_CTX*, SSL_psk_use_session_cb_func);
int CONF_modules_load_file(const char*, const char*, unsigned long);
void SSL_set_hostflags(SSL*, unsigned int);
int EVP_PKEY_get_bits(const EVP_PKEY*);
const ASN1_ITEM* ASN1_ITEM_get(size_t);
int BN_add(BIGNUM*, const BIGNUM*, const BIGNUM*);
const EVP_CIPHER* EVP_camellia_128_ofb();
int X509_REQ_set1_signature_algo(X509_REQ*, X509_ALGOR*);
int EVP_EncryptInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, const OSSL_PARAM[]);
int CRYPTO_get_ex_new_index(int, long, void*, CRYPTO_EX_new*, CRYPTO_EX_dup*, CRYPTO_EX_free*);
int SSL_get_shared_sigalgs(SSL*, int, int*, int*, int*, unsigned char*, unsigned char*);
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX*, int);
ASRange* d2i_ASRange(ASRange**, const unsigned char**, long);
int SSL_set_async_callback(SSL*, SSL_async_callback_fn);
BIGNUM* BN_get_rfc3526_prime_1536(BIGNUM*);
EC_KEY* d2i_ECPrivateKey(EC_KEY**, const unsigned char**, long);
int SSL_set_fd(SSL*, int);
EVP_PKEY* EVP_PKEY_new_raw_public_key(int, ENGINE*, const unsigned char*, size_t);
int EVP_RAND_uninstantiate(EVP_RAND_CTX*);
size_t DTLS_get_data_mtu(const SSL*);
const ASN1_TIME* X509_get0_notBefore(const X509*);
void SSL_get0_next_proto_negotiated(const SSL*, const unsigned char**, unsigned*);
void EVP_KEM_do_all_provided(OSSL_LIB_CTX*, void (EVP_KEM*, void*)*, void*);
int X509_load_cert_file(X509_LOOKUP*, const char*, int);
uint64_t SSL_set_options(SSL*, uint64_t);
int (BIO*,  char*, int)* BIO_meth_get_read(const BIO_METHOD*);
OCSP_REVOKEDINFO* OCSP_REVOKEDINFO_new();
X509_REVOKED* X509_REVOKED_dup(const X509_REVOKED*);
RSA* RSAPublicKey_dup(const RSA*);
int i2d_DIST_POINT_NAME(const DIST_POINT_NAME*, unsigned char**);
RSA_OAEP_PARAMS* RSA_OAEP_PARAMS_new();
ASYNC_WAIT_CTX* ASYNC_WAIT_CTX_new();
int (EVP_MD_CTX*, int, int, void*)* EVP_MD_meth_get_ctrl(const EVP_MD*);
int X509_add_certs(stack_st_X509*, stack_st_X509*, int);
int ENGINE_set_finish_function(ENGINE*, ENGINE_GEN_INT_FUNC_PTR);
BIGNUM* BN_get_rfc2409_prime_768(BIGNUM*);
int PEM_write_bio_PUBKEY_ex(BIO*, const EVP_PKEY*, OSSL_LIB_CTX*, const char*);
int CTLOG_STORE_load_default_file(CTLOG_STORE*);
int i2d_NOTICEREF(const NOTICEREF*, unsigned char**);
ASN1_VISIBLESTRING* d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING**, const unsigned char**, long);
int SSL_CTX_set_recv_max_early_data(SSL_CTX*, uint32_t);
void SSL_CTX_set_verify(SSL_CTX*, int, SSL_verify_cb);
SSL_SESSION* SSL_SESSION_dup(const SSL_SESSION*);
void SSL_CTX_flush_sessions(SSL_CTX*, long);
void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD*, int (EVP_PKEY*, const unsigned char*, size_t)*);
int ASN1_GENERALIZEDTIME_print(BIO*, const ASN1_GENERALIZEDTIME*);
int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX*);
BIO* BIO_new(const BIO_METHOD*);
EVP_PKEY* EVP_PKEY_new_raw_private_key_ex(OSSL_LIB_CTX*, const char*, const char*, const unsigned char*, size_t);
X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(const X509_STORE*);
AUTHORITY_INFO_ACCESS* AUTHORITY_INFO_ACCESS_new();
int PEM_write_bio_PKCS8(BIO*, const X509_SIG*);
int SSL_set_session(SSL*, SSL_SESSION*);
int EVP_PKEY_set_bn_param(EVP_PKEY*, const char*, const BIGNUM*);
int ERR_clear_last_mark();
const EVP_CIPHER* EVP_des_ofb();
int ASN1_TIME_print_ex(BIO*, const ASN1_TIME*, unsigned long);
int i2d_X509_PUBKEY_bio(BIO*, const X509_PUBKEY*);
const EC_KEY_METHOD* EC_KEY_get_method(const EC_KEY*);
EVP_PKEY_CTX* EVP_PKEY_CTX_new_id(int, ENGINE*);
int EVP_PKEY_missing_parameters(const EVP_PKEY*);
void SCT_set_timestamp(SCT*, uint64_t);
int PEM_write_bio_RSAPublicKey(BIO*, const RSA*);
void OCSP_REQINFO_free(OCSP_REQINFO*);
int SHA256_Init(SHA256_CTX*);
const char* SSL_get_psk_identity(const SSL*);
int PEM_write_bio_X509_CRL(BIO*, const X509_CRL*);
int i2d_OCSP_REQUEST(const OCSP_REQUEST*, unsigned char**);
int SCT_set_signature_nid(SCT*, int);
int EVP_Q_digest(OSSL_LIB_CTX*, const char*, const char*, const void*, size_t, unsigned char*, size_t*);
int (EVP_CIPHER_CTX*)* EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER*);
unsigned long ERR_peek_last_error_data(const char**, int*);
const EVP_CIPHER* EVP_aes_128_ocb();
ECDSA_SIG* ECDSA_SIG_new();
int BIO_free(BIO*);
ENGINE* RSA_get0_engine(const RSA*);
OSSL_HTTP_REQ_CTX* OSSL_HTTP_REQ_CTX_new(BIO*, BIO*, int);
const SSL_METHOD* DTLSv1_2_method();
X509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(const X509_STORE_CTX*);
int X509_pubkey_digest(const X509*, const EVP_MD*, unsigned char*, unsigned int*);
const SSL_METHOD* TLSv1_server_method();
int EVP_MD_meth_set_input_blocksize(EVP_MD*, int);
int EVP_PKEY_CTX_get0_ecdh_kdf_ukm(EVP_PKEY_CTX*, unsigned char**);
const EVP_CIPHER* EVP_aria_128_ctr();
int UI_add_input_string(UI*, const char*, int,  char*, int, int);
EVP_PKEY* X509_REQ_get_pubkey(X509_REQ*);
void SSL_CTX_set_cert_store(SSL_CTX*, X509_STORE*);
const EVP_CIPHER* EVP_aes_128_ofb();
int SSL_CTX_config(SSL_CTX*, const char*);
BN_MONT_CTX* BN_MONT_CTX_new();
int X509_set1_notBefore(X509*, const ASN1_TIME*);
int EVP_DecryptInit_ex2(EVP_CIPHER_CTX*, const EVP_CIPHER*, const unsigned char*, const unsigned char*, const OSSL_PARAM[]);
time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM*);
int BN_mul_word(BIGNUM*, unsigned long);
void EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD*, int (EVP_PKEY*)*);
OSSL_HTTP_REQ_CTX* OCSP_sendreq_new(BIO*, const char*, const OCSP_REQUEST*, int);
void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS*, unsigned long);
int X509_STORE_set_flags(X509_STORE*, unsigned long);
int ENGINE_up_ref(ENGINE*);
int SSL_read_ex(SSL*, void*, size_t, size_t*);
const EVP_CIPHER* EVP_aes_128_wrap();
void ASN1_add_oid_module();
SSL_CONF_CTX* SSL_CONF_CTX_new();
int EVP_PKEY_paramgen(EVP_PKEY_CTX*, EVP_PKEY**);
PROXY_POLICY* PROXY_POLICY_new();
int CRYPTO_atomic_or(uint64_t*, uint64_t, uint64_t*, CRYPTO_RWLOCK*);
int RSA_meth_set_init(RSA_METHOD*, int (RSA*)*);
ENGINE* ENGINE_get_first();
char* X509_VERIFY_PARAM_get1_ip_asc(X509_VERIFY_PARAM*);
void BN_RECP_CTX_free(BN_RECP_CTX*);
void ENGINE_add_conf_module();
X509_NAME_ENTRY* X509_NAME_delete_entry(X509_NAME*, int);
int PKCS7_add_crl(PKCS7*, X509_CRL*);
const SSL_CIPHER* SSL_CIPHER_find(SSL*, const unsigned char*);
void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD*, int (const EVP_PKEY*)*);
void EC_GROUP_set_asn1_flag(EC_GROUP*, int);
int EC_POINTs_mul(const EC_GROUP*, EC_POINT*, const BIGNUM*, size_t, const EC_POINT*[], const BIGNUM*[], BN_CTX*);
void SCT_set0_signature(SCT*, unsigned char*, size_t);
void* EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX*);
void NCONF_free(CONF*);
int BN_is_zero(const BIGNUM*);
const UI_METHOD* UI_set_method(UI*, const UI_METHOD*);
void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX*);
int i2d_SCRYPT_PARAMS(const SCRYPT_PARAMS*, unsigned char**);
int EVP_PKEY_derive_init(EVP_PKEY_CTX*);
int (SSL*, X509**, EVP_PKEY**)* SSL_CTX_get_client_cert_cb(SSL_CTX*);
const BIO_ADDR* BIO_ADDRINFO_address(const BIO_ADDRINFO*);
int PEM_write_bio_PKCS7(BIO*, const PKCS7*);
int OPENSSL_sk_is_sorted(const OPENSSL_STACK*);
int EVP_CIPHER_get_key_length(const EVP_CIPHER*);
GENERAL_SUBTREE* GENERAL_SUBTREE_new();
EVP_PKEY* EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX*);
POLICYINFO* d2i_POLICYINFO(POLICYINFO**, const unsigned char**, long);
int DH_check_ex(const DH*);
int EVP_CIPHER_get_iv_length(const EVP_CIPHER*);
void BUF_MEM_free(BUF_MEM*);
int (DH*)* DH_meth_get_finish(const DH_METHOD*);
X509_REQ* d2i_X509_REQ_fp(FILE*, X509_REQ**);
const EVP_CIPHER* EVP_sm4_cbc();
int SSL_set_async_callback_arg(SSL*, void*);
int DH_set_ex_data(DH*, int, void*);
void EVP_MD_CTX_set_update_fn(EVP_MD_CTX*, int (EVP_MD_CTX*, const void*, size_t)*);
sct_version_t SCT_get_version(const SCT*);
int EC_GROUP_get_trinomial_basis(const EC_GROUP*, unsigned int*);
const EVP_CIPHER* EVP_rc2_cbc();
void SSL_set_security_level(SSL*, int);
int EVP_MD_get_block_size(const EVP_MD*);
const CTLOG_STORE* CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX*);
int OSSL_PARAM_get_time_t(const OSSL_PARAM*, time_t*);
DSA_SIG* DSA_do_sign(const unsigned char*, int, DSA*);
EVP_PKEY* PEM_read_PUBKEY_ex(FILE*, EVP_PKEY**, pem_password_cb*, void*, OSSL_LIB_CTX*, const char*);
void TLS_FEATURE_free(TLS_FEATURE*);
const EVP_CIPHER* EVP_camellia_192_ecb();
const EVP_CIPHER* EVP_des_ede_ofb();
const BIO_METHOD* BIO_f_ssl();
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX*, unsigned char*, int*);
size_t SCT_get0_log_id(const SCT*, unsigned char**);
int OSSL_PARAM_allocate_from_text(OSSL_PARAM*, const OSSL_PARAM*, const char*, const char*, size_t, int*);
int RSA_sign(int, const unsigned char*, unsigned int, unsigned char*, unsigned int*, RSA*);
void OPENSSL_thread_stop();
const SSL_METHOD* DTLS_method();
int BN_hex2bn(BIGNUM**, const char*);
X509_NAME* X509_REQ_get_subject_name(const X509_REQ*);
char* SSL_get_shared_ciphers(const SSL*,  char*, int);
int OSSL_PARAM_get_ulong(const OSSL_PARAM*, unsigned long int*);
void X509_set_proxy_flag(X509*);
void SSL_set0_security_ex_data(SSL*, void*);
void X509_STORE_CTX_set0_param(X509_STORE_CTX*, X509_VERIFY_PARAM*);
int X509_verify(X509*, EVP_PKEY*);
void SSL_set_verify(SSL*, int, SSL_verify_cb);
int ECDSA_sign_ex(int, const unsigned char*, int, unsigned char*, unsigned int*, const BIGNUM*, const BIGNUM*, EC_KEY*);
int SSL_CTX_enable_ct(SSL_CTX*, int);
int (BIO*, const char*, size_t, size_t*)* BIO_meth_get_write_ex(const BIO_METHOD*);
int EVP_set_default_properties(OSSL_LIB_CTX*, const char*);
EC_GROUP* PEM_read_ECPKParameters(FILE*, EC_GROUP**, pem_password_cb*, void*);
int BN_generate_prime_ex2(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, BN_GENCB*, BN_CTX*);
ACCESS_DESCRIPTION* d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION**, const unsigned char**, long);
int CRYPTO_free_ex_index(int, int);
const EC_METHOD* EC_GFp_nistp256_method();
int EVP_PKEY_CTX_get_dh_kdf_outlen(EVP_PKEY_CTX*, int*);
void SSL_CTX_set_client_CA_list(SSL_CTX*, stack_st_X509_NAME*);
int i2d_RSAPublicKey_fp(FILE*, const RSA*);
const char* ERR_func_error_string(unsigned long);
int BN_generate_prime_ex(BIGNUM*, int, int, const BIGNUM*, const BIGNUM*, BN_GENCB*);
EC_POINT* EC_POINT_new(const EC_GROUP*);
ASN1_OCTET_STRING* X509_REQ_get0_distinguishing_id(X509_REQ*);
int BN_gcd(BIGNUM*, const BIGNUM*, const BIGNUM*, BN_CTX*);
ASN1_STRING* DISPLAYTEXT_new();
int BIO_ADDR_family(const BIO_ADDR*);
void EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*, EVP_MD_CTX*)*);
OCSP_RESPID* OCSP_RESPID_new();
const EVP_CIPHER* EVP_bf_cfb64();
int ECPKParameters_print_fp(FILE*, const EC_GROUP*, int);
void ERR_clear_error();
void ASN1_OBJECT_free(ASN1_OBJECT*);
int EVP_RAND_CTX_set_params(EVP_RAND_CTX*, const OSSL_PARAM[]);
int X509_ALGOR_set0(X509_ALGOR*, ASN1_OBJECT*, int, void*);
EVP_PKEY* PEM_read_bio_Parameters_ex(BIO*, EVP_PKEY**, OSSL_LIB_CTX*, const char*);
int EC_KEY_decoded_from_explicit_params(const EC_KEY*);
ADMISSIONS* ADMISSIONS_new();
EC_KEY* d2i_EC_PUBKEY_bio(BIO*, EC_KEY**);
int RSA_meth_set_flags(RSA_METHOD*, int);
ASIdOrRange* d2i_ASIdOrRange(ASIdOrRange**, const unsigned char**, long);
int OSSL_PARAM_set_octet_ptr(OSSL_PARAM*, const void*, size_t);
int UI_UTIL_read_pw_string( char*, int, const char*, int);
int EVP_PKEY_get_group_name(const EVP_PKEY*,  char*, size_t, size_t*);
const BIGNUM* BN_get0_nist_prime_224();
ASRange* ASRange_new();
EVP_SIGNATURE* EVP_SIGNATURE_fetch(OSSL_LIB_CTX*, const char*, const char*);
int EVP_DigestVerifyInit_ex(EVP_MD_CTX*, EVP_PKEY_CTX**, const char*, OSSL_LIB_CTX*, const char*, EVP_PKEY*, const OSSL_PARAM[]);
const EVP_CIPHER* EVP_aes_128_cfb1();
int X509_STORE_CTX_print_verify_cb(int, X509_STORE_CTX*);
const GENERAL_NAMES* X509_get0_authority_issuer(X509*);
int i2d_OCSP_RESPID(const OCSP_RESPID*, unsigned char**);
int SSL_SESSION_has_ticket(const SSL_SESSION*);
ASIdentifierChoice* ASIdentifierChoice_new();
int DSA_meth_set0_app_data(DSA_METHOD*, void*);
int EVP_DigestSignUpdate(EVP_MD_CTX*, const void*, size_t);
ASN1_OBJECT* X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY*);
size_t BIO_ctrl_wpending(BIO*);
DH* DH_get_2048_256();
void OPENSSL_fork_child();
const OSSL_PROVIDER* EVP_MAC_get0_provider(const EVP_MAC*);
void CTLOG_free(CTLOG*);
int ENGINE_ctrl(ENGINE*, int, long, void*, void ()*);
const BIGNUM* RSA_get0_d(const RSA*);
int X509_NAME_cmp(const X509_NAME*, const X509_NAME*);
int SSL_bytes_to_cipher_list(SSL*, const unsigned char*, size_t, int, stack_st_SSL_CIPHER**, stack_st_SSL_CIPHER**);
OSSL_PARAM* OSSL_PARAM_locate(OSSL_PARAM*, const char*);
const DSA_METHOD* ENGINE_get_DSA(const ENGINE*);
SCT* o2i_SCT(SCT**, const unsigned char**, size_t);
int EC_GROUP_copy(EC_GROUP*, const EC_GROUP*);
OSSL_HANDSHAKE_STATE SSL_get_state(const SSL*);
int BN_lshift1(BIGNUM*, const BIGNUM*);
int (EVP_CIPHER_CTX*, ASN1_TYPE*)* EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER*);
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX*, int, int, int, int, void*);
SCT* SCT_new();
const OSSL_PARAM* EVP_MD_gettable_ctx_params(const EVP_MD*);
ENGINE* ENGINE_new();
int EVP_CIPHER_is_a(const EVP_CIPHER*, const char*);
int BN_rand_range(BIGNUM*, const BIGNUM*);
const BIO_METHOD* BIO_s_secmem();
int SSL_CTX_use_cert_and_key(SSL_CTX*, X509*, EVP_PKEY*, stack_st_X509*, int);
void PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO*, stack_st_ASN1_OBJECT*);
int EVP_PKEY_up_ref(EVP_PKEY*);
void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD*, int (EVP_PKEY_CTX*)*, int (EVP_PKEY_CTX*, EVP_PKEY*)*);
void ENGINE_unregister_ciphers(ENGINE*);
int SSL_CTX_add_client_CA(SSL_CTX*, X509*);
int i2d_X509_CRL(const X509_CRL*, unsigned char**);
void SSL_set_post_handshake_auth(SSL*, int);
int i2d_ECPrivateKey(const EC_KEY*, unsigned char**);
int X509_PUBKEY_set0_param(X509_PUBKEY*, ASN1_OBJECT*, int, void*, unsigned char*, int);
int X509v3_get_ext_by_critical(const stack_st_X509_EXTENSION*, int, int);
int SHA1_Init(SHA_CTX*);
size_t SSL_client_hello_get0_random(SSL*, const unsigned char**);
int X509_issuer_and_serial_cmp(const X509*, const X509*);
